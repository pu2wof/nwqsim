#include <stdio.h>
#include <mpi.h>
#include "../../src/util.h"
#include "../../src/svsim_nvgpu_mpi.cuh"
//Use the NWQSim namespace to enable C++/CUDA APIs
using namespace NWQSim;

void prepare_circuit(Simulation &sim)
{
	sim.X(1);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.CX(2, 3);
	sim.CX(3, 2);
	sim.CX(2, 3);
	sim.CX(1, 4);
	sim.CX(4, 1);
	sim.CX(1, 4);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.X(5);
	sim.X(6);
	sim.X(7);
	sim.CX(4, 7);
	sim.CX(7, 4);
	sim.CX(4, 7);
	sim.CX(1, 4);
	sim.CX(0, 1);
	sim.CX(1, 0);
	sim.CX(0, 1);
	sim.CX(7, 6);
	sim.CX(4, 7);
	sim.CX(7, 4);
	sim.CX(4, 7);
	sim.CX(6, 7);
	sim.CX(7, 6);
	sim.CX(6, 7);
	sim.X(8);
	sim.CX(5, 8);
	sim.CX(8, 5);
	sim.CX(5, 8);
	sim.CX(3, 5);
	sim.CX(5, 3);
	sim.CX(3, 5);
	sim.CX(2, 3);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.CX(1, 4);
	sim.CX(4, 1);
	sim.CX(1, 4);
	sim.CX(5, 8);
	sim.CX(3, 5);
	sim.CX(5, 3);
	sim.CX(3, 5);
	sim.CX(3, 2);
	sim.RZ(1.57079632679, 3);
	sim.SX(3);
	sim.RZ(1.57079632679, 3);
	sim.CX(3, 5);
	sim.CX(5, 3);
	sim.CX(3, 5);
	sim.CX(8, 5);
	sim.RZ(-0.785398163397, 5);
	sim.CX(3, 5);
	sim.CX(5, 3);
	sim.CX(3, 5);
	sim.CX(2, 3);
	sim.RZ(0.785398163397, 3);
	sim.CX(3, 5);
	sim.CX(5, 3);
	sim.CX(3, 5);
	sim.CX(2, 3);
	sim.CX(3, 2);
	sim.CX(2, 3);
	sim.CX(8, 5);
	sim.RZ(-0.785398163397, 5);
	sim.CX(3, 5);
	sim.CX(3, 5);
	sim.CX(5, 3);
	sim.CX(3, 5);
	sim.RZ(0.785398163397, 3);
	sim.RZ(1.57079632679, 3);
	sim.SX(3);
	sim.RZ(1.57079632679, 3);
	sim.CX(2, 3);
	sim.CX(3, 2);
	sim.CX(2, 3);
	sim.CX(1, 2);
	sim.RZ(1.57079632679, 1);
	sim.SX(1);
	sim.RZ(1.57079632679, 1);
	sim.CX(1, 4);
	sim.CX(4, 1);
	sim.CX(1, 4);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.CX(7, 4);
	sim.RZ(-0.785398163397, 4);
	sim.CX(1, 4);
	sim.RZ(0.785398163397, 4);
	sim.CX(7, 4);
	sim.RZ(-0.785398163397, 4);
	sim.CX(1, 4);
	sim.CX(1, 4);
	sim.CX(4, 1);
	sim.CX(1, 4);
	sim.RZ(0.785398163397, 1);
	sim.RZ(1.57079632679, 1);
	sim.SX(1);
	sim.RZ(1.57079632679, 1);
	sim.CX(0, 1);
	sim.RZ(1.57079632679, 0);
	sim.SX(0);
	sim.RZ(1.57079632679, 0);
	sim.CX(0, 1);
	sim.CX(1, 0);
	sim.CX(0, 1);
	sim.RZ(0.785398163397, 7);
	sim.CX(4, 7);
	sim.RZ(0.785398163397, 4);
	sim.RZ(-0.785398163397, 7);
	sim.CX(4, 7);
	sim.CX(6, 7);
	sim.CX(7, 6);
	sim.CX(6, 7);
	sim.CX(4, 7);
	sim.CX(7, 4);
	sim.CX(4, 7);
	sim.CX(4, 1);
	sim.RZ(-0.785398163397, 1);
	sim.CX(0, 1);
	sim.RZ(0.785398163397, 1);
	sim.CX(4, 1);
	sim.RZ(-0.785398163397, 1);
	sim.CX(0, 1);
	sim.CX(0, 1);
	sim.CX(1, 0);
	sim.CX(0, 1);
	sim.RZ(0.785398163397, 0);
	sim.RZ(1.57079632679, 0);
	sim.SX(0);
	sim.RZ(1.57079632679, 0);
	sim.RZ(0.785398163397, 4);
	sim.CX(1, 4);
	sim.RZ(0.785398163397, 1);
	sim.CX(0, 1);
	sim.CX(1, 0);
	sim.CX(0, 1);
	sim.CX(2, 1);
	sim.CX(0, 1);
	sim.CX(1, 0);
	sim.CX(0, 1);
	sim.RZ(1.57079632679, 2);
	sim.SX(2);
	sim.RZ(1.57079632679, 2);
	sim.CX(3, 2);
	sim.RZ(-0.785398163397, 2);
	sim.RZ(-0.785398163397, 4);
	sim.CX(1, 4);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.CX(0, 1);
	sim.RZ(0.785398163397, 1);
	sim.CX(2, 3);
	sim.CX(3, 2);
	sim.CX(2, 3);
	sim.CX(2, 1);
	sim.RZ(-0.785398163397, 1);
	sim.CX(0, 1);
	sim.RZ(0.785398163397, 2);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.CX(0, 1);
	sim.RZ(0.785398163397, 0);
	sim.RZ(-0.785398163397, 1);
	sim.CX(0, 1);
	sim.RZ(0.785398163397, 2);
	sim.RZ(1.57079632679, 2);
	sim.SX(2);
	sim.RZ(1.57079632679, 2);
	sim.CX(2, 3);
	sim.CX(3, 2);
	sim.CX(2, 3);
	sim.CX(6, 7);
	sim.CX(7, 6);
	sim.CX(6, 7);
	sim.RZ(0.785398163397, 8);
	sim.CX(5, 8);
	sim.RZ(0.785398163397, 5);
	sim.RZ(-0.785398163397, 8);
	sim.CX(5, 8);
	sim.CX(8, 9);
	sim.CX(9, 8);
	sim.CX(8, 9);
	sim.CX(5, 8);
	sim.CX(8, 5);
	sim.CX(5, 8);
	sim.CX(3, 5);
	sim.RZ(1.57079632679, 3);
	sim.SX(3);
	sim.RZ(1.57079632679, 3);
	sim.CX(2, 3);
	sim.CX(3, 2);
	sim.CX(2, 3);
	sim.CX(1, 2);
	sim.RZ(-0.785398163397, 2);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.CX(0, 1);
	sim.RZ(0.785398163397, 1);
	sim.CX(2, 1);
	sim.RZ(-0.785398163397, 1);
	sim.CX(0, 1);
	sim.RZ(0.785398163397, 2);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.CX(0, 1);
	sim.RZ(0.785398163397, 0);
	sim.RZ(-0.785398163397, 1);
	sim.CX(0, 1);
	sim.RZ(0.785398163397, 2);
	sim.RZ(1.57079632679, 2);
	sim.SX(2);
	sim.RZ(1.57079632679, 2);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.CX(1, 0);
	sim.CX(0, 1);
	sim.CX(1, 0);
	sim.CX(0, 1);
	sim.CX(1, 2);
	sim.RZ(1.57079632679, 1);
	sim.SX(1);
	sim.RZ(1.57079632679, 1);
	sim.CX(4, 1);
	sim.RZ(-0.785398163397, 1);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.CX(1, 4);
	sim.CX(3, 2);
	sim.RZ(0.785398163397, 2);
	sim.CX(4, 1);
	sim.CX(1, 4);
	sim.CX(1, 2);
	sim.RZ(0.785398163397, 1);
	sim.RZ(-0.785398163397, 2);
	sim.CX(3, 2);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.RZ(0.785398163397, 1);
	sim.RZ(1.57079632679, 1);
	sim.SX(1);
	sim.RZ(1.57079632679, 1);
	sim.CX(3, 2);
	sim.RZ(-0.785398163397, 2);
	sim.RZ(0.785398163397, 3);
	sim.CX(3, 2);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.CX(2, 3);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.CX(3, 2);
	sim.RZ(1.57079632679, 3);
	sim.SX(3);
	sim.RZ(1.57079632679, 3);
	sim.CX(2, 3);
	sim.CX(3, 2);
	sim.CX(2, 3);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.CX(4, 7);
	sim.CX(7, 4);
	sim.CX(4, 7);
	sim.CX(4, 1);
	sim.RZ(-0.785398163397, 1);
	sim.CX(1, 4);
	sim.CX(4, 1);
	sim.CX(1, 4);
	sim.CX(6, 7);
	sim.CX(7, 6);
	sim.CX(6, 7);
	sim.CX(7, 4);
	sim.RZ(0.785398163397, 4);
	sim.CX(1, 4);
	sim.RZ(0.785398163397, 1);
	sim.RZ(-0.785398163397, 4);
	sim.CX(7, 4);
	sim.CX(1, 4);
	sim.CX(4, 1);
	sim.CX(1, 4);
	sim.RZ(0.785398163397, 1);
	sim.RZ(1.57079632679, 1);
	sim.SX(1);
	sim.RZ(1.57079632679, 1);
	sim.CX(7, 4);
	sim.RZ(-0.785398163397, 4);
	sim.RZ(0.785398163397, 7);
	sim.CX(7, 4);
	sim.CX(4, 7);
	sim.CX(7, 4);
	sim.CX(4, 7);
	sim.CX(1, 4);
	sim.CX(4, 7);
	sim.RZ(1.57079632679, 4);
	sim.SX(4);
	sim.RZ(1.57079632679, 4);
	sim.CX(1, 4);
	sim.CX(4, 1);
	sim.CX(1, 4);
	sim.CX(1, 2);
	sim.CX(2, 1);
	sim.CX(1, 2);
	sim.CX(8, 9);
	sim.CX(9, 8);
	sim.CX(8, 9);
	sim.CX(5, 8);
	sim.CX(8, 5);
	sim.CX(5, 8);
	sim.CX(3, 5);
	sim.CX(5, 3);
	sim.CX(3, 5);
	sim.CX(3, 2);
	sim.RZ(-0.785398163397, 2);
	sim.CX(2, 3);
	sim.CX(3, 2);
	sim.CX(2, 3);
	sim.CX(8, 9);
	sim.CX(9, 8);
	sim.CX(8, 9);
	sim.CX(5, 8);
	sim.CX(8, 5);
	sim.CX(5, 8);
	sim.CX(5, 3);
	sim.RZ(0.785398163397, 3);
	sim.CX(2, 3);
	sim.RZ(0.785398163397, 2);
	sim.RZ(-0.785398163397, 3);
	sim.CX(5, 3);
	sim.CX(3, 5);
	sim.CX(5, 3);
	sim.CX(3, 5);
	sim.CX(3, 2);
	sim.RZ(-0.785398163397, 2);
	sim.RZ(0.785398163397, 3);
	sim.CX(3, 2);
	sim.RZ(0.785398163397, 5);
	sim.RZ(1.57079632679, 5);
	sim.SX(5);
	sim.RZ(1.57079632679, 5);
	sim.CX(5, 3);
	sim.CX(3, 2);
}

int main(int argc, char *argv[])
{
	MPI_Init(&argc, &argv);
	Simulation sim(10);
	prepare_circuit(sim);
    auto* res = sim.measure_all(10);
    if (sim.i_gpu==0) printf("\n -------- adder_n10 ---------\n");
    if (sim.i_gpu==0) print_measurement(res,10,10);
	MPI_Finalize();
	return 0;
}
