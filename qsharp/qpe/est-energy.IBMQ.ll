
%Range = type { i64, i64, i64 }
%Tuple = type opaque
%Array = type opaque
%Callable = type opaque
%String = type opaque
%Qubit = type opaque
%Result = type opaque

@PauliI = internal constant i2 0
@PauliX = internal constant i2 1
@PauliY = internal constant i2 -1
@PauliZ = internal constant i2 -2
@EmptyRange = internal constant %Range { i64 0, i64 1, i64 -1 }
@Microsoft__Quantum__Chemistry__HTerm__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__HTerm__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@0 = internal constant [2 x i8] c"A\00"
@1 = internal constant [2 x i8] c"B\00"
@2 = internal constant [2 x i8] c"C\00"
@3 = internal constant [2 x i8] c"D\00"
@4 = internal constant [2 x i8] c"E\00"
@5 = internal constant [2 x i8] c"F\00"
@Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@6 = internal constant [2 x i8] c"G\00"
@7 = internal constant [2 x i8] c"H\00"
@8 = internal constant [2 x i8] c"I\00"
@9 = internal constant [2 x i8] c"J\00"
@PartialApplication__1__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__1__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__1__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__1__RefCount, void (%Tuple*, i32)* @MemoryManagement__1__AliasCount]
@10 = internal constant [2 x i8] c"K\00"
@11 = internal constant [2 x i8] c"L\00"
@PartialApplication__2__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__2__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Characterization__RobustPhaseEstimation__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Characterization__RobustPhaseEstimation__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__2__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__2__RefCount, void (%Tuple*, i32)* @MemoryManagement__2__AliasCount]
@12 = internal constant [2 x i8] c"M\00"
@13 = internal constant [2 x i8] c"N\00"
@14 = internal constant [2 x i8] c"P\00"
@15 = internal constant [28 x i8] c"reached unreachable code...\00"
@16 = internal constant [75 x i8] c"operation ApplyDiagonalUnitary -- Number of qubits must be greater than 0.\00"
@PartialApplication__3__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__3__ctladj__wrapper]
@Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj__wrapper]
@MemoryManagement__3__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__3__RefCount, void (%Tuple*, i32)* @MemoryManagement__3__AliasCount]
@PartialApplication__4__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__4__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__4__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__4__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__4__ctladj__wrapper]
@Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj__wrapper]
@MemoryManagement__4__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__4__RefCount, void (%Tuple*, i32)* @MemoryManagement__4__AliasCount]
@Microsoft__Quantum__Intrinsic__H__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__H__ctladj__wrapper]
@PartialApplication__5__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__5__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__S__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__S__ctladj__wrapper]
@17 = internal constant [38 x i8] c"MultiplexPauli failed. Invalid pauli \00"
@18 = internal constant [7 x i8] c"PauliX\00"
@19 = internal constant [7 x i8] c"PauliY\00"
@20 = internal constant [7 x i8] c"PauliZ\00"
@21 = internal constant [7 x i8] c"PauliI\00"
@22 = internal constant [2 x i8] c".\00"
@PartialApplication__6__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__6__ctladj__wrapper]
@PartialApplication__7__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__7__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__7__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__7__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__7__ctladj__wrapper]
@PartialApplication__8__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__8__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__8__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__8__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__8__ctladj__wrapper]
@PartialApplication__9__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__9__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__9__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__9__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__9__ctladj__wrapper]
@PartialApplication__10__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__10__ctladj__wrapper]
@PartialApplication__11__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__11__ctladj__wrapper]
@PartialApplication__12__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__12__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__12__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__12__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__12__ctladj__wrapper]
@PartialApplication__13__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__13__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__13__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__13__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__13__ctladj__wrapper]
@PartialApplication__14__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__14__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__14__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__14__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__14__ctladj__wrapper]
@PartialApplication__15__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__15__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__15__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__15__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__15__ctladj__wrapper]
@Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__ctladj__wrapper]
@MemoryManagement__5__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__5__RefCount, void (%Tuple*, i32)* @MemoryManagement__5__AliasCount]
@PartialApplication__16__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__16__ctladj__wrapper]
@Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____ctladj__wrapper]
@MemoryManagement__6__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__6__RefCount, void (%Tuple*, i32)* @MemoryManagement__6__AliasCount]
@PartialApplication__17__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__17__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Canon___11c79ab270fa4d91ab1a5b7fb6d4bd5d___QsRef1__ComposedOutput____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___11c79ab270fa4d91ab1a5b7fb6d4bd5d___QsRef1__ComposedOutput____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__7__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__7__RefCount, void (%Tuple*, i32)* @MemoryManagement__7__AliasCount]
@PartialApplication__18__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__18__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Canon___7c1d4e110efc45d686748c23da837b88___QsRef1__ComposedOutput____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___7c1d4e110efc45d686748c23da837b88___QsRef1__ComposedOutput____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__8__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__8__RefCount, void (%Tuple*, i32)* @MemoryManagement__8__AliasCount]
@PartialApplication__19__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__19__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Canon___80e474e595394349a32401558841bc5d___QsRef1__ComposedOutput____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___80e474e595394349a32401558841bc5d___QsRef1__ComposedOutput____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__9__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__9__RefCount, void (%Tuple*, i32)* @MemoryManagement__9__AliasCount]
@PartialApplication__20__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__20__ctladj__wrapper]
@Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__ctladj__wrapper]
@MemoryManagement__10__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__10__RefCount, void (%Tuple*, i32)* @MemoryManagement__10__AliasCount]
@PartialApplication__21__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__21__ctladj__wrapper]
@Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__ctladj__wrapper]
@MemoryManagement__11__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__11__RefCount, void (%Tuple*, i32)* @MemoryManagement__11__AliasCount]
@PartialApplication__22__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__22__ctladj__wrapper]
@Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__ctladj__wrapper]
@MemoryManagement__12__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__12__RefCount, void (%Tuple*, i32)* @MemoryManagement__12__AliasCount]
@PartialApplication__23__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__23__ctladj__wrapper]
@Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__ctladj__wrapper]
@MemoryManagement__13__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__13__RefCount, void (%Tuple*, i32)* @MemoryManagement__13__AliasCount]
@23 = internal constant [47 x i8] c"Control register shorter than control pattern.\00"
@PartialApplication__24__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__24__ctladj__wrapper]
@Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____ctladj__wrapper]
@MemoryManagement__14__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__14__RefCount, void (%Tuple*, i32)* @MemoryManagement__14__AliasCount]
@PartialApplication__25__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__25__ctladj__wrapper]
@Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____ctladj__wrapper]
@PartialApplication__26__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__26__ctladj__wrapper]
@Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctladj__wrapper]
@MemoryManagement__15__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__15__RefCount, void (%Tuple*, i32)* @MemoryManagement__15__AliasCount]
@24 = internal constant [11 x i8] c"Odd order \00"
@25 = internal constant [20 x i8] c" not yet supported.\00"
@26 = internal constant [2 x i8] c"\22\00"
@27 = internal constant [13 x i8] c"\0A\09Expected:\09\00"
@28 = internal constant [5 x i8] c"true\00"
@29 = internal constant [6 x i8] c"false\00"
@30 = internal constant [11 x i8] c"\0A\09Actual:\09\00"
@31 = internal constant [55 x i8] c"Arrays 'paulis' and 'qubits' must have the same length\00"
@32 = internal constant [18 x i8] c"Unsupported input\00"
@Microsoft__Quantum__Intrinsic__CNOT__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__CNOT__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__CNOT__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__CNOT__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__CNOT__ctladj__wrapper]
@33 = internal constant [54 x i8] c"Arrays 'pauli' and 'qubits' must have the same length\00"
@PartialApplication__27__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__27__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__R__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__R__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__R__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__R__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__R__ctladj__wrapper]
@MemoryManagement__16__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__16__RefCount, void (%Tuple*, i32)* @MemoryManagement__16__AliasCount]
@PartialApplication__28__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__28__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__28__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__28__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__28__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__Rx__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Rx__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Rx__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Rx__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Rx__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__Ry__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Ry__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Ry__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Ry__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Ry__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__Rz__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Rz__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Rz__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Rz__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Rz__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__T__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__T__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__T__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__T__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__T__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__X__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__X__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__Y__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Y__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Y__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Y__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Y__ctladj__wrapper]
@Microsoft__Quantum__Intrinsic__Z__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Z__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Z__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Z__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Intrinsic__Z__ctladj__wrapper]
@34 = internal constant [33 x i8] c"`bits` must be between 0 and 63 \00"
@35 = internal constant [34 x i8] c"`number` must be between 0 and 2^\00"
@36 = internal constant [15 x i8] c" - 1, but was \00"
@DefaultCallable__NullFunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] zeroinitializer
@37 = internal constant [32 x i8] c"`to` must be larger than `from`\00"
@PartialApplication__29__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__29__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___68c15fee7a6746968076b9d2945f8128_ElementAt__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___68c15fee7a6746968076b9d2945f8128_ElementAt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__17__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__17__RefCount, void (%Tuple*, i32)* @MemoryManagement__17__AliasCount]
@PartialApplication__30__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__30__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___fce9026400844d708a24c4f7b72d6524_ElementAt__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___fce9026400844d708a24c4f7b72d6524_ElementAt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__18__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__18__RefCount, void (%Tuple*, i32)* @MemoryManagement__18__AliasCount]
@38 = internal constant [32 x i8] c"Matrix must have at least 1 row\00"
@39 = internal constant [35 x i8] c"Matrix must have at least 1 column\00"
@40 = internal constant [34 x i8] c"Matrix is not a rectangular array\00"
@PartialApplication__31__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__31__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___de292543ed1b402cbbe87ae86caabb95___QsRef1__ColumnAtUnchecked____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___de292543ed1b402cbbe87ae86caabb95___QsRef1__ColumnAtUnchecked____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__19__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__19__RefCount, void (%Tuple*, i32)* @MemoryManagement__19__AliasCount]
@PartialApplication__32__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__32__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___23e0decc63d94dd8b19a5b57b39e10f2___QsRef1__ColumnAtUnchecked____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___23e0decc63d94dd8b19a5b57b39e10f2___QsRef1__ColumnAtUnchecked____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__20__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__20__RefCount, void (%Tuple*, i32)* @MemoryManagement__20__AliasCount]
@41 = internal constant [22 x i8] c"Index is out of bound\00"
@PartialApplication__33__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__33__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___62ca31d0fdf948018a1a74a6d4c67398_ElementAt__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___62ca31d0fdf948018a1a74a6d4c67398_ElementAt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__21__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__21__RefCount, void (%Tuple*, i32)* @MemoryManagement__21__AliasCount]
@PartialApplication__34__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__34__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___569eafce500a433aa6cf29fb05e20e5c_ElementAt__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___569eafce500a433aa6cf29fb05e20e5c_ElementAt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__35__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__35__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Arrays___9fb198328a4543008a10ebf164a18ba2_ElementAt__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Arrays___9fb198328a4543008a10ebf164a18ba2_ElementAt__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@42 = internal constant [39 x i8] c"Array must be of the length at least 1\00"
@43 = internal constant [71 x i8] c"Specified output array length must be longer than `inputArray` length.\00"
@44 = internal constant [27 x i8] c"nElements must be positive\00"
@45 = internal constant [36 x i8] c"Partitioned argument out of bounds.\00"
@46 = internal constant [46 x i8] c"Unitary coupled-cluster PQRS failed: indices \00"
@47 = internal constant [3 x i8] c", \00"
@48 = internal constant [18 x i8] c" must be distinct\00"
@49 = internal constant [44 x i8] c"Unitary coupled-cluster PQ failed: indices \00"
@PartialApplication__36__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__36__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__36__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__36__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__36__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____ctladj__wrapper]
@MemoryManagement__22__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__22__RefCount, void (%Tuple*, i32)* @MemoryManagement__22__AliasCount]
@PartialApplication__37__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__37__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__37__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__37__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__37__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj__wrapper]
@MemoryManagement__23__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__23__RefCount, void (%Tuple*, i32)* @MemoryManagement__23__AliasCount]
@50 = internal constant [86 x i8] c"ComputeJordanWignerString failed. `idxFermions` must contain an even number of terms.\00"
@51 = internal constant [46 x i8] c"ComputeJordanWignerString failed. fermionIdx \00"
@52 = internal constant [15 x i8] c" out of range.\00"
@53 = internal constant [47 x i8] c"Completely invalid cluster operator specified.\00"
@Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorFunction____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorFunction____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__38__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__38__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Chemistry__JordanWigner____QsRef4__JordanWignerStateAsGeneratorIndex____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4__JordanWignerStateAsGeneratorIndex____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__24__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__24__RefCount, void (%Tuple*, i32)* @MemoryManagement__24__AliasCount]
@Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionFunction__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionFunction__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__39__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__39__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__39__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__39__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__39__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctladj__wrapper]
@Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___PrepareSingleConfigurationalStateSingleSiteOccupation____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___PrepareSingleConfigurationalStateSingleSiteOccupation____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__ctladj__wrapper]
@PartialApplication__40__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__40__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__25__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__25__RefCount, void (%Tuple*, i32)* @MemoryManagement__25__AliasCount]
@PartialApplication__41__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__41__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__41__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__41__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__41__ctladj__wrapper]
@MemoryManagement__26__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__26__RefCount, void (%Tuple*, i32)* @MemoryManagement__26__AliasCount]
@PartialApplication__42__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__42__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__42__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__42__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__42__ctladj__wrapper]
@PartialApplication__43__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__43__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Chemistry__HTermsToGenIdx__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Chemistry__HTermsToGenIdx__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__27__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__27__RefCount, void (%Tuple*, i32)* @MemoryManagement__27__AliasCount]
@PartialApplication__44__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__44__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__44__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__44__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__44__ctladj__wrapper]
@Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctladj__wrapper]
@MemoryManagement__28__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__28__RefCount, void (%Tuple*, i32)* @MemoryManagement__28__AliasCount]
@PartialApplication__45__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__45__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__45__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__45__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__45__ctladj__wrapper]
@PartialApplication__46__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__46__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__46__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__46__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__46__ctladj__wrapper]
@Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctladj__wrapper]
@MemoryManagement__29__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__29__RefCount, void (%Tuple*, i32)* @MemoryManagement__29__AliasCount]
@PartialApplication__47__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__47__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__47__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__47__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__47__ctladj__wrapper]
@Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctladj__wrapper]
@MemoryManagement__30__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__30__RefCount, void (%Tuple*, i32)* @MemoryManagement__30__AliasCount]
@PartialApplication__48__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__48__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Math__ComplexPolar__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Math__ComplexPolar__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__31__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__31__RefCount, void (%Tuple*, i32)* @MemoryManagement__31__AliasCount]
@Microsoft__Quantum__Math__AbsD__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Math__AbsD__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__49__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__49__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__50__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__50__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__51__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__51__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__52__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__52__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Simulation____QsRef1___AddGeneratorSystems____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef1___AddGeneratorSystems____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@MemoryManagement__32__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__32__RefCount, void (%Tuple*, i32)* @MemoryManagement__32__AliasCount]
@Microsoft__Quantum__Simulation__IdentityGeneratorIndex__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__IdentityGeneratorIndex__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@Microsoft__Quantum__Simulation__AddGeneratorSystems__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation__AddGeneratorSystems__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null, void (%Tuple*, %Tuple*, %Tuple*)* null]
@PartialApplication__53__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__53__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__53__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__53__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__53__ctladj__wrapper]
@Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____ctladj__wrapper]
@MemoryManagement__33__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__33__RefCount, void (%Tuple*, i32)* @MemoryManagement__33__AliasCount]
@PartialApplication__54__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__54__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__54__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__54__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__54__ctladj__wrapper]
@Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____ctladj__wrapper]
@MemoryManagement__34__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__34__RefCount, void (%Tuple*, i32)* @MemoryManagement__34__AliasCount]
@PartialApplication__55__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__55__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__55__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__55__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__55__ctladj__wrapper]
@MemoryManagement__35__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__35__RefCount, void (%Tuple*, i32)* @MemoryManagement__35__AliasCount]
@PartialApplication__56__FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__56__body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__56__adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__56__ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Lifted__PartialApplication__56__ctladj__wrapper]
@Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____FunctionTable = internal constant [4 x void (%Tuple*, %Tuple*, %Tuple*)*] [void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____body__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____adj__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____ctl__wrapper, void (%Tuple*, %Tuple*, %Tuple*)* @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____ctladj__wrapper]
@MemoryManagement__36__FunctionTable = internal constant [2 x void (%Tuple*, i32)*] [void (%Tuple*, i32)* @MemoryManagement__36__RefCount, void (%Tuple*, i32)* @MemoryManagement__36__AliasCount]

define internal double @Microsoft__PnnlCollaboration__EstimateEnergyFromFlattenedJWData__body(i64 %nQubits, i64 %nZTerms, %Array* %zTermIdxs, %Array* %zCoeffs, i64 %nZzTerms, %Array* %zzTermIdxs, %Array* %zzCoeffs, %Array* %nPqAndPqqrTerms, %Array* %pqAndPqqrTermIdxs, %Array* %pqAndPqqrCoeffs, i64 %nH0123Terms, %Array* %h0123TermIdxs, %Array* %h0123Coeffs, i64 %stateType, %Array* %realStateCoeffs, %Array* %imagStateCoeffs, %Array* %nStateTermIdxs, %Array* %stateTermIdxs, double %energyOffset, i64 %nBitsPrecision, double %trotterStepSize, i64 %trotterOrder) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %zTermIdxs, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %zCoeffs, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %zzTermIdxs, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %zzCoeffs, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %nPqAndPqqrTerms, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pqAndPqqrTermIdxs, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pqAndPqqrCoeffs, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123TermIdxs, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Coeffs, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %realStateCoeffs, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %imagStateCoeffs, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %nStateTermIdxs, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %stateTermIdxs, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__HTerm__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Array* @Microsoft__PnnlCollaboration___2d4f1415284b49129ecda2cd4e6ba4f6_Unpacked__body(i64 %nZTerms, %Array* %zTermIdxs)
  %2 = call %Array* @Microsoft__PnnlCollaboration___901736e8b977437095e9978ad09c39ea_Unpacked__body(i64 %nZTerms, %Array* %zCoeffs)
  %3 = call %Array* @Microsoft__Quantum__Arrays___01116e73a43749b499ae926f40d6a6ce_Zipped__body(%Array* %1, %Array* %2)
  %zTerms = call %Array* @Microsoft__Quantum__Arrays___fc79bca9230c48fa8f53e243a9ae19af_Mapped__body(%Callable* %0, %Array* %3)
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %zTerms)
  %5 = sub i64 %4, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %6 = phi i64 [ 0, %entry ], [ %16, %exiting__1 ]
  %7 = icmp sle i64 %6, %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %zTerms, i64 %6)
  %9 = bitcast i8* %8 to { %Array*, %Array* }**
  %10 = load { %Array*, %Array* }*, { %Array*, %Array* }** %9, align 8
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %10, i32 0, i32 0
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %10, i32 0, i32 1
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %15 = bitcast { %Array*, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %16 = add i64 %6, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %zTerms, i32 1)
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__HTerm__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %18 = call i1 @Microsoft__Quantum__Arrays___c5a61063f3424fd0bb3b96e2a30fdd27_IsEmpty__body(%Array* %zzTermIdxs)
  br i1 %18, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__1
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__1
  %20 = call %Array* @Microsoft__Quantum__Arrays___6680986d56214bd9b831ad84094b0209_Chunks__body(i64 2, %Array* %zzTermIdxs)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %21 = phi %Array* [ %19, %condTrue__1 ], [ %20, %condFalse__1 ]
  %22 = call %Array* @Microsoft__PnnlCollaboration___901736e8b977437095e9978ad09c39ea_Unpacked__body(i64 %nZzTerms, %Array* %zzCoeffs)
  %23 = call %Array* @Microsoft__Quantum__Arrays___01116e73a43749b499ae926f40d6a6ce_Zipped__body(%Array* %21, %Array* %22)
  %zzTerms = call %Array* @Microsoft__Quantum__Arrays___fc79bca9230c48fa8f53e243a9ae19af_Mapped__body(%Callable* %17, %Array* %23)
  %24 = call i64 @__quantum__rt__array_get_size_1d(%Array* %zzTerms)
  %25 = sub i64 %24, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %condContinue__1
  %26 = phi i64 [ 0, %condContinue__1 ], [ %36, %exiting__2 ]
  %27 = icmp sle i64 %26, %25
  br i1 %27, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %zzTerms, i64 %26)
  %29 = bitcast i8* %28 to { %Array*, %Array* }**
  %30 = load { %Array*, %Array* }*, { %Array*, %Array* }** %29, align 8
  %31 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %30, i32 0, i32 0
  %32 = load %Array*, %Array** %31, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  %33 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %30, i32 0, i32 1
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 1)
  %35 = bitcast { %Array*, %Array* }* %30 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %26, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %zzTerms, i32 1)
  %37 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %37)
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__HTerm__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %39 = call %Array* @Microsoft__PnnlCollaboration___3fda5f00eea8496f9f7711c9f0495747_UnpackedJagged__body(%Array* %nPqAndPqqrTerms, %Array* %pqAndPqqrTermIdxs)
  %40 = call i64 @__quantum__rt__array_get_size_1d(%Array* %pqAndPqqrCoeffs)
  %41 = call %Array* @Microsoft__PnnlCollaboration___901736e8b977437095e9978ad09c39ea_Unpacked__body(i64 %40, %Array* %pqAndPqqrCoeffs)
  %42 = call %Array* @Microsoft__Quantum__Arrays___01116e73a43749b499ae926f40d6a6ce_Zipped__body(%Array* %39, %Array* %41)
  %pqAndPqqrTerms = call %Array* @Microsoft__Quantum__Arrays___fc79bca9230c48fa8f53e243a9ae19af_Mapped__body(%Callable* %38, %Array* %42)
  %43 = call i64 @__quantum__rt__array_get_size_1d(%Array* %pqAndPqqrTerms)
  %44 = sub i64 %43, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %45 = phi i64 [ 0, %exit__2 ], [ %55, %exiting__3 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pqAndPqqrTerms, i64 %45)
  %48 = bitcast i8* %47 to { %Array*, %Array* }**
  %49 = load { %Array*, %Array* }*, { %Array*, %Array* }** %48, align 8
  %50 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %49, i32 0, i32 0
  %51 = load %Array*, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 1)
  %52 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %49, i32 0, i32 1
  %53 = load %Array*, %Array** %52, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i32 1)
  %54 = bitcast { %Array*, %Array* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %55 = add i64 %45, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %pqAndPqqrTerms, i32 1)
  %56 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %56)
  %57 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__HTerm__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %58 = call %Array* @Microsoft__Quantum__Arrays___6680986d56214bd9b831ad84094b0209_Chunks__body(i64 4, %Array* %h0123TermIdxs)
  %59 = call %Array* @Microsoft__Quantum__Arrays___1ff35f497f5143cdacacd1d6404d45ce_Chunks__body(i64 4, %Array* %h0123Coeffs)
  %60 = call %Array* @Microsoft__Quantum__Arrays___01116e73a43749b499ae926f40d6a6ce_Zipped__body(%Array* %58, %Array* %59)
  %h0123Terms = call %Array* @Microsoft__Quantum__Arrays___fc79bca9230c48fa8f53e243a9ae19af_Mapped__body(%Callable* %57, %Array* %60)
  %61 = call i64 @__quantum__rt__array_get_size_1d(%Array* %h0123Terms)
  %62 = sub i64 %61, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %63 = phi i64 [ 0, %exit__3 ], [ %73, %exiting__4 ]
  %64 = icmp sle i64 %63, %62
  br i1 %64, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Terms, i64 %63)
  %66 = bitcast i8* %65 to { %Array*, %Array* }**
  %67 = load { %Array*, %Array* }*, { %Array*, %Array* }** %66, align 8
  %68 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %67, i32 0, i32 0
  %69 = load %Array*, %Array** %68, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 1)
  %70 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %67, i32 0, i32 1
  %71 = load %Array*, %Array** %70, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %71, i32 1)
  %72 = bitcast { %Array*, %Array* }* %67 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %72, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %73 = add i64 %63, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Terms, i32 1)
  %74 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %74)
  %terms = call { %Array*, %Array*, %Array*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JWOptimizedHTerms__body(%Array* %zTerms, %Array* %zzTerms, %Array* %pqAndPqqrTerms, %Array* %h0123Terms)
  %75 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %terms, i32 0, i32 0
  %76 = load %Array*, %Array** %75, align 8
  %77 = call i64 @__quantum__rt__array_get_size_1d(%Array* %76)
  %78 = sub i64 %77, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %79 = phi i64 [ 0, %exit__4 ], [ %89, %exiting__5 ]
  %80 = icmp sle i64 %79, %78
  br i1 %80, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 %79)
  %82 = bitcast i8* %81 to { %Array*, %Array* }**
  %83 = load { %Array*, %Array* }*, { %Array*, %Array* }** %82, align 8
  %84 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %83, i32 0, i32 0
  %85 = load %Array*, %Array** %84, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %85, i32 1)
  %86 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %83, i32 0, i32 1
  %87 = load %Array*, %Array** %86, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %87, i32 1)
  %88 = bitcast { %Array*, %Array* }* %83 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %88, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %89 = add i64 %79, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %90 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %terms, i32 0, i32 1
  %91 = load %Array*, %Array** %90, align 8
  %92 = call i64 @__quantum__rt__array_get_size_1d(%Array* %91)
  %93 = sub i64 %92, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %94 = phi i64 [ 0, %exit__5 ], [ %104, %exiting__6 ]
  %95 = icmp sle i64 %94, %93
  br i1 %95, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 %94)
  %97 = bitcast i8* %96 to { %Array*, %Array* }**
  %98 = load { %Array*, %Array* }*, { %Array*, %Array* }** %97, align 8
  %99 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %98, i32 0, i32 0
  %100 = load %Array*, %Array** %99, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 1)
  %101 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %98, i32 0, i32 1
  %102 = load %Array*, %Array** %101, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %102, i32 1)
  %103 = bitcast { %Array*, %Array* }* %98 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %103, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %104 = add i64 %94, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %91, i32 1)
  %105 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %terms, i32 0, i32 2
  %106 = load %Array*, %Array** %105, align 8
  %107 = call i64 @__quantum__rt__array_get_size_1d(%Array* %106)
  %108 = sub i64 %107, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %109 = phi i64 [ 0, %exit__6 ], [ %119, %exiting__7 ]
  %110 = icmp sle i64 %109, %108
  br i1 %110, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 %109)
  %112 = bitcast i8* %111 to { %Array*, %Array* }**
  %113 = load { %Array*, %Array* }*, { %Array*, %Array* }** %112, align 8
  %114 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %113, i32 0, i32 0
  %115 = load %Array*, %Array** %114, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %115, i32 1)
  %116 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %113, i32 0, i32 1
  %117 = load %Array*, %Array** %116, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %117, i32 1)
  %118 = bitcast { %Array*, %Array* }* %113 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %118, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %119 = add i64 %109, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %106, i32 1)
  %120 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %terms, i32 0, i32 3
  %121 = load %Array*, %Array** %120, align 8
  %122 = call i64 @__quantum__rt__array_get_size_1d(%Array* %121)
  %123 = sub i64 %122, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %124 = phi i64 [ 0, %exit__7 ], [ %134, %exiting__8 ]
  %125 = icmp sle i64 %124, %123
  br i1 %125, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %126 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 %124)
  %127 = bitcast i8* %126 to { %Array*, %Array* }**
  %128 = load { %Array*, %Array* }*, { %Array*, %Array* }** %127, align 8
  %129 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %128, i32 0, i32 0
  %130 = load %Array*, %Array** %129, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %130, i32 1)
  %131 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %128, i32 0, i32 1
  %132 = load %Array*, %Array** %131, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %132, i32 1)
  %133 = bitcast { %Array*, %Array* }* %128 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %133, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %134 = add i64 %124, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %121, i32 1)
  %135 = bitcast { %Array*, %Array*, %Array*, %Array* }* %terms to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %135, i32 1)
  %136 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %136)
  %stateCoeffs = call %Array* @Microsoft__Quantum__Arrays___61b0bf144810407c8874097a490e18b8_Zipped__body(%Array* %realStateCoeffs, %Array* %imagStateCoeffs)
  %137 = call i64 @__quantum__rt__array_get_size_1d(%Array* %stateCoeffs)
  %138 = sub i64 %137, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %139 = phi i64 [ 0, %exit__8 ], [ %145, %exiting__9 ]
  %140 = icmp sle i64 %139, %138
  br i1 %140, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %stateCoeffs, i64 %139)
  %142 = bitcast i8* %141 to { double, double }**
  %143 = load { double, double }*, { double, double }** %142, align 8
  %144 = bitcast { double, double }* %143 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %144, i32 1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %145 = add i64 %139, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %stateCoeffs, i32 1)
  %146 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %146)
  %147 = call %Array* @Microsoft__PnnlCollaboration___3fda5f00eea8496f9f7711c9f0495747_UnpackedJagged__body(%Array* %nStateTermIdxs, %Array* %stateTermIdxs)
  %stateTerms = call %Array* @Microsoft__Quantum__Arrays___48225aed10f34ba69f96daeaaec298eb_Zipped__body(%Array* %stateCoeffs, %Array* %147)
  %148 = call i64 @__quantum__rt__array_get_size_1d(%Array* %stateTerms)
  %149 = sub i64 %148, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %150 = phi i64 [ 0, %exit__9 ], [ %161, %exiting__10 ]
  %151 = icmp sle i64 %150, %149
  br i1 %151, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %152 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %stateTerms, i64 %150)
  %153 = bitcast i8* %152 to { { double, double }*, %Array* }**
  %154 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %153, align 8
  %155 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %154, i32 0, i32 0
  %156 = load { double, double }*, { double, double }** %155, align 8
  %157 = bitcast { double, double }* %156 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %157, i32 1)
  %158 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %154, i32 0, i32 1
  %159 = load %Array*, %Array** %158, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %159, i32 1)
  %160 = bitcast { { double, double }*, %Array* }* %154 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %160, i32 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %161 = add i64 %150, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %stateTerms, i32 1)
  %162 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %162)
  %163 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %inputState = bitcast %Tuple* %163 to { i64, %Array* }*
  %164 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %inputState, i32 0, i32 0
  %165 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %inputState, i32 0, i32 1
  %166 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %167 = call %Array* @Microsoft__Quantum__Arrays___fecc6b109c8843e082edf674e537ccec_Mapped__body(%Callable* %166, %Array* %stateTerms)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %166, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %166, i32 -1)
  store i64 %stateType, i64* %164, align 4
  store %Array* %167, %Array** %165, align 8
  %168 = call i64 @__quantum__rt__array_get_size_1d(%Array* %167)
  %169 = sub i64 %168, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %170 = phi i64 [ 0, %exit__10 ], [ %181, %exiting__11 ]
  %171 = icmp sle i64 %170, %169
  br i1 %171, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %172 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %167, i64 %170)
  %173 = bitcast i8* %172 to { { double, double }*, %Array* }**
  %174 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %173, align 8
  %175 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %174, i32 0, i32 0
  %176 = load { double, double }*, { double, double }** %175, align 8
  %177 = bitcast { double, double }* %176 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %177, i32 1)
  %178 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %174, i32 0, i32 1
  %179 = load %Array*, %Array** %178, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %179, i32 1)
  %180 = bitcast { { double, double }*, %Array* }* %174 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %180, i32 1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %181 = add i64 %170, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %167, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %163, i32 1)
  %182 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %182)
  %jwEncodedData = call { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerEncodingData__body(i64 %nQubits, { %Array*, %Array*, %Array*, %Array* }* %terms, { i64, %Array* }* %inputState, double %energyOffset)
  %183 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %jwEncodedData, i32 0, i32 1
  %184 = load { %Array*, %Array*, %Array*, %Array* }*, { %Array*, %Array*, %Array*, %Array* }** %183, align 8
  %185 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %184, i32 0, i32 0
  %186 = load %Array*, %Array** %185, align 8
  %187 = call i64 @__quantum__rt__array_get_size_1d(%Array* %186)
  %188 = sub i64 %187, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %189 = phi i64 [ 0, %exit__11 ], [ %199, %exiting__12 ]
  %190 = icmp sle i64 %189, %188
  br i1 %190, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %191 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %186, i64 %189)
  %192 = bitcast i8* %191 to { %Array*, %Array* }**
  %193 = load { %Array*, %Array* }*, { %Array*, %Array* }** %192, align 8
  %194 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %193, i32 0, i32 0
  %195 = load %Array*, %Array** %194, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %195, i32 1)
  %196 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %193, i32 0, i32 1
  %197 = load %Array*, %Array** %196, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %197, i32 1)
  %198 = bitcast { %Array*, %Array* }* %193 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %198, i32 1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %199 = add i64 %189, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %186, i32 1)
  %200 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %184, i32 0, i32 1
  %201 = load %Array*, %Array** %200, align 8
  %202 = call i64 @__quantum__rt__array_get_size_1d(%Array* %201)
  %203 = sub i64 %202, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %204 = phi i64 [ 0, %exit__12 ], [ %214, %exiting__13 ]
  %205 = icmp sle i64 %204, %203
  br i1 %205, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %206 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %201, i64 %204)
  %207 = bitcast i8* %206 to { %Array*, %Array* }**
  %208 = load { %Array*, %Array* }*, { %Array*, %Array* }** %207, align 8
  %209 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %208, i32 0, i32 0
  %210 = load %Array*, %Array** %209, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %210, i32 1)
  %211 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %208, i32 0, i32 1
  %212 = load %Array*, %Array** %211, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %212, i32 1)
  %213 = bitcast { %Array*, %Array* }* %208 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %213, i32 1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %214 = add i64 %204, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %201, i32 1)
  %215 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %184, i32 0, i32 2
  %216 = load %Array*, %Array** %215, align 8
  %217 = call i64 @__quantum__rt__array_get_size_1d(%Array* %216)
  %218 = sub i64 %217, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %219 = phi i64 [ 0, %exit__13 ], [ %229, %exiting__14 ]
  %220 = icmp sle i64 %219, %218
  br i1 %220, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %221 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %216, i64 %219)
  %222 = bitcast i8* %221 to { %Array*, %Array* }**
  %223 = load { %Array*, %Array* }*, { %Array*, %Array* }** %222, align 8
  %224 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %223, i32 0, i32 0
  %225 = load %Array*, %Array** %224, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %225, i32 1)
  %226 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %223, i32 0, i32 1
  %227 = load %Array*, %Array** %226, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %227, i32 1)
  %228 = bitcast { %Array*, %Array* }* %223 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %228, i32 1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %229 = add i64 %219, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %216, i32 1)
  %230 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %184, i32 0, i32 3
  %231 = load %Array*, %Array** %230, align 8
  %232 = call i64 @__quantum__rt__array_get_size_1d(%Array* %231)
  %233 = sub i64 %232, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %234 = phi i64 [ 0, %exit__14 ], [ %244, %exiting__15 ]
  %235 = icmp sle i64 %234, %233
  br i1 %235, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %236 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %231, i64 %234)
  %237 = bitcast i8* %236 to { %Array*, %Array* }**
  %238 = load { %Array*, %Array* }*, { %Array*, %Array* }** %237, align 8
  %239 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %238, i32 0, i32 0
  %240 = load %Array*, %Array** %239, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %240, i32 1)
  %241 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %238, i32 0, i32 1
  %242 = load %Array*, %Array** %241, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %242, i32 1)
  %243 = bitcast { %Array*, %Array* }* %238 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %243, i32 1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %244 = add i64 %234, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_alias_count(%Array* %231, i32 1)
  %245 = bitcast { %Array*, %Array*, %Array*, %Array* }* %184 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %245, i32 1)
  %246 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %jwEncodedData, i32 0, i32 2
  %247 = load { i64, %Array* }*, { i64, %Array* }** %246, align 8
  %248 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %247, i32 0, i32 1
  %249 = load %Array*, %Array** %248, align 8
  %250 = call i64 @__quantum__rt__array_get_size_1d(%Array* %249)
  %251 = sub i64 %250, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %252 = phi i64 [ 0, %exit__15 ], [ %263, %exiting__16 ]
  %253 = icmp sle i64 %252, %251
  br i1 %253, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %254 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %249, i64 %252)
  %255 = bitcast i8* %254 to { { double, double }*, %Array* }**
  %256 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %255, align 8
  %257 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %256, i32 0, i32 0
  %258 = load { double, double }*, { double, double }** %257, align 8
  %259 = bitcast { double, double }* %258 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %259, i32 1)
  %260 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %256, i32 0, i32 1
  %261 = load %Array*, %Array** %260, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %261, i32 1)
  %262 = bitcast { { double, double }*, %Array* }* %256 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %262, i32 1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %263 = add i64 %252, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %249, i32 1)
  %264 = bitcast { i64, %Array* }* %247 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %264, i32 1)
  %265 = bitcast { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %jwEncodedData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %265, i32 1)
  %266 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %266)
  %267 = call double @Microsoft__PnnlCollaboration__EstimateEnergyFromJWData__body({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %jwEncodedData, i64 %nBitsPrecision, double %trotterStepSize, i64 %trotterOrder)
  call void @__quantum__rt__array_update_alias_count(%Array* %zTermIdxs, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %zCoeffs, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %zzTermIdxs, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %zzCoeffs, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %nPqAndPqqrTerms, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pqAndPqqrTermIdxs, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pqAndPqqrCoeffs, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123TermIdxs, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Coeffs, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %realStateCoeffs, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %imagStateCoeffs, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %nStateTermIdxs, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %stateTermIdxs, i32 -1)
  %268 = sub i64 %4, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %269 = phi i64 [ 0, %exit__16 ], [ %279, %exiting__17 ]
  %270 = icmp sle i64 %269, %268
  br i1 %270, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %271 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %zTerms, i64 %269)
  %272 = bitcast i8* %271 to { %Array*, %Array* }**
  %273 = load { %Array*, %Array* }*, { %Array*, %Array* }** %272, align 8
  %274 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %273, i32 0, i32 0
  %275 = load %Array*, %Array** %274, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %275, i32 -1)
  %276 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %273, i32 0, i32 1
  %277 = load %Array*, %Array** %276, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %277, i32 -1)
  %278 = bitcast { %Array*, %Array* }* %273 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %278, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %279 = add i64 %269, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %zTerms, i32 -1)
  %280 = sub i64 %24, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %281 = phi i64 [ 0, %exit__17 ], [ %291, %exiting__18 ]
  %282 = icmp sle i64 %281, %280
  br i1 %282, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %283 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %zzTerms, i64 %281)
  %284 = bitcast i8* %283 to { %Array*, %Array* }**
  %285 = load { %Array*, %Array* }*, { %Array*, %Array* }** %284, align 8
  %286 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %285, i32 0, i32 0
  %287 = load %Array*, %Array** %286, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %287, i32 -1)
  %288 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %285, i32 0, i32 1
  %289 = load %Array*, %Array** %288, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %289, i32 -1)
  %290 = bitcast { %Array*, %Array* }* %285 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %290, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %291 = add i64 %281, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_alias_count(%Array* %zzTerms, i32 -1)
  %292 = sub i64 %43, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %293 = phi i64 [ 0, %exit__18 ], [ %303, %exiting__19 ]
  %294 = icmp sle i64 %293, %292
  br i1 %294, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %295 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pqAndPqqrTerms, i64 %293)
  %296 = bitcast i8* %295 to { %Array*, %Array* }**
  %297 = load { %Array*, %Array* }*, { %Array*, %Array* }** %296, align 8
  %298 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %297, i32 0, i32 0
  %299 = load %Array*, %Array** %298, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %299, i32 -1)
  %300 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %297, i32 0, i32 1
  %301 = load %Array*, %Array** %300, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %301, i32 -1)
  %302 = bitcast { %Array*, %Array* }* %297 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %302, i32 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %303 = add i64 %293, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_alias_count(%Array* %pqAndPqqrTerms, i32 -1)
  %304 = sub i64 %61, 1
  br label %header__20

header__20:                                       ; preds = %exiting__20, %exit__19
  %305 = phi i64 [ 0, %exit__19 ], [ %315, %exiting__20 ]
  %306 = icmp sle i64 %305, %304
  br i1 %306, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %307 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Terms, i64 %305)
  %308 = bitcast i8* %307 to { %Array*, %Array* }**
  %309 = load { %Array*, %Array* }*, { %Array*, %Array* }** %308, align 8
  %310 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %309, i32 0, i32 0
  %311 = load %Array*, %Array** %310, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %311, i32 -1)
  %312 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %309, i32 0, i32 1
  %313 = load %Array*, %Array** %312, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %313, i32 -1)
  %314 = bitcast { %Array*, %Array* }* %309 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %314, i32 -1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %315 = add i64 %305, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Terms, i32 -1)
  %316 = sub i64 %77, 1
  br label %header__21

header__21:                                       ; preds = %exiting__21, %exit__20
  %317 = phi i64 [ 0, %exit__20 ], [ %327, %exiting__21 ]
  %318 = icmp sle i64 %317, %316
  br i1 %318, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %319 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 %317)
  %320 = bitcast i8* %319 to { %Array*, %Array* }**
  %321 = load { %Array*, %Array* }*, { %Array*, %Array* }** %320, align 8
  %322 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %321, i32 0, i32 0
  %323 = load %Array*, %Array** %322, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %323, i32 -1)
  %324 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %321, i32 0, i32 1
  %325 = load %Array*, %Array** %324, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %325, i32 -1)
  %326 = bitcast { %Array*, %Array* }* %321 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %326, i32 -1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %327 = add i64 %317, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 -1)
  %328 = sub i64 %92, 1
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %329 = phi i64 [ 0, %exit__21 ], [ %339, %exiting__22 ]
  %330 = icmp sle i64 %329, %328
  br i1 %330, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %331 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 %329)
  %332 = bitcast i8* %331 to { %Array*, %Array* }**
  %333 = load { %Array*, %Array* }*, { %Array*, %Array* }** %332, align 8
  %334 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %333, i32 0, i32 0
  %335 = load %Array*, %Array** %334, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %335, i32 -1)
  %336 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %333, i32 0, i32 1
  %337 = load %Array*, %Array** %336, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %337, i32 -1)
  %338 = bitcast { %Array*, %Array* }* %333 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %338, i32 -1)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %339 = add i64 %329, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_update_alias_count(%Array* %91, i32 -1)
  %340 = sub i64 %107, 1
  br label %header__23

header__23:                                       ; preds = %exiting__23, %exit__22
  %341 = phi i64 [ 0, %exit__22 ], [ %351, %exiting__23 ]
  %342 = icmp sle i64 %341, %340
  br i1 %342, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %343 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 %341)
  %344 = bitcast i8* %343 to { %Array*, %Array* }**
  %345 = load { %Array*, %Array* }*, { %Array*, %Array* }** %344, align 8
  %346 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %345, i32 0, i32 0
  %347 = load %Array*, %Array** %346, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %347, i32 -1)
  %348 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %345, i32 0, i32 1
  %349 = load %Array*, %Array** %348, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %349, i32 -1)
  %350 = bitcast { %Array*, %Array* }* %345 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %350, i32 -1)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %351 = add i64 %341, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_update_alias_count(%Array* %106, i32 -1)
  %352 = sub i64 %122, 1
  br label %header__24

header__24:                                       ; preds = %exiting__24, %exit__23
  %353 = phi i64 [ 0, %exit__23 ], [ %363, %exiting__24 ]
  %354 = icmp sle i64 %353, %352
  br i1 %354, label %body__24, label %exit__24

body__24:                                         ; preds = %header__24
  %355 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 %353)
  %356 = bitcast i8* %355 to { %Array*, %Array* }**
  %357 = load { %Array*, %Array* }*, { %Array*, %Array* }** %356, align 8
  %358 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %357, i32 0, i32 0
  %359 = load %Array*, %Array** %358, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %359, i32 -1)
  %360 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %357, i32 0, i32 1
  %361 = load %Array*, %Array** %360, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %361, i32 -1)
  %362 = bitcast { %Array*, %Array* }* %357 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %362, i32 -1)
  br label %exiting__24

exiting__24:                                      ; preds = %body__24
  %363 = add i64 %353, 1
  br label %header__24

exit__24:                                         ; preds = %header__24
  call void @__quantum__rt__array_update_alias_count(%Array* %121, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %135, i32 -1)
  %364 = sub i64 %137, 1
  br label %header__25

header__25:                                       ; preds = %exiting__25, %exit__24
  %365 = phi i64 [ 0, %exit__24 ], [ %371, %exiting__25 ]
  %366 = icmp sle i64 %365, %364
  br i1 %366, label %body__25, label %exit__25

body__25:                                         ; preds = %header__25
  %367 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %stateCoeffs, i64 %365)
  %368 = bitcast i8* %367 to { double, double }**
  %369 = load { double, double }*, { double, double }** %368, align 8
  %370 = bitcast { double, double }* %369 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %370, i32 -1)
  br label %exiting__25

exiting__25:                                      ; preds = %body__25
  %371 = add i64 %365, 1
  br label %header__25

exit__25:                                         ; preds = %header__25
  call void @__quantum__rt__array_update_alias_count(%Array* %stateCoeffs, i32 -1)
  %372 = sub i64 %148, 1
  br label %header__26

header__26:                                       ; preds = %exiting__26, %exit__25
  %373 = phi i64 [ 0, %exit__25 ], [ %384, %exiting__26 ]
  %374 = icmp sle i64 %373, %372
  br i1 %374, label %body__26, label %exit__26

body__26:                                         ; preds = %header__26
  %375 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %stateTerms, i64 %373)
  %376 = bitcast i8* %375 to { { double, double }*, %Array* }**
  %377 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %376, align 8
  %378 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %377, i32 0, i32 0
  %379 = load { double, double }*, { double, double }** %378, align 8
  %380 = bitcast { double, double }* %379 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %380, i32 -1)
  %381 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %377, i32 0, i32 1
  %382 = load %Array*, %Array** %381, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %382, i32 -1)
  %383 = bitcast { { double, double }*, %Array* }* %377 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %383, i32 -1)
  br label %exiting__26

exiting__26:                                      ; preds = %body__26
  %384 = add i64 %373, 1
  br label %header__26

exit__26:                                         ; preds = %header__26
  call void @__quantum__rt__array_update_alias_count(%Array* %stateTerms, i32 -1)
  %385 = sub i64 %168, 1
  br label %header__27

header__27:                                       ; preds = %exiting__27, %exit__26
  %386 = phi i64 [ 0, %exit__26 ], [ %397, %exiting__27 ]
  %387 = icmp sle i64 %386, %385
  br i1 %387, label %body__27, label %exit__27

body__27:                                         ; preds = %header__27
  %388 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %167, i64 %386)
  %389 = bitcast i8* %388 to { { double, double }*, %Array* }**
  %390 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %389, align 8
  %391 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %390, i32 0, i32 0
  %392 = load { double, double }*, { double, double }** %391, align 8
  %393 = bitcast { double, double }* %392 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %393, i32 -1)
  %394 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %390, i32 0, i32 1
  %395 = load %Array*, %Array** %394, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %395, i32 -1)
  %396 = bitcast { { double, double }*, %Array* }* %390 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %396, i32 -1)
  br label %exiting__27

exiting__27:                                      ; preds = %body__27
  %397 = add i64 %386, 1
  br label %header__27

exit__27:                                         ; preds = %header__27
  call void @__quantum__rt__array_update_alias_count(%Array* %167, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %163, i32 -1)
  %398 = sub i64 %187, 1
  br label %header__28

header__28:                                       ; preds = %exiting__28, %exit__27
  %399 = phi i64 [ 0, %exit__27 ], [ %409, %exiting__28 ]
  %400 = icmp sle i64 %399, %398
  br i1 %400, label %body__28, label %exit__28

body__28:                                         ; preds = %header__28
  %401 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %186, i64 %399)
  %402 = bitcast i8* %401 to { %Array*, %Array* }**
  %403 = load { %Array*, %Array* }*, { %Array*, %Array* }** %402, align 8
  %404 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %403, i32 0, i32 0
  %405 = load %Array*, %Array** %404, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %405, i32 -1)
  %406 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %403, i32 0, i32 1
  %407 = load %Array*, %Array** %406, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %407, i32 -1)
  %408 = bitcast { %Array*, %Array* }* %403 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %408, i32 -1)
  br label %exiting__28

exiting__28:                                      ; preds = %body__28
  %409 = add i64 %399, 1
  br label %header__28

exit__28:                                         ; preds = %header__28
  call void @__quantum__rt__array_update_alias_count(%Array* %186, i32 -1)
  %410 = sub i64 %202, 1
  br label %header__29

header__29:                                       ; preds = %exiting__29, %exit__28
  %411 = phi i64 [ 0, %exit__28 ], [ %421, %exiting__29 ]
  %412 = icmp sle i64 %411, %410
  br i1 %412, label %body__29, label %exit__29

body__29:                                         ; preds = %header__29
  %413 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %201, i64 %411)
  %414 = bitcast i8* %413 to { %Array*, %Array* }**
  %415 = load { %Array*, %Array* }*, { %Array*, %Array* }** %414, align 8
  %416 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %415, i32 0, i32 0
  %417 = load %Array*, %Array** %416, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %417, i32 -1)
  %418 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %415, i32 0, i32 1
  %419 = load %Array*, %Array** %418, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %419, i32 -1)
  %420 = bitcast { %Array*, %Array* }* %415 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %420, i32 -1)
  br label %exiting__29

exiting__29:                                      ; preds = %body__29
  %421 = add i64 %411, 1
  br label %header__29

exit__29:                                         ; preds = %header__29
  call void @__quantum__rt__array_update_alias_count(%Array* %201, i32 -1)
  %422 = sub i64 %217, 1
  br label %header__30

header__30:                                       ; preds = %exiting__30, %exit__29
  %423 = phi i64 [ 0, %exit__29 ], [ %433, %exiting__30 ]
  %424 = icmp sle i64 %423, %422
  br i1 %424, label %body__30, label %exit__30

body__30:                                         ; preds = %header__30
  %425 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %216, i64 %423)
  %426 = bitcast i8* %425 to { %Array*, %Array* }**
  %427 = load { %Array*, %Array* }*, { %Array*, %Array* }** %426, align 8
  %428 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %427, i32 0, i32 0
  %429 = load %Array*, %Array** %428, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %429, i32 -1)
  %430 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %427, i32 0, i32 1
  %431 = load %Array*, %Array** %430, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %431, i32 -1)
  %432 = bitcast { %Array*, %Array* }* %427 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %432, i32 -1)
  br label %exiting__30

exiting__30:                                      ; preds = %body__30
  %433 = add i64 %423, 1
  br label %header__30

exit__30:                                         ; preds = %header__30
  call void @__quantum__rt__array_update_alias_count(%Array* %216, i32 -1)
  %434 = sub i64 %232, 1
  br label %header__31

header__31:                                       ; preds = %exiting__31, %exit__30
  %435 = phi i64 [ 0, %exit__30 ], [ %445, %exiting__31 ]
  %436 = icmp sle i64 %435, %434
  br i1 %436, label %body__31, label %exit__31

body__31:                                         ; preds = %header__31
  %437 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %231, i64 %435)
  %438 = bitcast i8* %437 to { %Array*, %Array* }**
  %439 = load { %Array*, %Array* }*, { %Array*, %Array* }** %438, align 8
  %440 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %439, i32 0, i32 0
  %441 = load %Array*, %Array** %440, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %441, i32 -1)
  %442 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %439, i32 0, i32 1
  %443 = load %Array*, %Array** %442, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %443, i32 -1)
  %444 = bitcast { %Array*, %Array* }* %439 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %444, i32 -1)
  br label %exiting__31

exiting__31:                                      ; preds = %body__31
  %445 = add i64 %435, 1
  br label %header__31

exit__31:                                         ; preds = %header__31
  call void @__quantum__rt__array_update_alias_count(%Array* %231, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %245, i32 -1)
  %446 = sub i64 %250, 1
  br label %header__32

header__32:                                       ; preds = %exiting__32, %exit__31
  %447 = phi i64 [ 0, %exit__31 ], [ %458, %exiting__32 ]
  %448 = icmp sle i64 %447, %446
  br i1 %448, label %body__32, label %exit__32

body__32:                                         ; preds = %header__32
  %449 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %249, i64 %447)
  %450 = bitcast i8* %449 to { { double, double }*, %Array* }**
  %451 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %450, align 8
  %452 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %451, i32 0, i32 0
  %453 = load { double, double }*, { double, double }** %452, align 8
  %454 = bitcast { double, double }* %453 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %454, i32 -1)
  %455 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %451, i32 0, i32 1
  %456 = load %Array*, %Array** %455, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %456, i32 -1)
  %457 = bitcast { { double, double }*, %Array* }* %451 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %457, i32 -1)
  br label %exiting__32

exiting__32:                                      ; preds = %body__32
  %458 = add i64 %447, 1
  br label %header__32

exit__32:                                         ; preds = %header__32
  call void @__quantum__rt__array_update_alias_count(%Array* %249, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %264, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %265, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  %459 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %460 = sub i64 %459, 1
  br label %header__33

header__33:                                       ; preds = %exiting__33, %exit__32
  %461 = phi i64 [ 0, %exit__32 ], [ %466, %exiting__33 ]
  %462 = icmp sle i64 %461, %460
  br i1 %462, label %body__33, label %exit__33

body__33:                                         ; preds = %header__33
  %463 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %461)
  %464 = bitcast i8* %463 to %Array**
  %465 = load %Array*, %Array** %464, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %465, i32 -1)
  br label %exiting__33

exiting__33:                                      ; preds = %body__33
  %466 = add i64 %461, 1
  br label %header__33

exit__33:                                         ; preds = %header__33
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  %467 = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %468 = sub i64 %467, 1
  br label %header__34

header__34:                                       ; preds = %exiting__34, %exit__33
  %469 = phi i64 [ 0, %exit__33 ], [ %474, %exiting__34 ]
  %470 = icmp sle i64 %469, %468
  br i1 %470, label %body__34, label %exit__34

body__34:                                         ; preds = %header__34
  %471 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %469)
  %472 = bitcast i8* %471 to %Array**
  %473 = load %Array*, %Array** %472, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %473, i32 -1)
  br label %exiting__34

exiting__34:                                      ; preds = %body__34
  %474 = add i64 %469, 1
  br label %header__34

exit__34:                                         ; preds = %header__34
  call void @__quantum__rt__array_update_reference_count(%Array* %2, i32 -1)
  %475 = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %476 = sub i64 %475, 1
  br label %header__35

header__35:                                       ; preds = %exiting__35, %exit__34
  %477 = phi i64 [ 0, %exit__34 ], [ %487, %exiting__35 ]
  %478 = icmp sle i64 %477, %476
  br i1 %478, label %body__35, label %exit__35

body__35:                                         ; preds = %header__35
  %479 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %477)
  %480 = bitcast i8* %479 to { %Array*, %Array* }**
  %481 = load { %Array*, %Array* }*, { %Array*, %Array* }** %480, align 8
  %482 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %481, i32 0, i32 0
  %483 = load %Array*, %Array** %482, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %483, i32 -1)
  %484 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %481, i32 0, i32 1
  %485 = load %Array*, %Array** %484, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %485, i32 -1)
  %486 = bitcast { %Array*, %Array* }* %481 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %486, i32 -1)
  br label %exiting__35

exiting__35:                                      ; preds = %body__35
  %487 = add i64 %477, 1
  br label %header__35

exit__35:                                         ; preds = %header__35
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  %488 = sub i64 %4, 1
  br label %header__36

header__36:                                       ; preds = %exiting__36, %exit__35
  %489 = phi i64 [ 0, %exit__35 ], [ %499, %exiting__36 ]
  %490 = icmp sle i64 %489, %488
  br i1 %490, label %body__36, label %exit__36

body__36:                                         ; preds = %header__36
  %491 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %zTerms, i64 %489)
  %492 = bitcast i8* %491 to { %Array*, %Array* }**
  %493 = load { %Array*, %Array* }*, { %Array*, %Array* }** %492, align 8
  %494 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %493, i32 0, i32 0
  %495 = load %Array*, %Array** %494, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %495, i32 -1)
  %496 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %493, i32 0, i32 1
  %497 = load %Array*, %Array** %496, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %497, i32 -1)
  %498 = bitcast { %Array*, %Array* }* %493 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %498, i32 -1)
  br label %exiting__36

exiting__36:                                      ; preds = %body__36
  %499 = add i64 %489, 1
  br label %header__36

exit__36:                                         ; preds = %header__36
  call void @__quantum__rt__array_update_reference_count(%Array* %zTerms, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i32 -1)
  %500 = call i64 @__quantum__rt__array_get_size_1d(%Array* %21)
  %501 = sub i64 %500, 1
  br label %header__37

header__37:                                       ; preds = %exiting__37, %exit__36
  %502 = phi i64 [ 0, %exit__36 ], [ %507, %exiting__37 ]
  %503 = icmp sle i64 %502, %501
  br i1 %503, label %body__37, label %exit__37

body__37:                                         ; preds = %header__37
  %504 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 %502)
  %505 = bitcast i8* %504 to %Array**
  %506 = load %Array*, %Array** %505, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %506, i32 -1)
  br label %exiting__37

exiting__37:                                      ; preds = %body__37
  %507 = add i64 %502, 1
  br label %header__37

exit__37:                                         ; preds = %header__37
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  %508 = call i64 @__quantum__rt__array_get_size_1d(%Array* %22)
  %509 = sub i64 %508, 1
  br label %header__38

header__38:                                       ; preds = %exiting__38, %exit__37
  %510 = phi i64 [ 0, %exit__37 ], [ %515, %exiting__38 ]
  %511 = icmp sle i64 %510, %509
  br i1 %511, label %body__38, label %exit__38

body__38:                                         ; preds = %header__38
  %512 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %22, i64 %510)
  %513 = bitcast i8* %512 to %Array**
  %514 = load %Array*, %Array** %513, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %514, i32 -1)
  br label %exiting__38

exiting__38:                                      ; preds = %body__38
  %515 = add i64 %510, 1
  br label %header__38

exit__38:                                         ; preds = %header__38
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 -1)
  %516 = call i64 @__quantum__rt__array_get_size_1d(%Array* %23)
  %517 = sub i64 %516, 1
  br label %header__39

header__39:                                       ; preds = %exiting__39, %exit__38
  %518 = phi i64 [ 0, %exit__38 ], [ %528, %exiting__39 ]
  %519 = icmp sle i64 %518, %517
  br i1 %519, label %body__39, label %exit__39

body__39:                                         ; preds = %header__39
  %520 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %518)
  %521 = bitcast i8* %520 to { %Array*, %Array* }**
  %522 = load { %Array*, %Array* }*, { %Array*, %Array* }** %521, align 8
  %523 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %522, i32 0, i32 0
  %524 = load %Array*, %Array** %523, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %524, i32 -1)
  %525 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %522, i32 0, i32 1
  %526 = load %Array*, %Array** %525, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %526, i32 -1)
  %527 = bitcast { %Array*, %Array* }* %522 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %527, i32 -1)
  br label %exiting__39

exiting__39:                                      ; preds = %body__39
  %528 = add i64 %518, 1
  br label %header__39

exit__39:                                         ; preds = %header__39
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  %529 = sub i64 %24, 1
  br label %header__40

header__40:                                       ; preds = %exiting__40, %exit__39
  %530 = phi i64 [ 0, %exit__39 ], [ %540, %exiting__40 ]
  %531 = icmp sle i64 %530, %529
  br i1 %531, label %body__40, label %exit__40

body__40:                                         ; preds = %header__40
  %532 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %zzTerms, i64 %530)
  %533 = bitcast i8* %532 to { %Array*, %Array* }**
  %534 = load { %Array*, %Array* }*, { %Array*, %Array* }** %533, align 8
  %535 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %534, i32 0, i32 0
  %536 = load %Array*, %Array** %535, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %536, i32 -1)
  %537 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %534, i32 0, i32 1
  %538 = load %Array*, %Array** %537, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %538, i32 -1)
  %539 = bitcast { %Array*, %Array* }* %534 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %539, i32 -1)
  br label %exiting__40

exiting__40:                                      ; preds = %body__40
  %540 = add i64 %530, 1
  br label %header__40

exit__40:                                         ; preds = %header__40
  call void @__quantum__rt__array_update_reference_count(%Array* %zzTerms, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %37, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %38, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %38, i32 -1)
  %541 = call i64 @__quantum__rt__array_get_size_1d(%Array* %39)
  %542 = sub i64 %541, 1
  br label %header__41

header__41:                                       ; preds = %exiting__41, %exit__40
  %543 = phi i64 [ 0, %exit__40 ], [ %548, %exiting__41 ]
  %544 = icmp sle i64 %543, %542
  br i1 %544, label %body__41, label %exit__41

body__41:                                         ; preds = %header__41
  %545 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 %543)
  %546 = bitcast i8* %545 to %Array**
  %547 = load %Array*, %Array** %546, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %547, i32 -1)
  br label %exiting__41

exiting__41:                                      ; preds = %body__41
  %548 = add i64 %543, 1
  br label %header__41

exit__41:                                         ; preds = %header__41
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i32 -1)
  %549 = call i64 @__quantum__rt__array_get_size_1d(%Array* %41)
  %550 = sub i64 %549, 1
  br label %header__42

header__42:                                       ; preds = %exiting__42, %exit__41
  %551 = phi i64 [ 0, %exit__41 ], [ %556, %exiting__42 ]
  %552 = icmp sle i64 %551, %550
  br i1 %552, label %body__42, label %exit__42

body__42:                                         ; preds = %header__42
  %553 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %551)
  %554 = bitcast i8* %553 to %Array**
  %555 = load %Array*, %Array** %554, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %555, i32 -1)
  br label %exiting__42

exiting__42:                                      ; preds = %body__42
  %556 = add i64 %551, 1
  br label %header__42

exit__42:                                         ; preds = %header__42
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  %557 = call i64 @__quantum__rt__array_get_size_1d(%Array* %42)
  %558 = sub i64 %557, 1
  br label %header__43

header__43:                                       ; preds = %exiting__43, %exit__42
  %559 = phi i64 [ 0, %exit__42 ], [ %569, %exiting__43 ]
  %560 = icmp sle i64 %559, %558
  br i1 %560, label %body__43, label %exit__43

body__43:                                         ; preds = %header__43
  %561 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %42, i64 %559)
  %562 = bitcast i8* %561 to { %Array*, %Array* }**
  %563 = load { %Array*, %Array* }*, { %Array*, %Array* }** %562, align 8
  %564 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %563, i32 0, i32 0
  %565 = load %Array*, %Array** %564, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %565, i32 -1)
  %566 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %563, i32 0, i32 1
  %567 = load %Array*, %Array** %566, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %567, i32 -1)
  %568 = bitcast { %Array*, %Array* }* %563 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %568, i32 -1)
  br label %exiting__43

exiting__43:                                      ; preds = %body__43
  %569 = add i64 %559, 1
  br label %header__43

exit__43:                                         ; preds = %header__43
  call void @__quantum__rt__array_update_reference_count(%Array* %42, i32 -1)
  %570 = sub i64 %43, 1
  br label %header__44

header__44:                                       ; preds = %exiting__44, %exit__43
  %571 = phi i64 [ 0, %exit__43 ], [ %581, %exiting__44 ]
  %572 = icmp sle i64 %571, %570
  br i1 %572, label %body__44, label %exit__44

body__44:                                         ; preds = %header__44
  %573 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pqAndPqqrTerms, i64 %571)
  %574 = bitcast i8* %573 to { %Array*, %Array* }**
  %575 = load { %Array*, %Array* }*, { %Array*, %Array* }** %574, align 8
  %576 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %575, i32 0, i32 0
  %577 = load %Array*, %Array** %576, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %577, i32 -1)
  %578 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %575, i32 0, i32 1
  %579 = load %Array*, %Array** %578, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %579, i32 -1)
  %580 = bitcast { %Array*, %Array* }* %575 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %580, i32 -1)
  br label %exiting__44

exiting__44:                                      ; preds = %body__44
  %581 = add i64 %571, 1
  br label %header__44

exit__44:                                         ; preds = %header__44
  call void @__quantum__rt__array_update_reference_count(%Array* %pqAndPqqrTerms, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %56, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %57, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %57, i32 -1)
  %582 = call i64 @__quantum__rt__array_get_size_1d(%Array* %58)
  %583 = sub i64 %582, 1
  br label %header__45

header__45:                                       ; preds = %exiting__45, %exit__44
  %584 = phi i64 [ 0, %exit__44 ], [ %589, %exiting__45 ]
  %585 = icmp sle i64 %584, %583
  br i1 %585, label %body__45, label %exit__45

body__45:                                         ; preds = %header__45
  %586 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %58, i64 %584)
  %587 = bitcast i8* %586 to %Array**
  %588 = load %Array*, %Array** %587, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %588, i32 -1)
  br label %exiting__45

exiting__45:                                      ; preds = %body__45
  %589 = add i64 %584, 1
  br label %header__45

exit__45:                                         ; preds = %header__45
  call void @__quantum__rt__array_update_reference_count(%Array* %58, i32 -1)
  %590 = call i64 @__quantum__rt__array_get_size_1d(%Array* %59)
  %591 = sub i64 %590, 1
  br label %header__46

header__46:                                       ; preds = %exiting__46, %exit__45
  %592 = phi i64 [ 0, %exit__45 ], [ %597, %exiting__46 ]
  %593 = icmp sle i64 %592, %591
  br i1 %593, label %body__46, label %exit__46

body__46:                                         ; preds = %header__46
  %594 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %59, i64 %592)
  %595 = bitcast i8* %594 to %Array**
  %596 = load %Array*, %Array** %595, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %596, i32 -1)
  br label %exiting__46

exiting__46:                                      ; preds = %body__46
  %597 = add i64 %592, 1
  br label %header__46

exit__46:                                         ; preds = %header__46
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 -1)
  %598 = call i64 @__quantum__rt__array_get_size_1d(%Array* %60)
  %599 = sub i64 %598, 1
  br label %header__47

header__47:                                       ; preds = %exiting__47, %exit__46
  %600 = phi i64 [ 0, %exit__46 ], [ %610, %exiting__47 ]
  %601 = icmp sle i64 %600, %599
  br i1 %601, label %body__47, label %exit__47

body__47:                                         ; preds = %header__47
  %602 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %600)
  %603 = bitcast i8* %602 to { %Array*, %Array* }**
  %604 = load { %Array*, %Array* }*, { %Array*, %Array* }** %603, align 8
  %605 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %604, i32 0, i32 0
  %606 = load %Array*, %Array** %605, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %606, i32 -1)
  %607 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %604, i32 0, i32 1
  %608 = load %Array*, %Array** %607, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %608, i32 -1)
  %609 = bitcast { %Array*, %Array* }* %604 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %609, i32 -1)
  br label %exiting__47

exiting__47:                                      ; preds = %body__47
  %610 = add i64 %600, 1
  br label %header__47

exit__47:                                         ; preds = %header__47
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  %611 = sub i64 %61, 1
  br label %header__48

header__48:                                       ; preds = %exiting__48, %exit__47
  %612 = phi i64 [ 0, %exit__47 ], [ %622, %exiting__48 ]
  %613 = icmp sle i64 %612, %611
  br i1 %613, label %body__48, label %exit__48

body__48:                                         ; preds = %header__48
  %614 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Terms, i64 %612)
  %615 = bitcast i8* %614 to { %Array*, %Array* }**
  %616 = load { %Array*, %Array* }*, { %Array*, %Array* }** %615, align 8
  %617 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %616, i32 0, i32 0
  %618 = load %Array*, %Array** %617, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %618, i32 -1)
  %619 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %616, i32 0, i32 1
  %620 = load %Array*, %Array** %619, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %620, i32 -1)
  %621 = bitcast { %Array*, %Array* }* %616 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %621, i32 -1)
  br label %exiting__48

exiting__48:                                      ; preds = %body__48
  %622 = add i64 %612, 1
  br label %header__48

exit__48:                                         ; preds = %header__48
  call void @__quantum__rt__array_update_reference_count(%Array* %h0123Terms, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %74, i32 -1)
  %623 = sub i64 %77, 1
  br label %header__49

header__49:                                       ; preds = %exiting__49, %exit__48
  %624 = phi i64 [ 0, %exit__48 ], [ %634, %exiting__49 ]
  %625 = icmp sle i64 %624, %623
  br i1 %625, label %body__49, label %exit__49

body__49:                                         ; preds = %header__49
  %626 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %76, i64 %624)
  %627 = bitcast i8* %626 to { %Array*, %Array* }**
  %628 = load { %Array*, %Array* }*, { %Array*, %Array* }** %627, align 8
  %629 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %628, i32 0, i32 0
  %630 = load %Array*, %Array** %629, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %630, i32 -1)
  %631 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %628, i32 0, i32 1
  %632 = load %Array*, %Array** %631, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %632, i32 -1)
  %633 = bitcast { %Array*, %Array* }* %628 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %633, i32 -1)
  br label %exiting__49

exiting__49:                                      ; preds = %body__49
  %634 = add i64 %624, 1
  br label %header__49

exit__49:                                         ; preds = %header__49
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 -1)
  %635 = sub i64 %92, 1
  br label %header__50

header__50:                                       ; preds = %exiting__50, %exit__49
  %636 = phi i64 [ 0, %exit__49 ], [ %646, %exiting__50 ]
  %637 = icmp sle i64 %636, %635
  br i1 %637, label %body__50, label %exit__50

body__50:                                         ; preds = %header__50
  %638 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %91, i64 %636)
  %639 = bitcast i8* %638 to { %Array*, %Array* }**
  %640 = load { %Array*, %Array* }*, { %Array*, %Array* }** %639, align 8
  %641 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %640, i32 0, i32 0
  %642 = load %Array*, %Array** %641, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %642, i32 -1)
  %643 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %640, i32 0, i32 1
  %644 = load %Array*, %Array** %643, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %644, i32 -1)
  %645 = bitcast { %Array*, %Array* }* %640 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %645, i32 -1)
  br label %exiting__50

exiting__50:                                      ; preds = %body__50
  %646 = add i64 %636, 1
  br label %header__50

exit__50:                                         ; preds = %header__50
  call void @__quantum__rt__array_update_reference_count(%Array* %91, i32 -1)
  %647 = sub i64 %107, 1
  br label %header__51

header__51:                                       ; preds = %exiting__51, %exit__50
  %648 = phi i64 [ 0, %exit__50 ], [ %658, %exiting__51 ]
  %649 = icmp sle i64 %648, %647
  br i1 %649, label %body__51, label %exit__51

body__51:                                         ; preds = %header__51
  %650 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 %648)
  %651 = bitcast i8* %650 to { %Array*, %Array* }**
  %652 = load { %Array*, %Array* }*, { %Array*, %Array* }** %651, align 8
  %653 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %652, i32 0, i32 0
  %654 = load %Array*, %Array** %653, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %654, i32 -1)
  %655 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %652, i32 0, i32 1
  %656 = load %Array*, %Array** %655, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %656, i32 -1)
  %657 = bitcast { %Array*, %Array* }* %652 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %657, i32 -1)
  br label %exiting__51

exiting__51:                                      ; preds = %body__51
  %658 = add i64 %648, 1
  br label %header__51

exit__51:                                         ; preds = %header__51
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i32 -1)
  %659 = sub i64 %122, 1
  br label %header__52

header__52:                                       ; preds = %exiting__52, %exit__51
  %660 = phi i64 [ 0, %exit__51 ], [ %670, %exiting__52 ]
  %661 = icmp sle i64 %660, %659
  br i1 %661, label %body__52, label %exit__52

body__52:                                         ; preds = %header__52
  %662 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 %660)
  %663 = bitcast i8* %662 to { %Array*, %Array* }**
  %664 = load { %Array*, %Array* }*, { %Array*, %Array* }** %663, align 8
  %665 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %664, i32 0, i32 0
  %666 = load %Array*, %Array** %665, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %666, i32 -1)
  %667 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %664, i32 0, i32 1
  %668 = load %Array*, %Array** %667, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %668, i32 -1)
  %669 = bitcast { %Array*, %Array* }* %664 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %669, i32 -1)
  br label %exiting__52

exiting__52:                                      ; preds = %body__52
  %670 = add i64 %660, 1
  br label %header__52

exit__52:                                         ; preds = %header__52
  call void @__quantum__rt__array_update_reference_count(%Array* %121, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %135, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %136, i32 -1)
  %671 = sub i64 %137, 1
  br label %header__53

header__53:                                       ; preds = %exiting__53, %exit__52
  %672 = phi i64 [ 0, %exit__52 ], [ %678, %exiting__53 ]
  %673 = icmp sle i64 %672, %671
  br i1 %673, label %body__53, label %exit__53

body__53:                                         ; preds = %header__53
  %674 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %stateCoeffs, i64 %672)
  %675 = bitcast i8* %674 to { double, double }**
  %676 = load { double, double }*, { double, double }** %675, align 8
  %677 = bitcast { double, double }* %676 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %677, i32 -1)
  br label %exiting__53

exiting__53:                                      ; preds = %body__53
  %678 = add i64 %672, 1
  br label %header__53

exit__53:                                         ; preds = %header__53
  call void @__quantum__rt__array_update_reference_count(%Array* %stateCoeffs, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %146, i32 -1)
  %679 = call i64 @__quantum__rt__array_get_size_1d(%Array* %147)
  %680 = sub i64 %679, 1
  br label %header__54

header__54:                                       ; preds = %exiting__54, %exit__53
  %681 = phi i64 [ 0, %exit__53 ], [ %686, %exiting__54 ]
  %682 = icmp sle i64 %681, %680
  br i1 %682, label %body__54, label %exit__54

body__54:                                         ; preds = %header__54
  %683 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %147, i64 %681)
  %684 = bitcast i8* %683 to %Array**
  %685 = load %Array*, %Array** %684, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %685, i32 -1)
  br label %exiting__54

exiting__54:                                      ; preds = %body__54
  %686 = add i64 %681, 1
  br label %header__54

exit__54:                                         ; preds = %header__54
  call void @__quantum__rt__array_update_reference_count(%Array* %147, i32 -1)
  %687 = sub i64 %148, 1
  br label %header__55

header__55:                                       ; preds = %exiting__55, %exit__54
  %688 = phi i64 [ 0, %exit__54 ], [ %699, %exiting__55 ]
  %689 = icmp sle i64 %688, %687
  br i1 %689, label %body__55, label %exit__55

body__55:                                         ; preds = %header__55
  %690 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %stateTerms, i64 %688)
  %691 = bitcast i8* %690 to { { double, double }*, %Array* }**
  %692 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %691, align 8
  %693 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %692, i32 0, i32 0
  %694 = load { double, double }*, { double, double }** %693, align 8
  %695 = bitcast { double, double }* %694 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %695, i32 -1)
  %696 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %692, i32 0, i32 1
  %697 = load %Array*, %Array** %696, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %697, i32 -1)
  %698 = bitcast { { double, double }*, %Array* }* %692 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %698, i32 -1)
  br label %exiting__55

exiting__55:                                      ; preds = %body__55
  %699 = add i64 %688, 1
  br label %header__55

exit__55:                                         ; preds = %header__55
  call void @__quantum__rt__array_update_reference_count(%Array* %stateTerms, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %162, i32 -1)
  %700 = sub i64 %168, 1
  br label %header__56

header__56:                                       ; preds = %exiting__56, %exit__55
  %701 = phi i64 [ 0, %exit__55 ], [ %712, %exiting__56 ]
  %702 = icmp sle i64 %701, %700
  br i1 %702, label %body__56, label %exit__56

body__56:                                         ; preds = %header__56
  %703 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %167, i64 %701)
  %704 = bitcast i8* %703 to { { double, double }*, %Array* }**
  %705 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %704, align 8
  %706 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %705, i32 0, i32 0
  %707 = load { double, double }*, { double, double }** %706, align 8
  %708 = bitcast { double, double }* %707 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %708, i32 -1)
  %709 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %705, i32 0, i32 1
  %710 = load %Array*, %Array** %709, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %710, i32 -1)
  %711 = bitcast { { double, double }*, %Array* }* %705 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %711, i32 -1)
  br label %exiting__56

exiting__56:                                      ; preds = %body__56
  %712 = add i64 %701, 1
  br label %header__56

exit__56:                                         ; preds = %header__56
  call void @__quantum__rt__array_update_reference_count(%Array* %167, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %163, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %182, i32 -1)
  %713 = sub i64 %187, 1
  br label %header__57

header__57:                                       ; preds = %exiting__57, %exit__56
  %714 = phi i64 [ 0, %exit__56 ], [ %724, %exiting__57 ]
  %715 = icmp sle i64 %714, %713
  br i1 %715, label %body__57, label %exit__57

body__57:                                         ; preds = %header__57
  %716 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %186, i64 %714)
  %717 = bitcast i8* %716 to { %Array*, %Array* }**
  %718 = load { %Array*, %Array* }*, { %Array*, %Array* }** %717, align 8
  %719 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %718, i32 0, i32 0
  %720 = load %Array*, %Array** %719, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %720, i32 -1)
  %721 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %718, i32 0, i32 1
  %722 = load %Array*, %Array** %721, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %722, i32 -1)
  %723 = bitcast { %Array*, %Array* }* %718 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %723, i32 -1)
  br label %exiting__57

exiting__57:                                      ; preds = %body__57
  %724 = add i64 %714, 1
  br label %header__57

exit__57:                                         ; preds = %header__57
  call void @__quantum__rt__array_update_reference_count(%Array* %186, i32 -1)
  %725 = sub i64 %202, 1
  br label %header__58

header__58:                                       ; preds = %exiting__58, %exit__57
  %726 = phi i64 [ 0, %exit__57 ], [ %736, %exiting__58 ]
  %727 = icmp sle i64 %726, %725
  br i1 %727, label %body__58, label %exit__58

body__58:                                         ; preds = %header__58
  %728 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %201, i64 %726)
  %729 = bitcast i8* %728 to { %Array*, %Array* }**
  %730 = load { %Array*, %Array* }*, { %Array*, %Array* }** %729, align 8
  %731 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %730, i32 0, i32 0
  %732 = load %Array*, %Array** %731, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %732, i32 -1)
  %733 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %730, i32 0, i32 1
  %734 = load %Array*, %Array** %733, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %734, i32 -1)
  %735 = bitcast { %Array*, %Array* }* %730 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %735, i32 -1)
  br label %exiting__58

exiting__58:                                      ; preds = %body__58
  %736 = add i64 %726, 1
  br label %header__58

exit__58:                                         ; preds = %header__58
  call void @__quantum__rt__array_update_reference_count(%Array* %201, i32 -1)
  %737 = sub i64 %217, 1
  br label %header__59

header__59:                                       ; preds = %exiting__59, %exit__58
  %738 = phi i64 [ 0, %exit__58 ], [ %748, %exiting__59 ]
  %739 = icmp sle i64 %738, %737
  br i1 %739, label %body__59, label %exit__59

body__59:                                         ; preds = %header__59
  %740 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %216, i64 %738)
  %741 = bitcast i8* %740 to { %Array*, %Array* }**
  %742 = load { %Array*, %Array* }*, { %Array*, %Array* }** %741, align 8
  %743 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %742, i32 0, i32 0
  %744 = load %Array*, %Array** %743, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %744, i32 -1)
  %745 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %742, i32 0, i32 1
  %746 = load %Array*, %Array** %745, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %746, i32 -1)
  %747 = bitcast { %Array*, %Array* }* %742 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %747, i32 -1)
  br label %exiting__59

exiting__59:                                      ; preds = %body__59
  %748 = add i64 %738, 1
  br label %header__59

exit__59:                                         ; preds = %header__59
  call void @__quantum__rt__array_update_reference_count(%Array* %216, i32 -1)
  %749 = sub i64 %232, 1
  br label %header__60

header__60:                                       ; preds = %exiting__60, %exit__59
  %750 = phi i64 [ 0, %exit__59 ], [ %760, %exiting__60 ]
  %751 = icmp sle i64 %750, %749
  br i1 %751, label %body__60, label %exit__60

body__60:                                         ; preds = %header__60
  %752 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %231, i64 %750)
  %753 = bitcast i8* %752 to { %Array*, %Array* }**
  %754 = load { %Array*, %Array* }*, { %Array*, %Array* }** %753, align 8
  %755 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %754, i32 0, i32 0
  %756 = load %Array*, %Array** %755, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %756, i32 -1)
  %757 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %754, i32 0, i32 1
  %758 = load %Array*, %Array** %757, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %758, i32 -1)
  %759 = bitcast { %Array*, %Array* }* %754 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %759, i32 -1)
  br label %exiting__60

exiting__60:                                      ; preds = %body__60
  %760 = add i64 %750, 1
  br label %header__60

exit__60:                                         ; preds = %header__60
  call void @__quantum__rt__array_update_reference_count(%Array* %231, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %245, i32 -1)
  %761 = sub i64 %250, 1
  br label %header__61

header__61:                                       ; preds = %exiting__61, %exit__60
  %762 = phi i64 [ 0, %exit__60 ], [ %773, %exiting__61 ]
  %763 = icmp sle i64 %762, %761
  br i1 %763, label %body__61, label %exit__61

body__61:                                         ; preds = %header__61
  %764 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %249, i64 %762)
  %765 = bitcast i8* %764 to { { double, double }*, %Array* }**
  %766 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %765, align 8
  %767 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %766, i32 0, i32 0
  %768 = load { double, double }*, { double, double }** %767, align 8
  %769 = bitcast { double, double }* %768 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %769, i32 -1)
  %770 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %766, i32 0, i32 1
  %771 = load %Array*, %Array** %770, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %771, i32 -1)
  %772 = bitcast { { double, double }*, %Array* }* %766 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %772, i32 -1)
  br label %exiting__61

exiting__61:                                      ; preds = %body__61
  %773 = add i64 %762, 1
  br label %header__61

exit__61:                                         ; preds = %header__61
  call void @__quantum__rt__array_update_reference_count(%Array* %249, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %264, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %265, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %266, i32 -1)
  ret double %267
}

declare void @__quantum__rt__array_update_alias_count(%Array*, i32)

define internal %Array* @Microsoft__Quantum__Arrays___fc79bca9230c48fa8f53e243a9ae19af_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { %Array*, %Array* }**
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %13 = call { %Array*, %Array* }* @Microsoft__Quantum__Core___65a5babc3087484ca24a1bcfe76d3643_Default__body()
  %14 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %0)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %16)
  %19 = bitcast i8* %18 to { %Array*, %Array* }**
  store { %Array*, %Array* }* %13, { %Array*, %Array* }** %19, align 8
  %20 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 0
  %21 = load %Array*, %Array** %20, align 8
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 1
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 1)
  %24 = bitcast { %Array*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %resultArray = alloca %Array*, align 8
  store %Array* %14, %Array** %resultArray, align 8
  %26 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %27 = phi i64 [ 0, %exit__2 ], [ %37, %exiting__3 ]
  %28 = icmp sle i64 %27, %26
  br i1 %28, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %27)
  %30 = bitcast i8* %29 to { %Array*, %Array* }**
  %31 = load { %Array*, %Array* }*, { %Array*, %Array* }** %30, align 8
  %32 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %31, i32 0, i32 0
  %33 = load %Array*, %Array** %32, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  %34 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %31, i32 0, i32 1
  %35 = load %Array*, %Array** %34, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  %36 = bitcast { %Array*, %Array* }* %31 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %37 = add i64 %27, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %38 = call %Range @Microsoft__Quantum__Arrays___d97671faf3a340c9a8ceb3810bc7cfac_IndexRange__body(%Array* %array)
  %39 = extractvalue %Range %38, 0
  %40 = extractvalue %Range %38, 1
  %41 = extractvalue %Range %38, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__3
  %42 = icmp sgt i64 %40, 0
  br label %header__4

header__4:                                        ; preds = %exiting__4, %preheader__1
  %idxElement = phi i64 [ %39, %preheader__1 ], [ %69, %exiting__4 ]
  %43 = icmp sle i64 %idxElement, %41
  %44 = icmp sge i64 %idxElement, %41
  %45 = select i1 %42, i1 %43, i1 %44
  br i1 %45, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %46 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %46, i32 -1)
  %47 = call %Array* @__quantum__rt__array_copy(%Array* %46, i1 false)
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %49 = bitcast i8* %48 to { %Array*, %Array* }**
  %50 = load { %Array*, %Array* }*, { %Array*, %Array* }** %49, align 8
  %51 = bitcast { %Array*, %Array* }* %50 to %Tuple*
  %52 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array* }* }* getelementptr ({ { %Array*, %Array* }* }, { { %Array*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %51, %Tuple* %52)
  %53 = bitcast %Tuple* %52 to { { %Array*, %Array* }* }*
  %54 = getelementptr inbounds { { %Array*, %Array* }* }, { { %Array*, %Array* }* }* %53, i32 0, i32 0
  %55 = load { %Array*, %Array* }*, { %Array*, %Array* }** %54, align 8
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %idxElement)
  %57 = bitcast i8* %56 to { %Array*, %Array* }**
  %58 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %55, i32 0, i32 0
  %59 = load %Array*, %Array** %58, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %59, i32 1)
  %60 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %55, i32 0, i32 1
  %61 = load %Array*, %Array** %60, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %61, i32 1)
  %62 = bitcast { %Array*, %Array* }* %55 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %62, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %62, i32 1)
  %63 = load { %Array*, %Array* }*, { %Array*, %Array* }** %57, align 8
  %64 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %63, i32 0, i32 0
  %65 = load %Array*, %Array** %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 -1)
  %66 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %63, i32 0, i32 1
  %67 = load %Array*, %Array** %66, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %67, i32 -1)
  %68 = bitcast { %Array*, %Array* }* %63 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %68, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %67, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %68, i32 -1)
  store { %Array*, %Array* }* %55, { %Array*, %Array* }** %57, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  store %Array* %47, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %62, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %52, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %69 = add i64 %idxElement, %40
  br label %header__4

exit__4:                                          ; preds = %header__4
  %70 = load %Array*, %Array** %resultArray, align 8
  %71 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 0
  %72 = load %Array*, %Array** %71, align 8
  %73 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 1
  %74 = load %Array*, %Array** %73, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %75 = sub i64 %0, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %76 = phi i64 [ 0, %exit__4 ], [ %86, %exiting__5 ]
  %77 = icmp sle i64 %76, %75
  br i1 %77, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %76)
  %79 = bitcast i8* %78 to { %Array*, %Array* }**
  %80 = load { %Array*, %Array* }*, { %Array*, %Array* }** %79, align 8
  %81 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %80, i32 0, i32 0
  %82 = load %Array*, %Array** %81, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %82, i32 -1)
  %83 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %80, i32 0, i32 1
  %84 = load %Array*, %Array** %83, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %84, i32 -1)
  %85 = bitcast { %Array*, %Array* }* %80 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %85, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %86 = add i64 %76, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %87 = call i64 @__quantum__rt__array_get_size_1d(%Array* %70)
  %88 = sub i64 %87, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %89 = phi i64 [ 0, %exit__5 ], [ %99, %exiting__6 ]
  %90 = icmp sle i64 %89, %88
  br i1 %90, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %70, i64 %89)
  %92 = bitcast i8* %91 to { %Array*, %Array* }**
  %93 = load { %Array*, %Array* }*, { %Array*, %Array* }** %92, align 8
  %94 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %93, i32 0, i32 0
  %95 = load %Array*, %Array** %94, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %95, i32 -1)
  %96 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %93, i32 0, i32 1
  %97 = load %Array*, %Array** %96, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %97, i32 -1)
  %98 = bitcast { %Array*, %Array* }* %93 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %98, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %99 = add i64 %89, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 -1)
  %100 = bitcast { %Array*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %100, i32 -1)
  ret %Array* %70
}

define internal void @Microsoft__Quantum__Chemistry__HTerm__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = call { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { { %Array*, %Array* }* }*
  %7 = getelementptr inbounds { { %Array*, %Array* }* }, { { %Array*, %Array* }* }* %6, i32 0, i32 0
  store { %Array*, %Array* }* %5, { %Array*, %Array* }** %7, align 8
  ret void
}

declare %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]*, [2 x void (%Tuple*, i32)*]*, %Tuple*)

define internal %Array* @Microsoft__Quantum__Arrays___01116e73a43749b499ae926f40d6a6ce_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %9 = sub i64 %8, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %10)
  %13 = bitcast i8* %12 to %Array**
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %16 = icmp slt i64 %0, %8
  br i1 %16, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__2
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__2
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %8, %condFalse__1 ]
  %17 = call { %Array*, %Array* }* @Microsoft__Quantum__Core___f6ffe6fa1eec4c679c647abb3d09ac4b_Default__body()
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %19 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %condContinue__1
  %20 = phi i64 [ 0, %condContinue__1 ], [ %29, %exiting__3 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %20)
  %23 = bitcast i8* %22 to { %Array*, %Array* }**
  store { %Array*, %Array* }* %17, { %Array*, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 0
  %25 = load %Array*, %Array** %24, align 8
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 1
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 1)
  %28 = bitcast { %Array*, %Array* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %29 = add i64 %20, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %output = alloca %Array*, align 8
  store %Array* %18, %Array** %output, align 8
  %30 = sub i64 %nElements, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %31 = phi i64 [ 0, %exit__3 ], [ %41, %exiting__4 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %31)
  %34 = bitcast i8* %33 to { %Array*, %Array* }**
  %35 = load { %Array*, %Array* }*, { %Array*, %Array* }** %34, align 8
  %36 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %35, i32 0, i32 0
  %37 = load %Array*, %Array** %36, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %37, i32 1)
  %38 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %35, i32 0, i32 1
  %39 = load %Array*, %Array** %38, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 1)
  %40 = bitcast { %Array*, %Array* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %41 = add i64 %31, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %42 = sub i64 %nElements, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idxElement = phi i64 [ 0, %exit__4 ], [ %64, %exiting__5 ]
  %43 = icmp sle i64 %idxElement, %42
  br i1 %43, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %44 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 -1)
  %45 = call %Array* @__quantum__rt__array_copy(%Array* %44, i1 false)
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %47 = bitcast %Tuple* %46 to { %Array*, %Array* }*
  %48 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %47, i32 0, i32 0
  %49 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %47, i32 0, i32 1
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %51 = bitcast i8* %50 to %Array**
  %52 = load %Array*, %Array** %51, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 1)
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %54 = bitcast i8* %53 to %Array**
  %55 = load %Array*, %Array** %54, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %55, i32 1)
  store %Array* %52, %Array** %48, align 8
  store %Array* %55, %Array** %49, align 8
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %45, i64 %idxElement)
  %57 = bitcast i8* %56 to { %Array*, %Array* }**
  call void @__quantum__rt__array_update_alias_count(%Array* %52, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %55, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %46, i32 1)
  %58 = load { %Array*, %Array* }*, { %Array*, %Array* }** %57, align 8
  %59 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %58, i32 0, i32 0
  %60 = load %Array*, %Array** %59, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i32 -1)
  %61 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %58, i32 0, i32 1
  %62 = load %Array*, %Array** %61, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %62, i32 -1)
  %63 = bitcast { %Array*, %Array* }* %58 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %63, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %62, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %63, i32 -1)
  store { %Array*, %Array* }* %47, { %Array*, %Array* }** %57, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i32 1)
  store %Array* %45, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %64 = add i64 %idxElement, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %65 = load %Array*, %Array** %output, align 8
  %66 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 0
  %67 = load %Array*, %Array** %66, align 8
  %68 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 1
  %69 = load %Array*, %Array** %68, align 8
  %70 = sub i64 %0, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %71 = phi i64 [ 0, %exit__5 ], [ %76, %exiting__6 ]
  %72 = icmp sle i64 %71, %70
  br i1 %72, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %71)
  %74 = bitcast i8* %73 to %Array**
  %75 = load %Array*, %Array** %74, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %75, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %76 = add i64 %71, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  %77 = sub i64 %8, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %78 = phi i64 [ 0, %exit__6 ], [ %83, %exiting__7 ]
  %79 = icmp sle i64 %78, %77
  br i1 %79, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %78)
  %81 = bitcast i8* %80 to %Array**
  %82 = load %Array*, %Array** %81, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %82, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %83 = add i64 %78, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %84 = call i64 @__quantum__rt__array_get_size_1d(%Array* %65)
  %85 = sub i64 %84, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %86 = phi i64 [ 0, %exit__7 ], [ %96, %exiting__8 ]
  %87 = icmp sle i64 %86, %85
  br i1 %87, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %86)
  %89 = bitcast i8* %88 to { %Array*, %Array* }**
  %90 = load { %Array*, %Array* }*, { %Array*, %Array* }** %89, align 8
  %91 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %90, i32 0, i32 0
  %92 = load %Array*, %Array** %91, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %92, i32 -1)
  %93 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %90, i32 0, i32 1
  %94 = load %Array*, %Array** %93, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %94, i32 -1)
  %95 = bitcast { %Array*, %Array* }* %90 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %95, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %96 = add i64 %86, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %67, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 -1)
  %97 = bitcast { %Array*, %Array* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %97, i32 -1)
  ret %Array* %65
}

define internal %Array* @Microsoft__PnnlCollaboration___2d4f1415284b49129ecda2cd4e6ba4f6_Unpacked__body(i64 %n, %Array* %xs) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %xs, i32 1)
  %0 = call i1 @Microsoft__Quantum__Arrays___c5a61063f3424fd0bb3b96e2a30fdd27_IsEmpty__body(%Array* %xs)
  br i1 %0, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  %2 = call %Array* @Microsoft__Quantum__Arrays___6680986d56214bd9b831ad84094b0209_Chunks__body(i64 %n, %Array* %xs)
  %3 = call %Array* @Microsoft__Quantum__Arrays___6b9c50252b0b4b80bfaa0083ad790576_Transposed__body(%Array* %2)
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %5 = sub i64 %4, 1
  br label %header__1

condContinue__1:                                  ; preds = %exit__1, %condTrue__1
  %6 = phi %Array* [ %1, %condTrue__1 ], [ %3, %exit__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %xs, i32 -1)
  ret %Array* %6

header__1:                                        ; preds = %exiting__1, %condFalse__1
  %7 = phi i64 [ 0, %condFalse__1 ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %5
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %7)
  %10 = bitcast i8* %9 to %Array**
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %2, i32 -1)
  br label %condContinue__1
}

define internal %Array* @Microsoft__PnnlCollaboration___901736e8b977437095e9978ad09c39ea_Unpacked__body(i64 %n, %Array* %xs) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %xs, i32 1)
  %0 = call i1 @Microsoft__Quantum__Arrays___a41cb6256a484974909f3c9385a9981b_IsEmpty__body(%Array* %xs)
  br i1 %0, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  %2 = call %Array* @Microsoft__Quantum__Arrays___1ff35f497f5143cdacacd1d6404d45ce_Chunks__body(i64 %n, %Array* %xs)
  %3 = call %Array* @Microsoft__Quantum__Arrays___2d3f5027aec4451baf2db9e0bf00fb4c_Transposed__body(%Array* %2)
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %5 = sub i64 %4, 1
  br label %header__1

condContinue__1:                                  ; preds = %exit__1, %condTrue__1
  %6 = phi %Array* [ %1, %condTrue__1 ], [ %3, %exit__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %xs, i32 -1)
  ret %Array* %6

header__1:                                        ; preds = %exiting__1, %condFalse__1
  %7 = phi i64 [ 0, %condFalse__1 ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %5
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %7)
  %10 = bitcast i8* %9 to %Array**
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %2, i32 -1)
  br label %condContinue__1
}

declare i64 @__quantum__rt__array_get_size_1d(%Array*)

declare i8* @__quantum__rt__array_get_element_ptr_1d(%Array*, i64)

declare void @__quantum__rt__tuple_update_alias_count(%Tuple*, i32)

define internal i1 @Microsoft__Quantum__Arrays___c5a61063f3424fd0bb3b96e2a30fdd27_IsEmpty__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = icmp eq i64 %0, 0
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret i1 %1
}

declare %Array* @__quantum__rt__array_create_1d(i32, i64)

define internal %Array* @Microsoft__Quantum__Arrays___6680986d56214bd9b831ad84094b0209_Chunks__body(i64 %nElements, %Array* %arr) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %arr, i32 1)
  %0 = icmp sgt i64 %nElements, 0
  %1 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @44, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %0, %String* %1)
  %2 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %output = alloca %Array*, align 8
  store %Array* %2, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %remaining = alloca %Array*, align 8
  store %Array* %arr, %Array** %remaining, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %arr, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %arr, i32 1)
  br label %while__1

while__1:                                         ; preds = %exit__5, %entry
  %3 = load %Array*, %Array** %remaining, align 8
  %4 = call i1 @Microsoft__Quantum__Arrays___c5a61063f3424fd0bb3b96e2a30fdd27_IsEmpty__body(%Array* %3)
  %5 = xor i1 %4, true
  br i1 %5, label %do__1, label %wend__1

do__1:                                            ; preds = %while__1
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %nElementsToTake = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %6, i64 %nElements)
  %7 = load %Array*, %Array** %output, align 8
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 0)
  %10 = bitcast i8* %9 to %Array**
  %11 = sub i64 %nElementsToTake, 1
  %12 = load %Range, %Range* @EmptyRange, align 4
  %13 = insertvalue %Range %12, i64 0, 0
  %14 = insertvalue %Range %13, i64 1, 1
  %15 = insertvalue %Range %14, i64 %11, 2
  %16 = call %Array* @__quantum__rt__array_slice_1d(%Array* %3, %Range %15, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  store %Array* %16, %Array** %10, align 8
  %17 = call %Array* @__quantum__rt__array_concatenate(%Array* %7, %Array* %8)
  %18 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %19 = sub i64 %18, 1
  br label %header__1

wend__1:                                          ; preds = %while__1
  %20 = load %Array*, %Array** %output, align 8
  %21 = load %Array*, %Array** %remaining, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %arr, i32 -1)
  %22 = call i64 @__quantum__rt__array_get_size_1d(%Array* %20)
  %23 = sub i64 %22, 1
  br label %header__6

header__1:                                        ; preds = %exiting__1, %do__1
  %24 = phi i64 [ 0, %do__1 ], [ %29, %exiting__1 ]
  %25 = icmp sle i64 %24, %19
  br i1 %25, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %24)
  %27 = bitcast i8* %26 to %Array**
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %29 = add i64 %24, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 1)
  %30 = sub i64 %18, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %31 = phi i64 [ 0, %exit__1 ], [ %36, %exiting__2 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %31)
  %34 = bitcast i8* %33 to %Array**
  %35 = load %Array*, %Array** %34, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %31, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %37 = call i64 @__quantum__rt__array_get_size_1d(%Array* %7)
  %38 = sub i64 %37, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %39 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %40 = icmp sle i64 %39, %38
  br i1 %40, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %39)
  %42 = bitcast i8* %41 to %Array**
  %43 = load %Array*, %Array** %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %39, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %7, i32 -1)
  %45 = sub i64 %37, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %51, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %46)
  %49 = bitcast i8* %48 to %Array**
  %50 = load %Array*, %Array** %49, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %50, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %51 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %7, i32 -1)
  store %Array* %17, %Array** %output, align 8
  %52 = sub i64 %6, 1
  %53 = load %Range, %Range* @EmptyRange, align 4
  %54 = insertvalue %Range %53, i64 %nElementsToTake, 0
  %55 = insertvalue %Range %54, i64 1, 1
  %56 = insertvalue %Range %55, i64 %52, 2
  %57 = call %Array* @__quantum__rt__array_slice_1d(%Array* %3, %Range %56, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %57, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %57, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  store %Array* %57, %Array** %remaining, align 8
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %58 = phi i64 [ 0, %exit__4 ], [ %63, %exiting__5 ]
  %59 = icmp sle i64 %58, 0
  br i1 %59, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %58)
  %61 = bitcast i8* %60 to %Array**
  %62 = load %Array*, %Array** %61, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %62, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %63 = add i64 %58, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %57, i32 -1)
  br label %while__1

header__6:                                        ; preds = %exiting__6, %wend__1
  %64 = phi i64 [ 0, %wend__1 ], [ %69, %exiting__6 ]
  %65 = icmp sle i64 %64, %23
  br i1 %65, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %64)
  %67 = bitcast i8* %66 to %Array**
  %68 = load %Array*, %Array** %67, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %68, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %69 = add i64 %64, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  ret %Array* %20
}

declare %String* @__quantum__rt__string_create(i8*)

declare void @__quantum__rt__message(%String*)

define internal %Array* @Microsoft__PnnlCollaboration___3fda5f00eea8496f9f7711c9f0495747_UnpackedJagged__body(%Array* %ns, %Array* %xs) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ns, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %xs, i32 1)
  %0 = call i1 @Microsoft__Quantum__Arrays___c5a61063f3424fd0bb3b96e2a30fdd27_IsEmpty__body(%Array* %xs)
  br i1 %0, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  %2 = call %Array* @Microsoft__Quantum__Arrays___76614ad2149a474a9c0e36bc169093db_Partitioned__body(%Array* %ns, %Array* %xs)
  %3 = call %Array* @Microsoft__Quantum__Arrays___20d806f9041644b9ac30413f77307c17_Most__body(%Array* %2)
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %5 = sub i64 %4, 1
  br label %header__1

condContinue__1:                                  ; preds = %exit__1, %condTrue__1
  %6 = phi %Array* [ %1, %condTrue__1 ], [ %3, %exit__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %ns, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %xs, i32 -1)
  ret %Array* %6

header__1:                                        ; preds = %exiting__1, %condFalse__1
  %7 = phi i64 [ 0, %condFalse__1 ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %5
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %7)
  %10 = bitcast i8* %9 to %Array**
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %2, i32 -1)
  br label %condContinue__1
}

define internal %Array* @Microsoft__Quantum__Arrays___1ff35f497f5143cdacacd1d6404d45ce_Chunks__body(i64 %nElements, %Array* %arr) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %arr, i32 1)
  %0 = icmp sgt i64 %nElements, 0
  %1 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @44, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %0, %String* %1)
  %2 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %output = alloca %Array*, align 8
  store %Array* %2, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %remaining = alloca %Array*, align 8
  store %Array* %arr, %Array** %remaining, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %arr, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %arr, i32 1)
  br label %while__1

while__1:                                         ; preds = %exit__5, %entry
  %3 = load %Array*, %Array** %remaining, align 8
  %4 = call i1 @Microsoft__Quantum__Arrays___a41cb6256a484974909f3c9385a9981b_IsEmpty__body(%Array* %3)
  %5 = xor i1 %4, true
  br i1 %5, label %do__1, label %wend__1

do__1:                                            ; preds = %while__1
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %nElementsToTake = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %6, i64 %nElements)
  %7 = load %Array*, %Array** %output, align 8
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 0)
  %10 = bitcast i8* %9 to %Array**
  %11 = sub i64 %nElementsToTake, 1
  %12 = load %Range, %Range* @EmptyRange, align 4
  %13 = insertvalue %Range %12, i64 0, 0
  %14 = insertvalue %Range %13, i64 1, 1
  %15 = insertvalue %Range %14, i64 %11, 2
  %16 = call %Array* @__quantum__rt__array_slice_1d(%Array* %3, %Range %15, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  store %Array* %16, %Array** %10, align 8
  %17 = call %Array* @__quantum__rt__array_concatenate(%Array* %7, %Array* %8)
  %18 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %19 = sub i64 %18, 1
  br label %header__1

wend__1:                                          ; preds = %while__1
  %20 = load %Array*, %Array** %output, align 8
  %21 = load %Array*, %Array** %remaining, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %arr, i32 -1)
  %22 = call i64 @__quantum__rt__array_get_size_1d(%Array* %20)
  %23 = sub i64 %22, 1
  br label %header__6

header__1:                                        ; preds = %exiting__1, %do__1
  %24 = phi i64 [ 0, %do__1 ], [ %29, %exiting__1 ]
  %25 = icmp sle i64 %24, %19
  br i1 %25, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %24)
  %27 = bitcast i8* %26 to %Array**
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %29 = add i64 %24, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 1)
  %30 = sub i64 %18, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %31 = phi i64 [ 0, %exit__1 ], [ %36, %exiting__2 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %31)
  %34 = bitcast i8* %33 to %Array**
  %35 = load %Array*, %Array** %34, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %31, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %37 = call i64 @__quantum__rt__array_get_size_1d(%Array* %7)
  %38 = sub i64 %37, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %39 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %40 = icmp sle i64 %39, %38
  br i1 %40, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %39)
  %42 = bitcast i8* %41 to %Array**
  %43 = load %Array*, %Array** %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %39, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %7, i32 -1)
  %45 = sub i64 %37, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %51, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %46)
  %49 = bitcast i8* %48 to %Array**
  %50 = load %Array*, %Array** %49, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %50, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %51 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %7, i32 -1)
  store %Array* %17, %Array** %output, align 8
  %52 = sub i64 %6, 1
  %53 = load %Range, %Range* @EmptyRange, align 4
  %54 = insertvalue %Range %53, i64 %nElementsToTake, 0
  %55 = insertvalue %Range %54, i64 1, 1
  %56 = insertvalue %Range %55, i64 %52, 2
  %57 = call %Array* @__quantum__rt__array_slice_1d(%Array* %3, %Range %56, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %57, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %57, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  store %Array* %57, %Array** %remaining, align 8
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %58 = phi i64 [ 0, %exit__4 ], [ %63, %exiting__5 ]
  %59 = icmp sle i64 %58, 0
  br i1 %59, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %58)
  %61 = bitcast i8* %60 to %Array**
  %62 = load %Array*, %Array** %61, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %62, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %63 = add i64 %58, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %57, i32 -1)
  br label %while__1

header__6:                                        ; preds = %exiting__6, %wend__1
  %64 = phi i64 [ 0, %wend__1 ], [ %69, %exiting__6 ]
  %65 = icmp sle i64 %64, %23
  br i1 %65, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %64)
  %67 = bitcast i8* %66 to %Array**
  %68 = load %Array*, %Array** %67, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %68, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %69 = add i64 %64, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  ret %Array* %20
}

define internal { %Array*, %Array*, %Array*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JWOptimizedHTerms__body(%Array* %__Item1__, %Array* %__Item2__, %Array* %__Item3__, %Array* %__Item4__) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item1__)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item1__, i64 %2)
  %5 = bitcast i8* %4 to { %Array*, %Array* }**
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i32 1)
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item2__)
  %14 = sub i64 %13, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item2__, i64 %15)
  %18 = bitcast i8* %17 to { %Array*, %Array* }**
  %19 = load { %Array*, %Array* }*, { %Array*, %Array* }** %18, align 8
  %20 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %19, i32 0, i32 0
  %21 = load %Array*, %Array** %20, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 1)
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %19, i32 0, i32 1
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %24 = bitcast { %Array*, %Array* }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item2__, i32 1)
  %26 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item3__)
  %27 = sub i64 %26, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %28 = phi i64 [ 0, %exit__2 ], [ %38, %exiting__3 ]
  %29 = icmp sle i64 %28, %27
  br i1 %29, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item3__, i64 %28)
  %31 = bitcast i8* %30 to { %Array*, %Array* }**
  %32 = load { %Array*, %Array* }*, { %Array*, %Array* }** %31, align 8
  %33 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %32, i32 0, i32 0
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 1)
  %35 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %32, i32 0, i32 1
  %36 = load %Array*, %Array** %35, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %36, i32 1)
  %37 = bitcast { %Array*, %Array* }* %32 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %37, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %38 = add i64 %28, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i32 1)
  %39 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item4__)
  %40 = sub i64 %39, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %41 = phi i64 [ 0, %exit__3 ], [ %51, %exiting__4 ]
  %42 = icmp sle i64 %41, %40
  br i1 %42, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item4__, i64 %41)
  %44 = bitcast i8* %43 to { %Array*, %Array* }**
  %45 = load { %Array*, %Array* }*, { %Array*, %Array* }** %44, align 8
  %46 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %45, i32 0, i32 0
  %47 = load %Array*, %Array** %46, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  %48 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %45, i32 0, i32 1
  %49 = load %Array*, %Array** %48, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 1)
  %50 = bitcast { %Array*, %Array* }* %45 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %50, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %51 = add i64 %41, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item4__, i32 1)
  %52 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, %Array*, %Array* }* getelementptr ({ %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* null, i32 1) to i64))
  %53 = bitcast %Tuple* %52 to { %Array*, %Array*, %Array*, %Array* }*
  %54 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %53, i32 0, i32 0
  %55 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %53, i32 0, i32 1
  %56 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %53, i32 0, i32 2
  %57 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %53, i32 0, i32 3
  store %Array* %__Item1__, %Array** %54, align 8
  store %Array* %__Item2__, %Array** %55, align 8
  store %Array* %__Item3__, %Array** %56, align 8
  store %Array* %__Item4__, %Array** %57, align 8
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item1__)
  %59 = sub i64 %58, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %60 = phi i64 [ 0, %exit__4 ], [ %70, %exiting__5 ]
  %61 = icmp sle i64 %60, %59
  br i1 %61, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item1__, i64 %60)
  %63 = bitcast i8* %62 to { %Array*, %Array* }**
  %64 = load { %Array*, %Array* }*, { %Array*, %Array* }** %63, align 8
  %65 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %64, i32 0, i32 0
  %66 = load %Array*, %Array** %65, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %66, i32 1)
  %67 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %64, i32 0, i32 1
  %68 = load %Array*, %Array** %67, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %68, i32 1)
  %69 = bitcast { %Array*, %Array* }* %64 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %69, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %70 = add i64 %60, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item1__, i32 1)
  %71 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item2__)
  %72 = sub i64 %71, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %73 = phi i64 [ 0, %exit__5 ], [ %83, %exiting__6 ]
  %74 = icmp sle i64 %73, %72
  br i1 %74, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item2__, i64 %73)
  %76 = bitcast i8* %75 to { %Array*, %Array* }**
  %77 = load { %Array*, %Array* }*, { %Array*, %Array* }** %76, align 8
  %78 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %77, i32 0, i32 0
  %79 = load %Array*, %Array** %78, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 1)
  %80 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %77, i32 0, i32 1
  %81 = load %Array*, %Array** %80, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 1)
  %82 = bitcast { %Array*, %Array* }* %77 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %82, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %83 = add i64 %73, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item2__, i32 1)
  %84 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item3__)
  %85 = sub i64 %84, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %86 = phi i64 [ 0, %exit__6 ], [ %96, %exiting__7 ]
  %87 = icmp sle i64 %86, %85
  br i1 %87, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item3__, i64 %86)
  %89 = bitcast i8* %88 to { %Array*, %Array* }**
  %90 = load { %Array*, %Array* }*, { %Array*, %Array* }** %89, align 8
  %91 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %90, i32 0, i32 0
  %92 = load %Array*, %Array** %91, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %92, i32 1)
  %93 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %90, i32 0, i32 1
  %94 = load %Array*, %Array** %93, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %94, i32 1)
  %95 = bitcast { %Array*, %Array* }* %90 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %95, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %96 = add i64 %86, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item3__, i32 1)
  %97 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__Item4__)
  %98 = sub i64 %97, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %99 = phi i64 [ 0, %exit__7 ], [ %109, %exiting__8 ]
  %100 = icmp sle i64 %99, %98
  br i1 %100, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item4__, i64 %99)
  %102 = bitcast i8* %101 to { %Array*, %Array* }**
  %103 = load { %Array*, %Array* }*, { %Array*, %Array* }** %102, align 8
  %104 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %103, i32 0, i32 0
  %105 = load %Array*, %Array** %104, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %105, i32 1)
  %106 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %103, i32 0, i32 1
  %107 = load %Array*, %Array** %106, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %107, i32 1)
  %108 = bitcast { %Array*, %Array* }* %103 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %108, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %109 = add i64 %99, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item4__, i32 1)
  %110 = sub i64 %0, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %111 = phi i64 [ 0, %exit__8 ], [ %121, %exiting__9 ]
  %112 = icmp sle i64 %111, %110
  br i1 %112, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item1__, i64 %111)
  %114 = bitcast i8* %113 to { %Array*, %Array* }**
  %115 = load { %Array*, %Array* }*, { %Array*, %Array* }** %114, align 8
  %116 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %115, i32 0, i32 0
  %117 = load %Array*, %Array** %116, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %117, i32 -1)
  %118 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %115, i32 0, i32 1
  %119 = load %Array*, %Array** %118, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %119, i32 -1)
  %120 = bitcast { %Array*, %Array* }* %115 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %120, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %121 = add i64 %111, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i32 -1)
  %122 = sub i64 %13, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %123 = phi i64 [ 0, %exit__9 ], [ %133, %exiting__10 ]
  %124 = icmp sle i64 %123, %122
  br i1 %124, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item2__, i64 %123)
  %126 = bitcast i8* %125 to { %Array*, %Array* }**
  %127 = load { %Array*, %Array* }*, { %Array*, %Array* }** %126, align 8
  %128 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %127, i32 0, i32 0
  %129 = load %Array*, %Array** %128, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %129, i32 -1)
  %130 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %127, i32 0, i32 1
  %131 = load %Array*, %Array** %130, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %131, i32 -1)
  %132 = bitcast { %Array*, %Array* }* %127 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %132, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %133 = add i64 %123, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item2__, i32 -1)
  %134 = sub i64 %26, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %135 = phi i64 [ 0, %exit__10 ], [ %145, %exiting__11 ]
  %136 = icmp sle i64 %135, %134
  br i1 %136, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item3__, i64 %135)
  %138 = bitcast i8* %137 to { %Array*, %Array* }**
  %139 = load { %Array*, %Array* }*, { %Array*, %Array* }** %138, align 8
  %140 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %139, i32 0, i32 0
  %141 = load %Array*, %Array** %140, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %141, i32 -1)
  %142 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %139, i32 0, i32 1
  %143 = load %Array*, %Array** %142, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %143, i32 -1)
  %144 = bitcast { %Array*, %Array* }* %139 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %144, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %145 = add i64 %135, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i32 -1)
  %146 = sub i64 %39, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %147 = phi i64 [ 0, %exit__11 ], [ %157, %exiting__12 ]
  %148 = icmp sle i64 %147, %146
  br i1 %148, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %149 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__Item4__, i64 %147)
  %150 = bitcast i8* %149 to { %Array*, %Array* }**
  %151 = load { %Array*, %Array* }*, { %Array*, %Array* }** %150, align 8
  %152 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %151, i32 0, i32 0
  %153 = load %Array*, %Array** %152, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %153, i32 -1)
  %154 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %151, i32 0, i32 1
  %155 = load %Array*, %Array** %154, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %155, i32 -1)
  %156 = bitcast { %Array*, %Array* }* %151 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %156, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %157 = add i64 %147, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item4__, i32 -1)
  ret { %Array*, %Array*, %Array*, %Array* }* %53
}

define internal %Array* @Microsoft__Quantum__Arrays___61b0bf144810407c8874097a490e18b8_Zipped__body(%Array* %left, %Array* %right) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %2 = icmp slt i64 %0, %1
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %1, %condFalse__1 ]
  %3 = call { double, double }* @Microsoft__Quantum__Core___732f127c65c44052905853676c85a345_Default__body()
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %5 = sub i64 %nElements, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %condContinue__1
  %6 = phi i64 [ 0, %condContinue__1 ], [ %11, %exiting__1 ]
  %7 = icmp sle i64 %6, %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %6)
  %9 = bitcast i8* %8 to { double, double }**
  store { double, double }* %3, { double, double }** %9, align 8
  %10 = bitcast { double, double }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %6, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %output = alloca %Array*, align 8
  store %Array* %4, %Array** %output, align 8
  %12 = sub i64 %nElements, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16, align 8
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %20 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxElement = phi i64 [ 0, %exit__2 ], [ %38, %exiting__3 ]
  %21 = icmp sle i64 %idxElement, %20
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %22, i32 -1)
  %23 = call %Array* @__quantum__rt__array_copy(%Array* %22, i1 false)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { double, double }*
  %26 = getelementptr inbounds { double, double }, { double, double }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { double, double }, { double, double }* %25, i32 0, i32 1
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %29 = bitcast i8* %28 to double*
  %30 = load double, double* %29, align 8
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %32 = bitcast i8* %31 to double*
  %33 = load double, double* %32, align 8
  store double %30, double* %26, align 8
  store double %33, double* %27, align 8
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %idxElement)
  %35 = bitcast i8* %34 to { double, double }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 1)
  %36 = load { double, double }*, { double, double }** %35, align 8
  %37 = bitcast { double, double }* %36 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %37, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  store { double, double }* %25, { double, double }** %35, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  store %Array* %23, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %38 = add i64 %idxElement, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %39 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %40 = call i64 @__quantum__rt__array_get_size_1d(%Array* %39)
  %41 = sub i64 %40, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %42 = phi i64 [ 0, %exit__3 ], [ %48, %exiting__4 ]
  %43 = icmp sle i64 %42, %41
  br i1 %43, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 %42)
  %45 = bitcast i8* %44 to { double, double }**
  %46 = load { double, double }*, { double, double }** %45, align 8
  %47 = bitcast { double, double }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %48 = add i64 %42, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 -1)
  %49 = bitcast { double, double }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %49, i32 -1)
  ret %Array* %39
}

define internal %Array* @Microsoft__Quantum__Arrays___48225aed10f34ba69f96daeaaec298eb_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  %9 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %10 = sub i64 %9, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %11 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %11)
  %14 = bitcast i8* %13 to %Array**
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %11, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %17 = icmp slt i64 %0, %9
  br i1 %17, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__2
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__2
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %9, %condFalse__1 ]
  %18 = call { { double, double }*, %Array* }* @Microsoft__Quantum__Core___0aab4b2798864318b174f90c143f7b76_Default__body()
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %20 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %condContinue__1
  %21 = phi i64 [ 0, %condContinue__1 ], [ %31, %exiting__3 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %21)
  %24 = bitcast i8* %23 to { { double, double }*, %Array* }**
  store { { double, double }*, %Array* }* %18, { { double, double }*, %Array* }** %24, align 8
  %25 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %18, i32 0, i32 0
  %26 = load { double, double }*, { double, double }** %25, align 8
  %27 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %18, i32 0, i32 1
  %28 = load %Array*, %Array** %27, align 8
  %29 = bitcast { double, double }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 1)
  %30 = bitcast { { double, double }*, %Array* }* %18 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %21, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %output = alloca %Array*, align 8
  store %Array* %19, %Array** %output, align 8
  %32 = sub i64 %nElements, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %33 = phi i64 [ 0, %exit__3 ], [ %44, %exiting__4 ]
  %34 = icmp sle i64 %33, %32
  br i1 %34, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %33)
  %36 = bitcast i8* %35 to { { double, double }*, %Array* }**
  %37 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %36, align 8
  %38 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %37, i32 0, i32 0
  %39 = load { double, double }*, { double, double }** %38, align 8
  %40 = bitcast { double, double }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  %41 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %37, i32 0, i32 1
  %42 = load %Array*, %Array** %41, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 1)
  %43 = bitcast { { double, double }*, %Array* }* %37 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %44 = add i64 %33, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 1)
  %45 = sub i64 %nElements, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idxElement = phi i64 [ 0, %exit__4 ], [ %69, %exiting__5 ]
  %46 = icmp sle i64 %idxElement, %45
  br i1 %46, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %47 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  %48 = call %Array* @__quantum__rt__array_copy(%Array* %47, i1 false)
  %49 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }*, %Array* }* getelementptr ({ { double, double }*, %Array* }, { { double, double }*, %Array* }* null, i32 1) to i64))
  %50 = bitcast %Tuple* %49 to { { double, double }*, %Array* }*
  %51 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %50, i32 0, i32 0
  %52 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %50, i32 0, i32 1
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %54 = bitcast i8* %53 to { double, double }**
  %55 = load { double, double }*, { double, double }** %54, align 8
  %56 = bitcast { double, double }* %55 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 1)
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %58 = bitcast i8* %57 to %Array**
  %59 = load %Array*, %Array** %58, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 1)
  store { double, double }* %55, { double, double }** %51, align 8
  store %Array* %59, %Array** %52, align 8
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %48, i64 %idxElement)
  %61 = bitcast i8* %60 to { { double, double }*, %Array* }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %59, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %49, i32 1)
  %62 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %61, align 8
  %63 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %62, i32 0, i32 0
  %64 = load { double, double }*, { double, double }** %63, align 8
  %65 = bitcast { double, double }* %64 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %65, i32 -1)
  %66 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %62, i32 0, i32 1
  %67 = load %Array*, %Array** %66, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %67, i32 -1)
  %68 = bitcast { { double, double }*, %Array* }* %62 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %68, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %67, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %68, i32 -1)
  store { { double, double }*, %Array* }* %50, { { double, double }*, %Array* }** %61, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %48, i32 1)
  store %Array* %48, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %47, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %69 = add i64 %idxElement, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %70 = load %Array*, %Array** %output, align 8
  %71 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %18, i32 0, i32 0
  %72 = load { double, double }*, { double, double }** %71, align 8
  %73 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %18, i32 0, i32 1
  %74 = load %Array*, %Array** %73, align 8
  %75 = sub i64 %0, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %76 = phi i64 [ 0, %exit__5 ], [ %82, %exiting__6 ]
  %77 = icmp sle i64 %76, %75
  br i1 %77, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %76)
  %79 = bitcast i8* %78 to { double, double }**
  %80 = load { double, double }*, { double, double }** %79, align 8
  %81 = bitcast { double, double }* %80 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %81, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %82 = add i64 %76, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  %83 = sub i64 %9, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %84 = phi i64 [ 0, %exit__6 ], [ %89, %exiting__7 ]
  %85 = icmp sle i64 %84, %83
  br i1 %85, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %84)
  %87 = bitcast i8* %86 to %Array**
  %88 = load %Array*, %Array** %87, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %88, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %89 = add i64 %84, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %90 = call i64 @__quantum__rt__array_get_size_1d(%Array* %70)
  %91 = sub i64 %90, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %92 = phi i64 [ 0, %exit__7 ], [ %103, %exiting__8 ]
  %93 = icmp sle i64 %92, %91
  br i1 %93, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %70, i64 %92)
  %95 = bitcast i8* %94 to { { double, double }*, %Array* }**
  %96 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %95, align 8
  %97 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %96, i32 0, i32 0
  %98 = load { double, double }*, { double, double }** %97, align 8
  %99 = bitcast { double, double }* %98 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %99, i32 -1)
  %100 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %96, i32 0, i32 1
  %101 = load %Array*, %Array** %100, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %101, i32 -1)
  %102 = bitcast { { double, double }*, %Array* }* %96 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %102, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %103 = add i64 %92, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %70, i32 -1)
  %104 = bitcast { double, double }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %104, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 -1)
  %105 = bitcast { { double, double }*, %Array* }* %18 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %105, i32 -1)
  ret %Array* %70
}

declare %Tuple* @__quantum__rt__tuple_create(i64)

define internal %Array* @Microsoft__Quantum__Arrays___fecc6b109c8843e082edf674e537ccec_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %14 = call { { double, double }*, %Array* }* @Microsoft__Quantum__Core___56dc0bbae7cb4c059b9a7907f38e5111_Default__body()
  %15 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %0)
  %16 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %17)
  %20 = bitcast i8* %19 to { { double, double }*, %Array* }**
  store { { double, double }*, %Array* }* %14, { { double, double }*, %Array* }** %20, align 8
  %21 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %14, i32 0, i32 0
  %22 = load { double, double }*, { double, double }** %21, align 8
  %23 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %14, i32 0, i32 1
  %24 = load %Array*, %Array** %23, align 8
  %25 = bitcast { double, double }* %22 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 1)
  %26 = bitcast { { double, double }*, %Array* }* %14 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %resultArray = alloca %Array*, align 8
  store %Array* %15, %Array** %resultArray, align 8
  %28 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %40, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %15, i64 %29)
  %32 = bitcast i8* %31 to { { double, double }*, %Array* }**
  %33 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %32, align 8
  %34 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %33, i32 0, i32 0
  %35 = load { double, double }*, { double, double }** %34, align 8
  %36 = bitcast { double, double }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i32 1)
  %37 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %33, i32 0, i32 1
  %38 = load %Array*, %Array** %37, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %38, i32 1)
  %39 = bitcast { { double, double }*, %Array* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %39, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %40 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  %41 = call %Range @Microsoft__Quantum__Arrays___a39719eaf9314332afb345cf0f7465a7_IndexRange__body(%Array* %array)
  %42 = extractvalue %Range %41, 0
  %43 = extractvalue %Range %41, 1
  %44 = extractvalue %Range %41, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__3
  %45 = icmp sgt i64 %43, 0
  br label %header__4

header__4:                                        ; preds = %exiting__4, %preheader__1
  %idxElement = phi i64 [ %42, %preheader__1 ], [ %74, %exiting__4 ]
  %46 = icmp sle i64 %idxElement, %44
  %47 = icmp sge i64 %idxElement, %44
  %48 = select i1 %45, i1 %46, i1 %47
  br i1 %48, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %49 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 -1)
  %50 = call %Array* @__quantum__rt__array_copy(%Array* %49, i1 false)
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %52 = bitcast i8* %51 to { { double, double }*, %Array* }**
  %53 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %52, align 8
  %54 = bitcast { { double, double }*, %Array* }* %53 to %Tuple*
  %55 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { double, double }*, %Array* }* }* getelementptr ({ { { double, double }*, %Array* }* }, { { { double, double }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %54, %Tuple* %55)
  %56 = bitcast %Tuple* %55 to { { { double, double }*, %Array* }* }*
  %57 = getelementptr inbounds { { { double, double }*, %Array* }* }, { { { double, double }*, %Array* }* }* %56, i32 0, i32 0
  %58 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %57, align 8
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %50, i64 %idxElement)
  %60 = bitcast i8* %59 to { { double, double }*, %Array* }**
  %61 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %58, i32 0, i32 0
  %62 = load { double, double }*, { double, double }** %61, align 8
  %63 = bitcast { double, double }* %62 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %63, i32 1)
  %64 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %58, i32 0, i32 1
  %65 = load %Array*, %Array** %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 1)
  %66 = bitcast { { double, double }*, %Array* }* %58 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %66, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %63, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %66, i32 1)
  %67 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %60, align 8
  %68 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %67, i32 0, i32 0
  %69 = load { double, double }*, { double, double }** %68, align 8
  %70 = bitcast { double, double }* %69 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i32 -1)
  %71 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %67, i32 0, i32 1
  %72 = load %Array*, %Array** %71, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i32 -1)
  %73 = bitcast { { double, double }*, %Array* }* %67 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %73, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %73, i32 -1)
  store { { double, double }*, %Array* }* %58, { { double, double }*, %Array* }** %60, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 1)
  store %Array* %50, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %63, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %66, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %55, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %74 = add i64 %idxElement, %43
  br label %header__4

exit__4:                                          ; preds = %header__4
  %75 = load %Array*, %Array** %resultArray, align 8
  %76 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %14, i32 0, i32 0
  %77 = load { double, double }*, { double, double }** %76, align 8
  %78 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %14, i32 0, i32 1
  %79 = load %Array*, %Array** %78, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %80 = sub i64 %0, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %81 = phi i64 [ 0, %exit__4 ], [ %92, %exiting__5 ]
  %82 = icmp sle i64 %81, %80
  br i1 %82, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %81)
  %84 = bitcast i8* %83 to { { double, double }*, %Array* }**
  %85 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %84, align 8
  %86 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %85, i32 0, i32 0
  %87 = load { double, double }*, { double, double }** %86, align 8
  %88 = bitcast { double, double }* %87 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %88, i32 -1)
  %89 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %85, i32 0, i32 1
  %90 = load %Array*, %Array** %89, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %90, i32 -1)
  %91 = bitcast { { double, double }*, %Array* }* %85 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %91, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %92 = add i64 %81, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %93 = call i64 @__quantum__rt__array_get_size_1d(%Array* %75)
  %94 = sub i64 %93, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %95 = phi i64 [ 0, %exit__5 ], [ %106, %exiting__6 ]
  %96 = icmp sle i64 %95, %94
  br i1 %96, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %75, i64 %95)
  %98 = bitcast i8* %97 to { { double, double }*, %Array* }**
  %99 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %98, align 8
  %100 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %99, i32 0, i32 0
  %101 = load { double, double }*, { double, double }** %100, align 8
  %102 = bitcast { double, double }* %101 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %102, i32 -1)
  %103 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %99, i32 0, i32 1
  %104 = load %Array*, %Array** %103, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %104, i32 -1)
  %105 = bitcast { { double, double }*, %Array* }* %99 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %105, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %106 = add i64 %95, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %75, i32 -1)
  %107 = bitcast { double, double }* %77 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %107, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 -1)
  %108 = bitcast { { double, double }*, %Array* }* %14 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %108, i32 -1)
  ret %Array* %75
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { double, double }*, %Array* }*
  %1 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %0, i32 0, i32 1
  %3 = load { double, double }*, { double, double }** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = call { { double, double }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body({ double, double }* %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { { { double, double }*, %Array* }* }*
  %7 = getelementptr inbounds { { { double, double }*, %Array* }* }, { { { double, double }*, %Array* }* }* %6, i32 0, i32 0
  store { { double, double }*, %Array* }* %5, { { double, double }*, %Array* }** %7, align 8
  ret void
}

declare void @__quantum__rt__capture_update_reference_count(%Callable*, i32)

declare void @__quantum__rt__callable_update_reference_count(%Callable*, i32)

define internal { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerEncodingData__body(i64 %__Item1__, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, { i64, %Array* }* %0, double %__Item5__) {
entry:
  %1 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i32 0, i32 0
  %2 = load %Array*, %Array** %1, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %5)
  %8 = bitcast i8* %7 to { %Array*, %Array* }**
  %9 = load { %Array*, %Array* }*, { %Array*, %Array* }** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  %14 = bitcast { %Array*, %Array* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %19 = sub i64 %18, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %20)
  %23 = bitcast i8* %22 to { %Array*, %Array* }**
  %24 = load { %Array*, %Array* }*, { %Array*, %Array* }** %23, align 8
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 0
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 1)
  %27 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 1
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  %29 = bitcast { %Array*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %31 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i32 0, i32 2
  %32 = load %Array*, %Array** %31, align 8
  %33 = call i64 @__quantum__rt__array_get_size_1d(%Array* %32)
  %34 = sub i64 %33, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %45, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %35)
  %38 = bitcast i8* %37 to { %Array*, %Array* }**
  %39 = load { %Array*, %Array* }*, { %Array*, %Array* }** %38, align 8
  %40 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 0
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 1)
  %42 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 1
  %43 = load %Array*, %Array** %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 1)
  %44 = bitcast { %Array*, %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %44, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %45 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  %46 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i32 0, i32 3
  %47 = load %Array*, %Array** %46, align 8
  %48 = call i64 @__quantum__rt__array_get_size_1d(%Array* %47)
  %49 = sub i64 %48, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %50 = phi i64 [ 0, %exit__3 ], [ %60, %exiting__4 ]
  %51 = icmp sle i64 %50, %49
  br i1 %51, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %50)
  %53 = bitcast i8* %52 to { %Array*, %Array* }**
  %54 = load { %Array*, %Array* }*, { %Array*, %Array* }** %53, align 8
  %55 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %54, i32 0, i32 0
  %56 = load %Array*, %Array** %55, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %56, i32 1)
  %57 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %54, i32 0, i32 1
  %58 = load %Array*, %Array** %57, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %58, i32 1)
  %59 = bitcast { %Array*, %Array* }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %59, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %60 = add i64 %50, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  %61 = bitcast { %Array*, %Array*, %Array*, %Array* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 1)
  %62 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* getelementptr ({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* null, i32 1) to i64))
  %63 = bitcast %Tuple* %62 to { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }*
  %64 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63, i32 0, i32 0
  %65 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63, i32 0, i32 1
  %66 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63, i32 0, i32 2
  %67 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63, i32 0, i32 3
  store i64 %__Item1__, i64* %64, align 4
  store { %Array*, %Array*, %Array*, %Array* }* %__Item2__, { %Array*, %Array*, %Array*, %Array* }** %65, align 8
  store { i64, %Array* }* %0, { i64, %Array* }** %66, align 8
  store double %__Item5__, double* %67, align 8
  %68 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i32 0, i32 0
  %69 = load %Array*, %Array** %68, align 8
  %70 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i32 0, i32 1
  %71 = load %Array*, %Array** %70, align 8
  %72 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i32 0, i32 2
  %73 = load %Array*, %Array** %72, align 8
  %74 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %__Item2__, i32 0, i32 3
  %75 = load %Array*, %Array** %74, align 8
  %76 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 1
  %77 = load %Array*, %Array** %76, align 8
  %78 = call i64 @__quantum__rt__array_get_size_1d(%Array* %69)
  %79 = sub i64 %78, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %80 = phi i64 [ 0, %exit__4 ], [ %90, %exiting__5 ]
  %81 = icmp sle i64 %80, %79
  br i1 %81, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %69, i64 %80)
  %83 = bitcast i8* %82 to { %Array*, %Array* }**
  %84 = load { %Array*, %Array* }*, { %Array*, %Array* }** %83, align 8
  %85 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %84, i32 0, i32 0
  %86 = load %Array*, %Array** %85, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %86, i32 1)
  %87 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %84, i32 0, i32 1
  %88 = load %Array*, %Array** %87, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %88, i32 1)
  %89 = bitcast { %Array*, %Array* }* %84 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %89, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %90 = add i64 %80, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 1)
  %91 = call i64 @__quantum__rt__array_get_size_1d(%Array* %71)
  %92 = sub i64 %91, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %93 = phi i64 [ 0, %exit__5 ], [ %103, %exiting__6 ]
  %94 = icmp sle i64 %93, %92
  br i1 %94, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %71, i64 %93)
  %96 = bitcast i8* %95 to { %Array*, %Array* }**
  %97 = load { %Array*, %Array* }*, { %Array*, %Array* }** %96, align 8
  %98 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %97, i32 0, i32 0
  %99 = load %Array*, %Array** %98, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %99, i32 1)
  %100 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %97, i32 0, i32 1
  %101 = load %Array*, %Array** %100, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %101, i32 1)
  %102 = bitcast { %Array*, %Array* }* %97 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %102, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %103 = add i64 %93, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i32 1)
  %104 = call i64 @__quantum__rt__array_get_size_1d(%Array* %73)
  %105 = sub i64 %104, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %106 = phi i64 [ 0, %exit__6 ], [ %116, %exiting__7 ]
  %107 = icmp sle i64 %106, %105
  br i1 %107, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 %106)
  %109 = bitcast i8* %108 to { %Array*, %Array* }**
  %110 = load { %Array*, %Array* }*, { %Array*, %Array* }** %109, align 8
  %111 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %110, i32 0, i32 0
  %112 = load %Array*, %Array** %111, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %112, i32 1)
  %113 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %110, i32 0, i32 1
  %114 = load %Array*, %Array** %113, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i32 1)
  %115 = bitcast { %Array*, %Array* }* %110 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %115, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %116 = add i64 %106, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %73, i32 1)
  %117 = call i64 @__quantum__rt__array_get_size_1d(%Array* %75)
  %118 = sub i64 %117, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %119 = phi i64 [ 0, %exit__7 ], [ %129, %exiting__8 ]
  %120 = icmp sle i64 %119, %118
  br i1 %120, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %75, i64 %119)
  %122 = bitcast i8* %121 to { %Array*, %Array* }**
  %123 = load { %Array*, %Array* }*, { %Array*, %Array* }** %122, align 8
  %124 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %123, i32 0, i32 0
  %125 = load %Array*, %Array** %124, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %125, i32 1)
  %126 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %123, i32 0, i32 1
  %127 = load %Array*, %Array** %126, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %127, i32 1)
  %128 = bitcast { %Array*, %Array* }* %123 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %128, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %129 = add i64 %119, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %75, i32 1)
  %130 = bitcast { %Array*, %Array*, %Array*, %Array* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %130, i32 1)
  %131 = call i64 @__quantum__rt__array_get_size_1d(%Array* %77)
  %132 = sub i64 %131, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %133 = phi i64 [ 0, %exit__8 ], [ %144, %exiting__9 ]
  %134 = icmp sle i64 %133, %132
  br i1 %134, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 %133)
  %136 = bitcast i8* %135 to { { double, double }*, %Array* }**
  %137 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %136, align 8
  %138 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %137, i32 0, i32 0
  %139 = load { double, double }*, { double, double }** %138, align 8
  %140 = bitcast { double, double }* %139 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %140, i32 1)
  %141 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %137, i32 0, i32 1
  %142 = load %Array*, %Array** %141, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %142, i32 1)
  %143 = bitcast { { double, double }*, %Array* }* %137 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %143, i32 1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %144 = add i64 %133, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_reference_count(%Array* %77, i32 1)
  %145 = bitcast { i64, %Array* }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %145, i32 1)
  %146 = sub i64 %3, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %147 = phi i64 [ 0, %exit__9 ], [ %157, %exiting__10 ]
  %148 = icmp sle i64 %147, %146
  br i1 %148, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %149 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %147)
  %150 = bitcast i8* %149 to { %Array*, %Array* }**
  %151 = load { %Array*, %Array* }*, { %Array*, %Array* }** %150, align 8
  %152 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %151, i32 0, i32 0
  %153 = load %Array*, %Array** %152, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %153, i32 -1)
  %154 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %151, i32 0, i32 1
  %155 = load %Array*, %Array** %154, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %155, i32 -1)
  %156 = bitcast { %Array*, %Array* }* %151 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %156, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %157 = add i64 %147, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 -1)
  %158 = sub i64 %18, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %159 = phi i64 [ 0, %exit__10 ], [ %169, %exiting__11 ]
  %160 = icmp sle i64 %159, %158
  br i1 %160, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %161 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %159)
  %162 = bitcast i8* %161 to { %Array*, %Array* }**
  %163 = load { %Array*, %Array* }*, { %Array*, %Array* }** %162, align 8
  %164 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %163, i32 0, i32 0
  %165 = load %Array*, %Array** %164, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %165, i32 -1)
  %166 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %163, i32 0, i32 1
  %167 = load %Array*, %Array** %166, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %167, i32 -1)
  %168 = bitcast { %Array*, %Array* }* %163 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %168, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %169 = add i64 %159, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %170 = sub i64 %33, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %171 = phi i64 [ 0, %exit__11 ], [ %181, %exiting__12 ]
  %172 = icmp sle i64 %171, %170
  br i1 %172, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %173 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %171)
  %174 = bitcast i8* %173 to { %Array*, %Array* }**
  %175 = load { %Array*, %Array* }*, { %Array*, %Array* }** %174, align 8
  %176 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %175, i32 0, i32 0
  %177 = load %Array*, %Array** %176, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %177, i32 -1)
  %178 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %175, i32 0, i32 1
  %179 = load %Array*, %Array** %178, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %179, i32 -1)
  %180 = bitcast { %Array*, %Array* }* %175 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %180, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %181 = add i64 %171, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %182 = sub i64 %48, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %183 = phi i64 [ 0, %exit__12 ], [ %193, %exiting__13 ]
  %184 = icmp sle i64 %183, %182
  br i1 %184, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %185 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %183)
  %186 = bitcast i8* %185 to { %Array*, %Array* }**
  %187 = load { %Array*, %Array* }*, { %Array*, %Array* }** %186, align 8
  %188 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %187, i32 0, i32 0
  %189 = load %Array*, %Array** %188, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %189, i32 -1)
  %190 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %187, i32 0, i32 1
  %191 = load %Array*, %Array** %190, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %191, i32 -1)
  %192 = bitcast { %Array*, %Array* }* %187 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %192, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %193 = add i64 %183, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 -1)
  ret { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %63
}

define internal double @Microsoft__PnnlCollaboration__EstimateEnergyFromJWData__body({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %jwEncodedData, i64 %nBitsPrecision, double %trotterStepSize, i64 %trotterOrder) {
entry:
  %0 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %jwEncodedData, i32 0, i32 1
  %1 = load { %Array*, %Array*, %Array*, %Array* }*, { %Array*, %Array*, %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %1, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %5 = sub i64 %4, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %6 = phi i64 [ 0, %entry ], [ %16, %exiting__1 ]
  %7 = icmp sle i64 %6, %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %6)
  %9 = bitcast i8* %8 to { %Array*, %Array* }**
  %10 = load { %Array*, %Array* }*, { %Array*, %Array* }** %9, align 8
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %10, i32 0, i32 0
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %10, i32 0, i32 1
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %15 = bitcast { %Array*, %Array* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %16 = add i64 %6, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %17 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %1, i32 0, i32 1
  %18 = load %Array*, %Array** %17, align 8
  %19 = call i64 @__quantum__rt__array_get_size_1d(%Array* %18)
  %20 = sub i64 %19, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %31, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %21)
  %24 = bitcast i8* %23 to { %Array*, %Array* }**
  %25 = load { %Array*, %Array* }*, { %Array*, %Array* }** %24, align 8
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %25, i32 0, i32 0
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  %28 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %25, i32 0, i32 1
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 1)
  %30 = bitcast { %Array*, %Array* }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %30, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %31 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %32 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %1, i32 0, i32 2
  %33 = load %Array*, %Array** %32, align 8
  %34 = call i64 @__quantum__rt__array_get_size_1d(%Array* %33)
  %35 = sub i64 %34, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %36 = phi i64 [ 0, %exit__2 ], [ %46, %exiting__3 ]
  %37 = icmp sle i64 %36, %35
  br i1 %37, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %36)
  %39 = bitcast i8* %38 to { %Array*, %Array* }**
  %40 = load { %Array*, %Array* }*, { %Array*, %Array* }** %39, align 8
  %41 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %40, i32 0, i32 0
  %42 = load %Array*, %Array** %41, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 1)
  %43 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %40, i32 0, i32 1
  %44 = load %Array*, %Array** %43, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 1)
  %45 = bitcast { %Array*, %Array* }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %46 = add i64 %36, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  %47 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %1, i32 0, i32 3
  %48 = load %Array*, %Array** %47, align 8
  %49 = call i64 @__quantum__rt__array_get_size_1d(%Array* %48)
  %50 = sub i64 %49, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %51 = phi i64 [ 0, %exit__3 ], [ %61, %exiting__4 ]
  %52 = icmp sle i64 %51, %50
  br i1 %52, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %48, i64 %51)
  %54 = bitcast i8* %53 to { %Array*, %Array* }**
  %55 = load { %Array*, %Array* }*, { %Array*, %Array* }** %54, align 8
  %56 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %55, i32 0, i32 0
  %57 = load %Array*, %Array** %56, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %57, i32 1)
  %58 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %55, i32 0, i32 1
  %59 = load %Array*, %Array** %58, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %59, i32 1)
  %60 = bitcast { %Array*, %Array* }* %55 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %60, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %61 = add i64 %51, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %48, i32 1)
  %62 = bitcast { %Array*, %Array*, %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %62, i32 1)
  %63 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %jwEncodedData, i32 0, i32 2
  %inputState = load { i64, %Array* }*, { i64, %Array* }** %63, align 8
  %64 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %inputState, i32 0, i32 1
  %65 = load %Array*, %Array** %64, align 8
  %66 = call i64 @__quantum__rt__array_get_size_1d(%Array* %65)
  %67 = sub i64 %66, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %68 = phi i64 [ 0, %exit__4 ], [ %79, %exiting__5 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %68)
  %71 = bitcast i8* %70 to { { double, double }*, %Array* }**
  %72 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %71, align 8
  %73 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %72, i32 0, i32 0
  %74 = load { double, double }*, { double, double }** %73, align 8
  %75 = bitcast { double, double }* %74 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %75, i32 1)
  %76 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %72, i32 0, i32 1
  %77 = load %Array*, %Array** %76, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %77, i32 1)
  %78 = bitcast { { double, double }*, %Array* }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %78, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %79 = add i64 %68, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 1)
  %80 = bitcast { i64, %Array* }* %inputState to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 1)
  %81 = bitcast { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %jwEncodedData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %81, i32 1)
  %82 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %82)
  %83 = sub i64 %66, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %84 = phi i64 [ 0, %exit__5 ], [ %95, %exiting__6 ]
  %85 = icmp sle i64 %84, %83
  br i1 %85, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %84)
  %87 = bitcast i8* %86 to { { double, double }*, %Array* }**
  %88 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %87, align 8
  %89 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %88, i32 0, i32 0
  %90 = load { double, double }*, { double, double }** %89, align 8
  %91 = bitcast { double, double }* %90 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %91, i32 1)
  %92 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %88, i32 0, i32 1
  %93 = load %Array*, %Array** %92, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %93, i32 1)
  %94 = bitcast { { double, double }*, %Array* }* %88 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %94, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %95 = add i64 %84, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 1)
  %96 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %jwEncodedData, i32 0, i32 3
  %energyOffset = load double, double* %96, align 8
  %97 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %97)
  %98 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { i64, %Array* }* }* getelementptr ({ %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* null, i32 1) to i64))
  %99 = bitcast %Tuple* %98 to { %Callable*, { i64, %Array* }* }*
  %100 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %99, i32 0, i32 0
  %101 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %99, i32 0, i32 1
  %102 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %103 = sub i64 %66, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %104 = phi i64 [ 0, %exit__6 ], [ %115, %exiting__7 ]
  %105 = icmp sle i64 %104, %103
  br i1 %105, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %104)
  %107 = bitcast i8* %106 to { { double, double }*, %Array* }**
  %108 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %107, align 8
  %109 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %108, i32 0, i32 0
  %110 = load { double, double }*, { double, double }** %109, align 8
  %111 = bitcast { double, double }* %110 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %111, i32 1)
  %112 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %108, i32 0, i32 1
  %113 = load %Array*, %Array** %112, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %113, i32 1)
  %114 = bitcast { { double, double }*, %Array* }* %108 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %114, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %115 = add i64 %104, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 1)
  store %Callable* %102, %Callable** %100, align 8
  store { i64, %Array* }* %inputState, { i64, %Array* }** %101, align 8
  %statePrep = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__1__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__1__FunctionTable, %Tuple* %98)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrep, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrep, i32 1)
  %116 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @10, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %116)
  %117 = call { i64, { double, %Callable* }* }* @Microsoft__Quantum__Chemistry__JordanWigner__TrotterStepOracle__body({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %jwEncodedData, double %trotterStepSize, i64 %trotterOrder)
  %118 = getelementptr inbounds { i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* %117, i32 0, i32 0
  %nQubits = load i64, i64* %118, align 4
  %119 = getelementptr inbounds { i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* %117, i32 0, i32 1
  %120 = load { double, %Callable* }*, { double, %Callable* }** %119, align 8
  %121 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %120, i32 0, i32 0
  %rescaleFactor = load double, double* %121, align 8
  %122 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %120, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %122, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %123 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %123)
  %124 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64 }* getelementptr ({ %Callable*, i64 }, { %Callable*, i64 }* null, i32 1) to i64))
  %125 = bitcast %Tuple* %124 to { %Callable*, i64 }*
  %126 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %125, i32 0, i32 0
  %127 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %125, i32 0, i32 1
  %128 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Characterization__RobustPhaseEstimation__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  store %Callable* %128, %Callable** %126, align 8
  store i64 %nBitsPrecision, i64* %127, align 4
  %phaseEstAlgorithm = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__2__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__2__FunctionTable, %Tuple* %124)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  %129 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %129)
  %estPhase = call double @Microsoft__Quantum__Simulation__EstimateEnergy__body(i64 %nQubits, %Callable* %statePrep, %Callable* %oracle, %Callable* %phaseEstAlgorithm)
  %130 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %130)
  %131 = fmul double %estPhase, %rescaleFactor
  %estEnergy = fadd double %131, %energyOffset
  %132 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @14, i32 0, i32 0))
  call void @__quantum__rt__message(%String* %132)
  %133 = sub i64 %4, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %134 = phi i64 [ 0, %exit__7 ], [ %144, %exiting__8 ]
  %135 = icmp sle i64 %134, %133
  br i1 %135, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %136 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %134)
  %137 = bitcast i8* %136 to { %Array*, %Array* }**
  %138 = load { %Array*, %Array* }*, { %Array*, %Array* }** %137, align 8
  %139 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %138, i32 0, i32 0
  %140 = load %Array*, %Array** %139, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %140, i32 -1)
  %141 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %138, i32 0, i32 1
  %142 = load %Array*, %Array** %141, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %142, i32 -1)
  %143 = bitcast { %Array*, %Array* }* %138 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %143, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %144 = add i64 %134, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  %145 = sub i64 %19, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %146 = phi i64 [ 0, %exit__8 ], [ %156, %exiting__9 ]
  %147 = icmp sle i64 %146, %145
  br i1 %147, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %146)
  %149 = bitcast i8* %148 to { %Array*, %Array* }**
  %150 = load { %Array*, %Array* }*, { %Array*, %Array* }** %149, align 8
  %151 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %150, i32 0, i32 0
  %152 = load %Array*, %Array** %151, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %152, i32 -1)
  %153 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %150, i32 0, i32 1
  %154 = load %Array*, %Array** %153, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %154, i32 -1)
  %155 = bitcast { %Array*, %Array* }* %150 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %155, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %156 = add i64 %146, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  %157 = sub i64 %34, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %158 = phi i64 [ 0, %exit__9 ], [ %168, %exiting__10 ]
  %159 = icmp sle i64 %158, %157
  br i1 %159, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %160 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %158)
  %161 = bitcast i8* %160 to { %Array*, %Array* }**
  %162 = load { %Array*, %Array* }*, { %Array*, %Array* }** %161, align 8
  %163 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %162, i32 0, i32 0
  %164 = load %Array*, %Array** %163, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %164, i32 -1)
  %165 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %162, i32 0, i32 1
  %166 = load %Array*, %Array** %165, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %166, i32 -1)
  %167 = bitcast { %Array*, %Array* }* %162 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %167, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %168 = add i64 %158, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 -1)
  %169 = sub i64 %49, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %170 = phi i64 [ 0, %exit__10 ], [ %180, %exiting__11 ]
  %171 = icmp sle i64 %170, %169
  br i1 %171, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %172 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %48, i64 %170)
  %173 = bitcast i8* %172 to { %Array*, %Array* }**
  %174 = load { %Array*, %Array* }*, { %Array*, %Array* }** %173, align 8
  %175 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %174, i32 0, i32 0
  %176 = load %Array*, %Array** %175, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %176, i32 -1)
  %177 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %174, i32 0, i32 1
  %178 = load %Array*, %Array** %177, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %178, i32 -1)
  %179 = bitcast { %Array*, %Array* }* %174 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %179, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %180 = add i64 %170, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %48, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %62, i32 -1)
  %181 = sub i64 %66, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %182 = phi i64 [ 0, %exit__11 ], [ %193, %exiting__12 ]
  %183 = icmp sle i64 %182, %181
  br i1 %183, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %184 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %182)
  %185 = bitcast i8* %184 to { { double, double }*, %Array* }**
  %186 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %185, align 8
  %187 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %186, i32 0, i32 0
  %188 = load { double, double }*, { double, double }** %187, align 8
  %189 = bitcast { double, double }* %188 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %189, i32 -1)
  %190 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %186, i32 0, i32 1
  %191 = load %Array*, %Array** %190, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %191, i32 -1)
  %192 = bitcast { { double, double }*, %Array* }* %186 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %192, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %193 = add i64 %182, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %81, i32 -1)
  %194 = sub i64 %66, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %195 = phi i64 [ 0, %exit__12 ], [ %206, %exiting__13 ]
  %196 = icmp sle i64 %195, %194
  br i1 %196, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %197 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %195)
  %198 = bitcast i8* %197 to { { double, double }*, %Array* }**
  %199 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %198, align 8
  %200 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %199, i32 0, i32 0
  %201 = load { double, double }*, { double, double }** %200, align 8
  %202 = bitcast { double, double }* %201 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %202, i32 -1)
  %203 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %199, i32 0, i32 1
  %204 = load %Array*, %Array** %203, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %204, i32 -1)
  %205 = bitcast { { double, double }*, %Array* }* %199 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %205, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %206 = add i64 %195, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrep, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrep, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %82, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %97, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %statePrep, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %statePrep, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %116, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 -1)
  %207 = bitcast { double, %Callable* }* %120 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %207, i32 -1)
  %208 = bitcast { i64, { double, %Callable* }* }* %117 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %208, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %123, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %129, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %130, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %132, i32 -1)
  ret double %estEnergy
}

declare void @__quantum__rt__array_update_reference_count(%Array*, i32)

declare void @__quantum__rt__tuple_update_reference_count(%Tuple*, i32)

declare void @__quantum__rt__string_update_reference_count(%String*, i32)

define internal { %Array*, %Array* }* @Microsoft__Quantum__Chemistry__HTerm__body(%Array* %__Item1__, %Array* %__Item2__) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item2__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Array*, %Array* }*
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  store %Array* %__Item1__, %Array** %2, align 8
  store %Array* %__Item2__, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item1__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item2__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item2__, i32 -1)
  ret { %Array*, %Array* }* %1
}

define internal { { double, double }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerInputState__body({ double, double }* %0, %Array* %__Item3__) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }*, %Array* }* getelementptr ({ { double, double }*, %Array* }, { { double, double }*, %Array* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { { double, double }*, %Array* }*
  %3 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %2, i32 0, i32 1
  store { double, double }* %0, { double, double }** %3, align 8
  store %Array* %__Item3__, %Array** %4, align 8
  %5 = bitcast { double, double }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item3__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i32 -1)
  ret { { double, double }*, %Array* }* %2
}

define internal void @Lifted__PartialApplication__1__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 1
  %2 = load { i64, %Array* }*, { i64, %Array* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Array* }*, %Array* }* getelementptr ({ { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { i64, %Array* }*, %Array* }*
  %8 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %7, i32 0, i32 1
  store { i64, %Array* }* %2, { i64, %Array* }** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Array* }*, %Array* }*
  %1 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %0, i32 0, i32 1
  %3 = load { i64, %Array* }*, { i64, %Array* }** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body({ i64, %Array* }* %3, %Array* %4)
  ret void
}

define internal void @MemoryManagement__1__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 1
  %4 = load { i64, %Array* }*, { i64, %Array* }** %3, align 8
  %5 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %4, i32 0, i32 1
  %6 = load %Array*, %Array** %5, align 8
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %9 = phi i64 [ 0, %entry ], [ %20, %exiting__1 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %9)
  %12 = bitcast i8* %11 to { { double, double }*, %Array* }**
  %13 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %12, align 8
  %14 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %13, i32 0, i32 0
  %15 = load { double, double }*, { double, double }** %14, align 8
  %16 = bitcast { double, double }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 %count-change)
  %17 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %13, i32 0, i32 1
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 %count-change)
  %19 = bitcast { { double, double }*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 %count-change)
  %21 = bitcast { i64, %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__1__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { i64, %Array* }* }, { %Callable*, { i64, %Array* }* }* %0, i32 0, i32 1
  %4 = load { i64, %Array* }*, { i64, %Array* }** %3, align 8
  %5 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %4, i32 0, i32 1
  %6 = load %Array*, %Array** %5, align 8
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %9 = phi i64 [ 0, %entry ], [ %20, %exiting__1 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %9)
  %12 = bitcast i8* %11 to { { double, double }*, %Array* }**
  %13 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %12, align 8
  %14 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %13, i32 0, i32 0
  %15 = load { double, double }*, { double, double }** %14, align 8
  %16 = bitcast { double, double }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 %count-change)
  %17 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %13, i32 0, i32 1
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 %count-change)
  %19 = bitcast { { double, double }*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %19, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 %count-change)
  %21 = bitcast { i64, %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

declare void @__quantum__rt__capture_update_alias_count(%Callable*, i32)

declare void @__quantum__rt__callable_update_alias_count(%Callable*, i32)

define internal { i64, { double, %Callable* }* }* @Microsoft__Quantum__Chemistry__JordanWigner__TrotterStepOracle__body({ i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, double %trotterStepSize, i64 %trotterOrder) {
entry:
  %0 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 1
  %data = load { %Array*, %Array*, %Array*, %Array* }*, { %Array*, %Array*, %Array*, %Array* }** %0, align 8
  %1 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 0
  %2 = load %Array*, %Array** %1, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %2)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %5)
  %8 = bitcast i8* %7 to { %Array*, %Array* }**
  %9 = load { %Array*, %Array* }*, { %Array*, %Array* }** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  %14 = bitcast { %Array*, %Array* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call i64 @__quantum__rt__array_get_size_1d(%Array* %17)
  %19 = sub i64 %18, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %20)
  %23 = bitcast i8* %22 to { %Array*, %Array* }**
  %24 = load { %Array*, %Array* }*, { %Array*, %Array* }** %23, align 8
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 0
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 1)
  %27 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 1
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  %29 = bitcast { %Array*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %31 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 2
  %32 = load %Array*, %Array** %31, align 8
  %33 = call i64 @__quantum__rt__array_get_size_1d(%Array* %32)
  %34 = sub i64 %33, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %45, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %35)
  %38 = bitcast i8* %37 to { %Array*, %Array* }**
  %39 = load { %Array*, %Array* }*, { %Array*, %Array* }** %38, align 8
  %40 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 0
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 1)
  %42 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 1
  %43 = load %Array*, %Array** %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %43, i32 1)
  %44 = bitcast { %Array*, %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %44, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %45 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  %46 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 3
  %47 = load %Array*, %Array** %46, align 8
  %48 = call i64 @__quantum__rt__array_get_size_1d(%Array* %47)
  %49 = sub i64 %48, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %50 = phi i64 [ 0, %exit__3 ], [ %60, %exiting__4 ]
  %51 = icmp sle i64 %50, %49
  br i1 %51, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %50)
  %53 = bitcast i8* %52 to { %Array*, %Array* }**
  %54 = load { %Array*, %Array* }*, { %Array*, %Array* }** %53, align 8
  %55 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %54, i32 0, i32 0
  %56 = load %Array*, %Array** %55, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %56, i32 1)
  %57 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %54, i32 0, i32 1
  %58 = load %Array*, %Array** %57, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %58, i32 1)
  %59 = bitcast { %Array*, %Array* }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %59, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %60 = add i64 %50, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  %61 = bitcast { %Array*, %Array*, %Array*, %Array* }* %data to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 1)
  %62 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 2
  %statePrepData = load { i64, %Array* }*, { i64, %Array* }** %62, align 8
  %63 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %statePrepData, i32 0, i32 1
  %64 = load %Array*, %Array** %63, align 8
  %65 = call i64 @__quantum__rt__array_get_size_1d(%Array* %64)
  %66 = sub i64 %65, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %67 = phi i64 [ 0, %exit__4 ], [ %78, %exiting__5 ]
  %68 = icmp sle i64 %67, %66
  br i1 %68, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %67)
  %70 = bitcast i8* %69 to { { double, double }*, %Array* }**
  %71 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %70, align 8
  %72 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %71, i32 0, i32 0
  %73 = load { double, double }*, { double, double }** %72, align 8
  %74 = bitcast { double, double }* %73 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %74, i32 1)
  %75 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %71, i32 0, i32 1
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %77 = bitcast { { double, double }*, %Array* }* %71 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %78 = add i64 %67, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  %79 = bitcast { i64, %Array* }* %statePrepData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  %80 = bitcast { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 1)
  %81 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 0
  %nSpinOrbitals = load i64, i64* %81, align 4
  %82 = sub i64 %3, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %83 = phi i64 [ 0, %exit__5 ], [ %93, %exiting__6 ]
  %84 = icmp sle i64 %83, %82
  br i1 %84, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %83)
  %86 = bitcast i8* %85 to { %Array*, %Array* }**
  %87 = load { %Array*, %Array* }*, { %Array*, %Array* }** %86, align 8
  %88 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %87, i32 0, i32 0
  %89 = load %Array*, %Array** %88, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %89, i32 1)
  %90 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %87, i32 0, i32 1
  %91 = load %Array*, %Array** %90, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %91, i32 1)
  %92 = bitcast { %Array*, %Array* }* %87 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %92, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %93 = add i64 %83, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %94 = sub i64 %18, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %95 = phi i64 [ 0, %exit__6 ], [ %105, %exiting__7 ]
  %96 = icmp sle i64 %95, %94
  br i1 %96, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %95)
  %98 = bitcast i8* %97 to { %Array*, %Array* }**
  %99 = load { %Array*, %Array* }*, { %Array*, %Array* }** %98, align 8
  %100 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %99, i32 0, i32 0
  %101 = load %Array*, %Array** %100, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %101, i32 1)
  %102 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %99, i32 0, i32 1
  %103 = load %Array*, %Array** %102, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 1)
  %104 = bitcast { %Array*, %Array* }* %99 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %105 = add i64 %95, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 1)
  %106 = sub i64 %33, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %107 = phi i64 [ 0, %exit__7 ], [ %117, %exiting__8 ]
  %108 = icmp sle i64 %107, %106
  br i1 %108, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %107)
  %110 = bitcast i8* %109 to { %Array*, %Array* }**
  %111 = load { %Array*, %Array* }*, { %Array*, %Array* }** %110, align 8
  %112 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %111, i32 0, i32 0
  %113 = load %Array*, %Array** %112, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %113, i32 1)
  %114 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %111, i32 0, i32 1
  %115 = load %Array*, %Array** %114, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %115, i32 1)
  %116 = bitcast { %Array*, %Array* }* %111 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %116, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %117 = add i64 %107, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  %118 = sub i64 %48, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %119 = phi i64 [ 0, %exit__8 ], [ %129, %exiting__9 ]
  %120 = icmp sle i64 %119, %118
  br i1 %120, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %121 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %119)
  %122 = bitcast i8* %121 to { %Array*, %Array* }**
  %123 = load { %Array*, %Array* }*, { %Array*, %Array* }** %122, align 8
  %124 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %123, i32 0, i32 0
  %125 = load %Array*, %Array** %124, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %125, i32 1)
  %126 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %123, i32 0, i32 1
  %127 = load %Array*, %Array** %126, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %127, i32 1)
  %128 = bitcast { %Array*, %Array* }* %123 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %128, i32 1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %129 = add i64 %119, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 1)
  %130 = sub i64 %65, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %131 = phi i64 [ 0, %exit__9 ], [ %142, %exiting__10 ]
  %132 = icmp sle i64 %131, %130
  br i1 %132, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %131)
  %134 = bitcast i8* %133 to { { double, double }*, %Array* }**
  %135 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %134, align 8
  %136 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %135, i32 0, i32 0
  %137 = load { double, double }*, { double, double }** %136, align 8
  %138 = bitcast { double, double }* %137 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %138, i32 1)
  %139 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %135, i32 0, i32 1
  %140 = load %Array*, %Array** %139, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %140, i32 1)
  %141 = bitcast { { double, double }*, %Array* }* %135 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %141, i32 1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %142 = add i64 %131, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  %143 = getelementptr inbounds { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }, { i64, { %Array*, %Array*, %Array*, %Array* }*, { i64, %Array* }*, double }* %qSharpData, i32 0, i32 3
  %energyShift = load double, double* %143, align 8
  %generatorSystem = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerGeneratorSystem__body({ %Array*, %Array*, %Array*, %Array* }* %data)
  %144 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %145 = load %Callable*, %Callable** %144, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %145, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %145, i32 1)
  %146 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %146, i32 1)
  %147 = call { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionEvolutionSet__body()
  %evolutionGenerator = call { { %Callable* }*, { i64, %Callable* }* }* @Microsoft__Quantum__Simulation__EvolutionGenerator__body({ %Callable* }* %147, { i64, %Callable* }* %generatorSystem)
  %148 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %149 = load { %Callable* }*, { %Callable* }** %148, align 8
  %150 = getelementptr inbounds { %Callable* }, { %Callable* }* %149, i32 0, i32 0
  %151 = load %Callable*, %Callable** %150, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %151, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %151, i32 1)
  %152 = bitcast { %Callable* }* %149 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %152, i32 1)
  %153 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %154 = load { i64, %Callable* }*, { i64, %Callable* }** %153, align 8
  %155 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %154, i32 0, i32 1
  %156 = load %Callable*, %Callable** %155, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %156, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %156, i32 1)
  %157 = bitcast { i64, %Callable* }* %154 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %157, i32 1)
  %158 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %158, i32 1)
  %159 = call { %Callable* }* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithm__body(double %trotterStepSize, i64 %trotterOrder)
  %160 = getelementptr inbounds { %Callable* }, { %Callable* }* %159, i32 0, i32 0
  %simulationAlgorithm = load %Callable*, %Callable** %160, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %simulationAlgorithm, i32 1)
  %161 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* getelementptr ({ %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* null, i32 1) to i64))
  %162 = bitcast %Tuple* %161 to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %163 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %162, i32 0, i32 0
  %164 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %162, i32 0, i32 1
  %165 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %162, i32 0, i32 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %151, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %151, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %152, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %156, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %156, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %157, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %158, i32 1)
  store %Callable* %simulationAlgorithm, %Callable** %163, align 8
  store double %trotterStepSize, double* %164, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, { { %Callable* }*, { i64, %Callable* }* }** %165, align 8
  %oracle = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__42__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__26__FunctionTable, %Tuple* %161)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %rescaleFactor = fdiv double 1.000000e+00, %trotterStepSize
  %166 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { double, %Callable* }* }* getelementptr ({ i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* null, i32 1) to i64))
  %167 = bitcast %Tuple* %166 to { i64, { double, %Callable* }* }*
  %168 = getelementptr inbounds { i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* %167, i32 0, i32 0
  %169 = getelementptr inbounds { i64, { double, %Callable* }* }, { i64, { double, %Callable* }* }* %167, i32 0, i32 1
  %170 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Callable* }* getelementptr ({ double, %Callable* }, { double, %Callable* }* null, i32 1) to i64))
  %171 = bitcast %Tuple* %170 to { double, %Callable* }*
  %172 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %171, i32 0, i32 0
  %173 = getelementptr inbounds { double, %Callable* }, { double, %Callable* }* %171, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 1)
  store double %rescaleFactor, double* %172, align 8
  store %Callable* %oracle, %Callable** %173, align 8
  store i64 %nSpinOrbitals, i64* %168, align 4
  store { double, %Callable* }* %171, { double, %Callable* }** %169, align 8
  %174 = getelementptr inbounds { %Callable* }, { %Callable* }* %147, i32 0, i32 0
  %175 = load %Callable*, %Callable** %174, align 8
  %176 = sub i64 %3, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %177 = phi i64 [ 0, %exit__10 ], [ %187, %exiting__11 ]
  %178 = icmp sle i64 %177, %176
  br i1 %178, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %179 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %177)
  %180 = bitcast i8* %179 to { %Array*, %Array* }**
  %181 = load { %Array*, %Array* }*, { %Array*, %Array* }** %180, align 8
  %182 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %181, i32 0, i32 0
  %183 = load %Array*, %Array** %182, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %183, i32 -1)
  %184 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %181, i32 0, i32 1
  %185 = load %Array*, %Array** %184, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %185, i32 -1)
  %186 = bitcast { %Array*, %Array* }* %181 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %186, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %187 = add i64 %177, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 -1)
  %188 = sub i64 %18, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %189 = phi i64 [ 0, %exit__11 ], [ %199, %exiting__12 ]
  %190 = icmp sle i64 %189, %188
  br i1 %190, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %191 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %189)
  %192 = bitcast i8* %191 to { %Array*, %Array* }**
  %193 = load { %Array*, %Array* }*, { %Array*, %Array* }** %192, align 8
  %194 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %193, i32 0, i32 0
  %195 = load %Array*, %Array** %194, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %195, i32 -1)
  %196 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %193, i32 0, i32 1
  %197 = load %Array*, %Array** %196, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %197, i32 -1)
  %198 = bitcast { %Array*, %Array* }* %193 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %198, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %199 = add i64 %189, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %200 = sub i64 %33, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %201 = phi i64 [ 0, %exit__12 ], [ %211, %exiting__13 ]
  %202 = icmp sle i64 %201, %200
  br i1 %202, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %203 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %201)
  %204 = bitcast i8* %203 to { %Array*, %Array* }**
  %205 = load { %Array*, %Array* }*, { %Array*, %Array* }** %204, align 8
  %206 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %205, i32 0, i32 0
  %207 = load %Array*, %Array** %206, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %207, i32 -1)
  %208 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %205, i32 0, i32 1
  %209 = load %Array*, %Array** %208, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %209, i32 -1)
  %210 = bitcast { %Array*, %Array* }* %205 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %210, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %211 = add i64 %201, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %212 = sub i64 %48, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %213 = phi i64 [ 0, %exit__13 ], [ %223, %exiting__14 ]
  %214 = icmp sle i64 %213, %212
  br i1 %214, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %215 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %213)
  %216 = bitcast i8* %215 to { %Array*, %Array* }**
  %217 = load { %Array*, %Array* }*, { %Array*, %Array* }** %216, align 8
  %218 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %217, i32 0, i32 0
  %219 = load %Array*, %Array** %218, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %219, i32 -1)
  %220 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %217, i32 0, i32 1
  %221 = load %Array*, %Array** %220, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %221, i32 -1)
  %222 = bitcast { %Array*, %Array* }* %217 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %222, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %223 = add i64 %213, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 -1)
  %224 = sub i64 %65, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %225 = phi i64 [ 0, %exit__14 ], [ %236, %exiting__15 ]
  %226 = icmp sle i64 %225, %224
  br i1 %226, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %227 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %225)
  %228 = bitcast i8* %227 to { { double, double }*, %Array* }**
  %229 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %228, align 8
  %230 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %229, i32 0, i32 0
  %231 = load { double, double }*, { double, double }** %230, align 8
  %232 = bitcast { double, double }* %231 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %232, i32 -1)
  %233 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %229, i32 0, i32 1
  %234 = load %Array*, %Array** %233, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %234, i32 -1)
  %235 = bitcast { { double, double }*, %Array* }* %229 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %235, i32 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %236 = add i64 %225, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 -1)
  %237 = sub i64 %3, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %238 = phi i64 [ 0, %exit__15 ], [ %248, %exiting__16 ]
  %239 = icmp sle i64 %238, %237
  br i1 %239, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %240 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %238)
  %241 = bitcast i8* %240 to { %Array*, %Array* }**
  %242 = load { %Array*, %Array* }*, { %Array*, %Array* }** %241, align 8
  %243 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %242, i32 0, i32 0
  %244 = load %Array*, %Array** %243, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %244, i32 -1)
  %245 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %242, i32 0, i32 1
  %246 = load %Array*, %Array** %245, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %246, i32 -1)
  %247 = bitcast { %Array*, %Array* }* %242 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %247, i32 -1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %248 = add i64 %238, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 -1)
  %249 = sub i64 %18, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %250 = phi i64 [ 0, %exit__16 ], [ %260, %exiting__17 ]
  %251 = icmp sle i64 %250, %249
  br i1 %251, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %252 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %17, i64 %250)
  %253 = bitcast i8* %252 to { %Array*, %Array* }**
  %254 = load { %Array*, %Array* }*, { %Array*, %Array* }** %253, align 8
  %255 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %254, i32 0, i32 0
  %256 = load %Array*, %Array** %255, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %256, i32 -1)
  %257 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %254, i32 0, i32 1
  %258 = load %Array*, %Array** %257, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %258, i32 -1)
  %259 = bitcast { %Array*, %Array* }* %254 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %259, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %260 = add i64 %250, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %261 = sub i64 %33, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %262 = phi i64 [ 0, %exit__17 ], [ %272, %exiting__18 ]
  %263 = icmp sle i64 %262, %261
  br i1 %263, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %264 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %262)
  %265 = bitcast i8* %264 to { %Array*, %Array* }**
  %266 = load { %Array*, %Array* }*, { %Array*, %Array* }** %265, align 8
  %267 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %266, i32 0, i32 0
  %268 = load %Array*, %Array** %267, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %268, i32 -1)
  %269 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %266, i32 0, i32 1
  %270 = load %Array*, %Array** %269, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %270, i32 -1)
  %271 = bitcast { %Array*, %Array* }* %266 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %271, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %272 = add i64 %262, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %273 = sub i64 %48, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %274 = phi i64 [ 0, %exit__18 ], [ %284, %exiting__19 ]
  %275 = icmp sle i64 %274, %273
  br i1 %275, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %276 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %274)
  %277 = bitcast i8* %276 to { %Array*, %Array* }**
  %278 = load { %Array*, %Array* }*, { %Array*, %Array* }** %277, align 8
  %279 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %278, i32 0, i32 0
  %280 = load %Array*, %Array** %279, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %280, i32 -1)
  %281 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %278, i32 0, i32 1
  %282 = load %Array*, %Array** %281, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %282, i32 -1)
  %283 = bitcast { %Array*, %Array* }* %278 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %283, i32 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %284 = add i64 %274, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %61, i32 -1)
  %285 = sub i64 %65, 1
  br label %header__20

header__20:                                       ; preds = %exiting__20, %exit__19
  %286 = phi i64 [ 0, %exit__19 ], [ %297, %exiting__20 ]
  %287 = icmp sle i64 %286, %285
  br i1 %287, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %288 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %64, i64 %286)
  %289 = bitcast i8* %288 to { { double, double }*, %Array* }**
  %290 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %289, align 8
  %291 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %290, i32 0, i32 0
  %292 = load { double, double }*, { double, double }** %291, align 8
  %293 = bitcast { double, double }* %292 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %293, i32 -1)
  %294 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %290, i32 0, i32 1
  %295 = load %Array*, %Array** %294, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %295, i32 -1)
  %296 = bitcast { { double, double }*, %Array* }* %290 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %296, i32 -1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %297 = add i64 %286, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %145, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %145, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %146, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %151, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %151, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %152, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %156, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %156, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %157, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %158, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %simulationAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %simulationAlgorithm, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %145, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %145, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %146, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %175, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %175, i32 -1)
  %298 = bitcast { %Callable* }* %147 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %298, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %151, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %151, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %152, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %156, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %156, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %157, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %158, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %simulationAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %simulationAlgorithm, i32 -1)
  %299 = bitcast { %Callable* }* %159 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %299, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 -1)
  ret { i64, { double, %Callable* }* }* %167
}

define internal void @Lifted__PartialApplication__2__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %arg-tuple to { { %Callable* }*, %Array* }*
  %4 = getelementptr inbounds { { %Callable* }*, %Array* }, { { %Callable* }*, %Array* }* %3, i32 0, i32 0
  %5 = load { %Callable* }*, { %Callable* }** %4, align 8
  %6 = getelementptr inbounds { { %Callable* }*, %Array* }, { { %Callable* }*, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { %Callable* }*, %Array* }* getelementptr ({ i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { i64, { %Callable* }*, %Array* }*
  %10 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %9, i32 0, i32 2
  store i64 %2, i64* %10, align 4
  store { %Callable* }* %5, { %Callable* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Characterization__RobustPhaseEstimation__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, { %Callable* }*, %Array* }*
  %1 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, { %Callable* }*, %Array* }, { i64, { %Callable* }*, %Array* }* %0, i32 0, i32 2
  %4 = load i64, i64* %1, align 4
  %5 = load { %Callable* }*, { %Callable* }** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  %7 = call double @Microsoft__Quantum__Characterization__RobustPhaseEstimation__body(i64 %4, { %Callable* }* %5, %Array* %6)
  %8 = bitcast %Tuple* %result-tuple to { double }*
  %9 = getelementptr inbounds { double }, { double }* %8, i32 0, i32 0
  store double %7, double* %9, align 8
  ret void
}

define internal void @MemoryManagement__2__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__2__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal double @Microsoft__Quantum__Simulation__EstimateEnergy__body(i64 %nQubits, %Callable* %statePrepUnitary, %Callable* %qpeUnitary, %Callable* %phaseEstAlgorithm) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %qpeUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %qpeUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %phaseEst = call double @Microsoft__Quantum__Simulation__EstimateEnergyWithAdiabaticEvolution__body(i64 %nQubits, %Callable* %statePrepUnitary, %Callable* %0, %Callable* %qpeUnitary, %Callable* %phaseEstAlgorithm)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %qpeUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %qpeUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  ret double %phaseEst
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__body({ i64, %Array* }* %stateData, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %stateData, i32 0, i32 1
  %terms = load %Array*, %Array** %0, align 8
  %nTerms = call i64 @__quantum__rt__array_get_size_1d(%Array* %terms)
  %1 = sub i64 %nTerms, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %terms, i32 1)
  %14 = bitcast { i64, %Array* }* %stateData to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %15 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %stateData, i32 0, i32 0
  %stateType = load i64, i64* %15, align 4
  %16 = sub i64 %nTerms, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %28, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %17)
  %20 = bitcast i8* %19 to { { double, double }*, %Array* }**
  %21 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %20, align 8
  %22 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %21, i32 0, i32 0
  %23 = load { double, double }*, { double, double }** %22, align 8
  %24 = bitcast { double, double }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 1)
  %25 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %21, i32 0, i32 1
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 1)
  %27 = bitcast { { double, double }*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %28 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %terms, i32 1)
  %29 = icmp eq i64 %stateType, 2
  br i1 %29, label %then0__1, label %test1__1

then0__1:                                         ; preds = %exit__2
  %30 = call i1 @Microsoft__Quantum__Arrays___877ada3ecf9545a4a953eed2bb32f638_IsEmpty__body(%Array* %terms)
  br i1 %30, label %then0__2, label %test1__2

then0__2:                                         ; preds = %then0__1
  br label %continue__2

test1__2:                                         ; preds = %then0__1
  %31 = icmp eq i64 %nTerms, 1
  br i1 %31, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 0)
  %33 = bitcast i8* %32 to { { double, double }*, %Array* }**
  %34 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %33, align 8
  %35 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %34, i32 0, i32 0
  %coefficient = load { double, double }*, { double, double }** %35, align 8
  %36 = bitcast { double, double }* %coefficient to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i32 1)
  %37 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %34, i32 0, i32 1
  %qubitIndices = load %Array*, %Array** %37, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %qubitIndices, %Array* %qubits)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %36, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  br label %continue__2

else__1:                                          ; preds = %test1__2
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSparseMultiConfigurationalState__body(%Callable* %38, %Array* %terms, %Array* %qubits)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %38, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %38, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %then1__1, %then0__2
  br label %continue__1

test1__1:                                         ; preds = %exit__2
  %39 = icmp eq i64 %stateType, 3
  br i1 %39, label %then1__2, label %continue__1

then1__2:                                         ; preds = %test1__1
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { %Callable*, i64, %Array* }*
  %42 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %41, i32 0, i32 1
  %44 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %41, i32 0, i32 2
  %45 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareTrialState__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %46 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 0)
  %48 = bitcast i8* %47 to { { double, double }*, %Array* }**
  %49 = sub i64 %nTerms, 1
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %49)
  %51 = bitcast i8* %50 to { { double, double }*, %Array* }**
  %52 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %51, align 8
  %53 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %52, i32 0, i32 0
  %54 = load { double, double }*, { double, double }** %53, align 8
  %55 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %52, i32 0, i32 1
  %56 = load %Array*, %Array** %55, align 8
  %57 = bitcast { double, double }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %57, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %56, i32 1)
  %58 = bitcast { { double, double }*, %Array* }* %52 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %58, i32 1)
  store { { double, double }*, %Array* }* %52, { { double, double }*, %Array* }** %48, align 8
  store %Callable* %45, %Callable** %42, align 8
  store i64 2, i64* %43, align 4
  store %Array* %46, %Array** %44, align 8
  %referenceState = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__40__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__25__FunctionTable, %Tuple* %40)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %referenceState, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %referenceState, i32 1)
  %59 = sub i64 %nTerms, 2
  %60 = load %Range, %Range* @EmptyRange, align 4
  %61 = insertvalue %Range %60, i64 0, 0
  %62 = insertvalue %Range %61, i64 1, 1
  %63 = insertvalue %Range %62, i64 %59, 2
  %64 = call %Array* @__quantum__rt__array_slice_1d(%Array* %terms, %Range %63, i1 true)
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareUnitaryCoupledClusterState__body(%Callable* %referenceState, %Array* %64, double 1.000000e+00, %Array* %qubits)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %referenceState, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %referenceState, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %referenceState, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %referenceState, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %64, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then1__2, %test1__1, %continue__2
  %65 = sub i64 %nTerms, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %continue__1
  %66 = phi i64 [ 0, %continue__1 ], [ %77, %exiting__3 ]
  %67 = icmp sle i64 %66, %65
  br i1 %67, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %66)
  %69 = bitcast i8* %68 to { { double, double }*, %Array* }**
  %70 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %69, align 8
  %71 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %70, i32 0, i32 0
  %72 = load { double, double }*, { double, double }** %71, align 8
  %73 = bitcast { double, double }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %73, i32 -1)
  %74 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %70, i32 0, i32 1
  %75 = load %Array*, %Array** %74, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %75, i32 -1)
  %76 = bitcast { { double, double }*, %Array* }* %70 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %76, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %77 = add i64 %66, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %terms, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  %78 = sub i64 %nTerms, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %79 = phi i64 [ 0, %exit__3 ], [ %90, %exiting__4 ]
  %80 = icmp sle i64 %79, %78
  br i1 %80, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %terms, i64 %79)
  %82 = bitcast i8* %81 to { { double, double }*, %Array* }**
  %83 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %82, align 8
  %84 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %83, i32 0, i32 0
  %85 = load { double, double }*, { double, double }** %84, align 8
  %86 = bitcast { double, double }* %85 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %86, i32 -1)
  %87 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %83, i32 0, i32 1
  %88 = load %Array*, %Array** %87, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %88, i32 -1)
  %89 = bitcast { { double, double }*, %Array* }* %83 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %89, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %90 = add i64 %79, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %terms, i32 -1)
  ret void
}

define internal double @Microsoft__Quantum__Characterization__RobustPhaseEstimation__body(i64 %bitsPrecision, { %Callable* }* %oracle, %Array* %targetState) {
entry:
  %0 = getelementptr inbounds { %Callable* }, { %Callable* }* %oracle, i32 0, i32 0
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { %Callable* }* %oracle to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 1)
  %thetaEst = alloca double, align 8
  store double 0.000000e+00, double* %thetaEst, align 8
  %controlQubit = call %Qubit* @__quantum__rt__qubit_allocate()
  %3 = sub i64 %bitsPrecision, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %exponent = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %4 = icmp sle i64 %exponent, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = trunc i64 %exponent to i32
  %6 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %5)
  %power = fptosi double %6 to i64
  %7 = sub i64 %bitsPrecision, %exponent
  %8 = sitofp i64 %7 to double
  %9 = fmul double 2.500000e+00, %8
  %10 = fadd double %9, 5.000000e-01
  %11 = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %10)
  %nRepeats = alloca i64, align 8
  store i64 %11, i64* %nRepeats, align 4
  %12 = srem i64 %11, 2
  %13 = icmp eq i64 %12, 1
  br i1 %13, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %14 = add i64 %11, 1
  store i64 %14, i64* %nRepeats, align 4
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  %pZero = alloca double, align 8
  store double 0.000000e+00, double* %pZero, align 8
  %pPlus = alloca double, align 8
  store double 0.000000e+00, double* %pPlus, align 8
  %15 = load i64, i64* %nRepeats, align 4
  %16 = sub i64 %15, 1
  br label %header__2

exiting__1:                                       ; preds = %exit__2
  %17 = add i64 %exponent, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %controlQubit)
  %18 = load double, double* %thetaEst, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__qubit_release(%Qubit* %controlQubit)
  ret double %18

header__2:                                        ; preds = %exiting__2, %continue__1
  %idxRep = phi i64 [ 0, %continue__1 ], [ %20, %exiting__2 ]
  %19 = icmp sle i64 %idxRep, %16
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  br label %header__3

exiting__2:                                       ; preds = %exit__3
  %20 = add i64 %idxRep, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %21 = load double, double* %pPlus, align 8
  %22 = sitofp i64 %15 to double
  %23 = fdiv double %22, 2.000000e+00
  %y = fsub double %21, %23
  %24 = load double, double* %pZero, align 8
  %25 = sitofp i64 %15 to double
  %26 = fdiv double %25, 2.000000e+00
  %x = fsub double %24, %26
  %deltaTheta = call double @__quantum__qis__arctan2__body(double %y, double %x)
  %27 = load double, double* %thetaEst, align 8
  %28 = sitofp i64 %power to double
  %29 = fmul double %27, %28
  %30 = fsub double %deltaTheta, %29
  %31 = call double @Microsoft__Quantum__Math__PI__body()
  %32 = fmul double 2.000000e+00, %31
  %33 = call double @Microsoft__Quantum__Math__PI__body()
  %34 = fneg double %33
  %delta = call double @Microsoft__Quantum__Math__RealMod__body(double %30, double %32, double %34)
  %35 = sitofp i64 %power to double
  %36 = fdiv double %delta, %35
  %37 = fadd double %27, %36
  store double %37, double* %thetaEst, align 8
  br label %exiting__1

header__3:                                        ; preds = %exiting__3, %body__2
  %idxExperiment = phi i64 [ 0, %body__2 ], [ %52, %exiting__3 ]
  %38 = icmp sle i64 %idxExperiment, 1
  br i1 %38, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %39 = call double @Microsoft__Quantum__Math__PI__body()
  %40 = sitofp i64 %idxExperiment to double
  %41 = fmul double %39, %40
  %42 = fdiv double %41, 2.000000e+00
  %43 = sitofp i64 %power to double
  %rotation = fdiv double %42, %43
  call void @Microsoft__Quantum__Characterization__DiscretePhaseEstimationIteration__body({ %Callable* }* %oracle, i64 %power, double %rotation, %Array* %targetState, %Qubit* %controlQubit)
  %result = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %controlQubit)
  %44 = call %Result* @__quantum__rt__result_get_zero()
  %45 = call i1 @__quantum__rt__result_equal(%Result* %result, %Result* %44)
  br i1 %45, label %then0__2, label %continue__2

then0__2:                                         ; preds = %body__3
  %46 = icmp eq i64 %idxExperiment, 0
  br i1 %46, label %then0__3, label %test1__1

then0__3:                                         ; preds = %then0__2
  %47 = load double, double* %pZero, align 8
  %48 = fadd double %47, 1.000000e+00
  store double %48, double* %pZero, align 8
  br label %continue__3

test1__1:                                         ; preds = %then0__2
  %49 = icmp eq i64 %idxExperiment, 1
  br i1 %49, label %then1__1, label %continue__3

then1__1:                                         ; preds = %test1__1
  %50 = load double, double* %pPlus, align 8
  %51 = fadd double %50, 1.000000e+00
  store double %51, double* %pPlus, align 8
  br label %continue__3

continue__3:                                      ; preds = %then1__1, %test1__1, %then0__3
  br label %continue__2

continue__2:                                      ; preds = %continue__3, %body__3
  call void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %controlQubit)
  call void @__quantum__rt__result_update_reference_count(%Result* %result, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %continue__2
  %52 = add i64 %idxExperiment, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  br label %exiting__2
}

declare void @__quantum__rt__callable_invoke(%Callable*, %Tuple*, %Tuple*)

define internal %Array* @Microsoft__Quantum__Arrays___6b9c50252b0b4b80bfaa0083ad790576_Transposed__body(%Array* %matrix) {
entry:
  %numRows = call i64 @__quantum__rt__array_get_size_1d(%Array* %matrix)
  %0 = sub i64 %numRows, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %matrix, i64 %1)
  %4 = bitcast i8* %3 to %Array**
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %matrix, i32 1)
  %7 = icmp sgt i64 %numRows, 0
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @38, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = call %Array* @Microsoft__Quantum__Arrays___ced3baed58494097ae31e21a99eaf694_Head__body(%Array* %matrix)
  %numColumns = call i64 @__quantum__rt__array_get_size_1d(%Array* %9)
  %10 = icmp sgt i64 %numColumns, 0
  %11 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @39, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %10, %String* %11)
  %12 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @40, i32 0, i32 0))
  call void @Microsoft__Quantum__Arrays___1845b59d14e84c01b452fc64ad9ec56a_RectangularArrayFact__body(%Array* %matrix, %String* %12)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Callable*, %Array* }*
  %15 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %14, i32 0, i32 1
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___23e0decc63d94dd8b19a5b57b39e10f2___QsRef1__ColumnAtUnchecked____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %18 = sub i64 %numRows, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %24, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %matrix, i64 %19)
  %22 = bitcast i8* %21 to %Array**
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %24 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %matrix, i32 1)
  store %Callable* %17, %Callable** %15, align 8
  store %Array* %matrix, %Array** %16, align 8
  %25 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__32__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__20__FunctionTable, %Tuple* %13)
  %26 = sub i64 %numColumns, 1
  %27 = call %Array* @Microsoft__Quantum__Arrays__SequenceI__body(i64 0, i64 %26)
  %28 = call %Array* @Microsoft__Quantum__Arrays___940558cbed1c4edd9f6f2f3091fed9bb_Mapped__body(%Callable* %25, %Array* %27)
  %29 = sub i64 %numRows, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %30 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %matrix, i64 %30)
  %33 = bitcast i8* %32 to %Array**
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %30, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %matrix, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %11, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %25, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  ret %Array* %28
}

define internal i1 @Microsoft__Quantum__Arrays___a41cb6256a484974909f3c9385a9981b_IsEmpty__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = icmp eq i64 %0, 0
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret i1 %1
}

define internal %Array* @Microsoft__Quantum__Arrays___2d3f5027aec4451baf2db9e0bf00fb4c_Transposed__body(%Array* %matrix) {
entry:
  %numRows = call i64 @__quantum__rt__array_get_size_1d(%Array* %matrix)
  %0 = sub i64 %numRows, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %matrix, i64 %1)
  %4 = bitcast i8* %3 to %Array**
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %matrix, i32 1)
  %7 = icmp sgt i64 %numRows, 0
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @38, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = call %Array* @Microsoft__Quantum__Arrays___e3ad95d105f04e26bbbde536b99ee0d9_Head__body(%Array* %matrix)
  %numColumns = call i64 @__quantum__rt__array_get_size_1d(%Array* %9)
  %10 = icmp sgt i64 %numColumns, 0
  %11 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @39, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %10, %String* %11)
  %12 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @40, i32 0, i32 0))
  call void @Microsoft__Quantum__Arrays___a6a86c9b424445d0ad84bc5b79eee666_RectangularArrayFact__body(%Array* %matrix, %String* %12)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Callable*, %Array* }*
  %15 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %14, i32 0, i32 1
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___de292543ed1b402cbbe87ae86caabb95___QsRef1__ColumnAtUnchecked____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %18 = sub i64 %numRows, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %24, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %matrix, i64 %19)
  %22 = bitcast i8* %21 to %Array**
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %24 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %matrix, i32 1)
  store %Callable* %17, %Callable** %15, align 8
  store %Array* %matrix, %Array** %16, align 8
  %25 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__31__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__19__FunctionTable, %Tuple* %13)
  %26 = sub i64 %numColumns, 1
  %27 = call %Array* @Microsoft__Quantum__Arrays__SequenceI__body(i64 0, i64 %26)
  %28 = call %Array* @Microsoft__Quantum__Arrays___8351c56a87cb466aa6173570c7555f0f_Mapped__body(%Callable* %25, %Array* %27)
  %29 = sub i64 %numRows, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %30 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %matrix, i64 %30)
  %33 = bitcast i8* %32 to %Array**
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %30, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %matrix, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %11, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %25, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  ret %Array* %28
}

define internal %Array* @Microsoft__Quantum__Arrays___20d806f9041644b9ac30413f77307c17_Most__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = sub i64 %0, 2
  %9 = load %Range, %Range* @EmptyRange, align 4
  %10 = insertvalue %Range %9, i64 0, 0
  %11 = insertvalue %Range %10, i64 1, 1
  %12 = insertvalue %Range %11, i64 %8, 2
  %13 = call %Array* @__quantum__rt__array_slice_1d(%Array* %array, %Range %12, i1 true)
  %14 = call i64 @__quantum__rt__array_get_size_1d(%Array* %13)
  %15 = sub i64 %14, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %16)
  %19 = bitcast i8* %18 to %Array**
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 1)
  %22 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %23 = phi i64 [ 0, %exit__2 ], [ %28, %exiting__3 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %23)
  %26 = bitcast i8* %25 to %Array**
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %28 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  ret %Array* %13
}

define internal %Array* @Microsoft__Quantum__Arrays___76614ad2149a474a9c0e36bc169093db_Partitioned__body(%Array* %nElements, %Array* %arr) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %nElements, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %arr, i32 1)
  %0 = call %Array* @Microsoft__Quantum__Core___97faaa7c6c8f4c7eb3a3881200de5f84_Default__body()
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %nElements)
  %2 = add i64 %1, 1
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %2)
  %4 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %5)
  %8 = bitcast i8* %7 to %Array**
  store %Array* %0, %Array** %8, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %output = alloca %Array*, align 8
  store %Array* %3, %Array** %output, align 8
  %10 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %11 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %11)
  %14 = bitcast i8* %13 to %Array**
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %11, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %currIdx = alloca i64, align 8
  store i64 0, i64* %currIdx, align 4
  %17 = call %Range @Microsoft__Quantum__Arrays___640ad8af9f2c4eb5858e60c13aac7d35_IndexRange__body(%Array* %nElements)
  %18 = extractvalue %Range %17, 0
  %19 = extractvalue %Range %17, 1
  %20 = extractvalue %Range %17, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__2
  %21 = icmp sgt i64 %19, 0
  br label %header__3

header__3:                                        ; preds = %exiting__3, %preheader__1
  %idx = phi i64 [ %18, %preheader__1 ], [ %56, %exiting__3 ]
  %22 = icmp sle i64 %idx, %20
  %23 = icmp sge i64 %idx, %20
  %24 = select i1 %21, i1 %22, i1 %23
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = load i64, i64* %currIdx, align 4
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %nElements, i64 %idx)
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 4
  %29 = add i64 %25, %28
  %30 = call i64 @__quantum__rt__array_get_size_1d(%Array* %arr)
  %31 = icmp sgt i64 %29, %30
  br i1 %31, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__3
  %32 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @45, i32 0, i32 0))
  %33 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %nElements, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %arr, i32 -1)
  %34 = call i64 @__quantum__rt__array_get_size_1d(%Array* %33)
  %35 = sub i64 %34, 1
  br label %header__4

continue__1:                                      ; preds = %body__3
  %36 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %36, i32 -1)
  %37 = call %Array* @__quantum__rt__array_copy(%Array* %36, i1 false)
  %38 = load i64, i64* %currIdx, align 4
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %nElements, i64 %idx)
  %40 = bitcast i8* %39 to i64*
  %41 = load i64, i64* %40, align 4
  %42 = add i64 %38, %41
  %43 = sub i64 %42, 1
  %44 = load %Range, %Range* @EmptyRange, align 4
  %45 = insertvalue %Range %44, i64 %38, 0
  %46 = insertvalue %Range %45, i64 1, 1
  %47 = insertvalue %Range %46, i64 %43, 2
  %48 = call %Array* @__quantum__rt__array_slice_1d(%Array* %arr, %Range %47, i1 true)
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 %idx)
  %50 = bitcast i8* %49 to %Array**
  call void @__quantum__rt__array_update_alias_count(%Array* %48, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %48, i32 1)
  %51 = load %Array*, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %51, i32 -1)
  store %Array* %48, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %37, i32 1)
  store %Array* %37, %Array** %output, align 8
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %nElements, i64 %idx)
  %53 = bitcast i8* %52 to i64*
  %54 = load i64, i64* %53, align 4
  %55 = add i64 %38, %54
  store i64 %55, i64* %currIdx, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %36, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %48, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %continue__1
  %56 = add i64 %idx, %19
  br label %header__3

exit__3:                                          ; preds = %header__3
  %57 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %57, i32 -1)
  %58 = call %Array* @__quantum__rt__array_copy(%Array* %57, i1 false)
  %59 = load i64, i64* %currIdx, align 4
  %60 = call i64 @__quantum__rt__array_get_size_1d(%Array* %arr)
  %61 = sub i64 %60, 1
  %62 = load %Range, %Range* @EmptyRange, align 4
  %63 = insertvalue %Range %62, i64 %59, 0
  %64 = insertvalue %Range %63, i64 1, 1
  %65 = insertvalue %Range %64, i64 %61, 2
  %66 = call %Array* @__quantum__rt__array_slice_1d(%Array* %arr, %Range %65, i1 true)
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %58, i64 %1)
  %68 = bitcast i8* %67 to %Array**
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %66, i32 1)
  %69 = load %Array*, %Array** %68, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 -1)
  store %Array* %66, %Array** %68, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %58, i32 1)
  store %Array* %58, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %nElements, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %arr, i32 -1)
  %70 = call i64 @__quantum__rt__array_get_size_1d(%Array* %58)
  %71 = sub i64 %70, 1
  br label %header__6

header__4:                                        ; preds = %exiting__4, %then0__1
  %72 = phi i64 [ 0, %then0__1 ], [ %77, %exiting__4 ]
  %73 = icmp sle i64 %72, %35
  br i1 %73, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %72)
  %75 = bitcast i8* %74 to %Array**
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %77 = add i64 %72, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  %78 = sub i64 %34, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %79 = phi i64 [ 0, %exit__4 ], [ %84, %exiting__5 ]
  %80 = icmp sle i64 %79, %78
  br i1 %80, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %79)
  %82 = bitcast i8* %81 to %Array**
  %83 = load %Array*, %Array** %82, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %84 = add i64 %79, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %33, i32 -1)
  call void @__quantum__rt__fail(%String* %32)
  unreachable

header__6:                                        ; preds = %exiting__6, %exit__3
  %85 = phi i64 [ 0, %exit__3 ], [ %90, %exiting__6 ]
  %86 = icmp sle i64 %85, %71
  br i1 %86, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %58, i64 %85)
  %88 = bitcast i8* %87 to %Array**
  %89 = load %Array*, %Array** %88, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %89, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %90 = add i64 %85, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %58, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %57, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %66, i32 -1)
  ret %Array* %58
}

define internal { i64, double, i1 }* @Microsoft__Quantum__Math____QsRef0__ExtendedTruncation____body(double %value) {
entry:
  %truncated = fptosi double %value to i64
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, i1 }* getelementptr ({ i64, double, i1 }, { i64, double, i1 }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i64, double, i1 }*
  %2 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %1, i32 0, i32 1
  %4 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %1, i32 0, i32 2
  %5 = sitofp i64 %truncated to double
  %6 = fsub double %5, %value
  %7 = fcmp oge double %value, 0.000000e+00
  store i64 %truncated, i64* %2, align 4
  store double %6, double* %3, align 8
  store i1 %7, i1* %4, align 1
  ret { i64, double, i1 }* %1
}

define internal double @Microsoft__Quantum__Math__AbsComplex__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %d = call double @Microsoft__Quantum__Math__AbsSquaredComplex__body({ double, double }* %input)
  %1 = call double @__quantum__qis__sqrt__body(double %d)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret double %1
}

define internal double @Microsoft__Quantum__Math__AbsSquaredComplex__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 0
  %real = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 1
  %imaginary = load double, double* %2, align 8
  %3 = fmul double %real, %real
  %4 = fmul double %imaginary, %imaginary
  %5 = fadd double %3, %4
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret double %5
}

declare double @__quantum__qis__sqrt__body(double)

define internal double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 0
  %2 = load double, double* %1, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret double %2
}

define internal double @Microsoft__Quantum__Math__AbsD__body(double %a) {
entry:
  %0 = fcmp olt double %a, 0.000000e+00
  br i1 %0, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %1 = fneg double %a
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %2 = phi double [ %1, %condTrue__1 ], [ %a, %condFalse__1 ]
  ret double %2
}

define internal i64 @Microsoft__Quantum__Math__AbsI__body(i64 %a) {
entry:
  %0 = icmp slt i64 %a, 0
  br i1 %0, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %1 = sub i64 0, %a
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %2 = phi i64 [ %1, %condTrue__1 ], [ %a, %condFalse__1 ]
  ret i64 %2
}

define internal double @Microsoft__Quantum__Math__ArcTan2__body(double %y, double %x) {
entry:
  %0 = call double @__quantum__qis__arctan2__body(double %y, double %x)
  ret double %0
}

declare double @__quantum__qis__arctan2__body(double, double)

define internal double @Microsoft__Quantum__Math__ArgComplex__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 0
  %real = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 1
  %imaginary = load double, double* %2, align 8
  %3 = call double @__quantum__qis__arctan2__body(double %imaginary, double %real)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret double %3
}

define internal double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = getelementptr inbounds { double, double }, { double, double }* %input, i32 0, i32 1
  %2 = load double, double* %1, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret double %2
}

define internal i64 @Microsoft__Quantum__Math__Ceiling__body(double %value) {
entry:
  %0 = call { i64, double, i1 }* @Microsoft__Quantum__Math____QsRef0__ExtendedTruncation____body(double %value)
  %1 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %0, i32 0, i32 0
  %truncated = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %0, i32 0, i32 1
  %remainder = load double, double* %2, align 8
  %3 = getelementptr inbounds { i64, double, i1 }, { i64, double, i1 }* %0, i32 0, i32 2
  %isPositive = load i1, i1* %3, align 1
  %4 = call double @Microsoft__Quantum__Math__AbsD__body(double %remainder)
  %5 = fcmp ole double %4, 1.000000e-15
  br i1 %5, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %6 = bitcast { i64, double, i1 }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret i64 %truncated

else__1:                                          ; preds = %entry
  br i1 %isPositive, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %7 = add i64 %truncated, 1
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %8 = phi i64 [ %7, %condTrue__1 ], [ %truncated, %condFalse__1 ]
  %9 = bitcast { i64, double, i1 }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret i64 %8

continue__1:                                      ; No predecessors!
  %10 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @15, i32 0, i32 0))
  %11 = bitcast { i64, double, i1 }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__fail(%String* %10)
  unreachable
}

declare void @__quantum__rt__fail(%String*)

define internal { double, double }* @Microsoft__Quantum__Math__Complex__body(double %Real, double %Imag) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double, double }*
  %2 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 1
  store double %Real, double* %2, align 8
  store double %Imag, double* %3, align 8
  ret { double, double }* %1
}

define internal { double, double }* @Microsoft__Quantum__Math__ComplexAsComplexPolar__body({ double, double }* %input) {
entry:
  %0 = bitcast { double, double }* %input to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = call double @Microsoft__Quantum__Math__AbsComplex__body({ double, double }* %input)
  %2 = call double @Microsoft__Quantum__Math__ArgComplex__body({ double, double }* %input)
  %3 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %1, double %2)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret { double, double }* %3
}

define internal { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %Magnitude, double %Argument) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double, double }*
  %2 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 1
  store double %Magnitude, double* %2, align 8
  store double %Argument, double* %3, align 8
  ret { double, double }* %1
}

define internal double @Microsoft__Quantum__Math__Cos__body(double %theta) {
entry:
  %0 = call double @__quantum__qis__cos__body(double %theta)
  ret double %0
}

declare double @__quantum__qis__cos__body(double)

define internal double @Microsoft__Quantum__Math__Lg__body(double %input) {
entry:
  %0 = call double @__quantum__qis__log__body(double %input)
  %1 = call double @Microsoft__Quantum__Math__LogOf2__body()
  %2 = fdiv double %0, %1
  ret double %2
}

declare double @__quantum__qis__log__body(double)

define internal double @Microsoft__Quantum__Math__LogOf2__body() {
entry:
  ret double 0x3FE62E42FEFA39EF
}

define internal double @Microsoft__Quantum__Math__Log__body(double %input) {
entry:
  %0 = call double @__quantum__qis__log__body(double %input)
  ret double %0
}

define internal i64 @Microsoft__Quantum__Math__Max__body(%Array* %values) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i32 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 0)
  %1 = bitcast i8* %0 to i64*
  %2 = load i64, i64* %1, align 4
  %max = alloca i64, align 8
  store i64 %2, i64* %max, align 4
  %nTerms = call i64 @__quantum__rt__array_get_size_1d(%Array* %values)
  %3 = sub i64 %nTerms, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %4 = icmp sle i64 %idx, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 4
  %8 = load i64, i64* %max, align 4
  %9 = icmp sgt i64 %7, %8
  br i1 %9, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 4
  store i64 %12, i64* %max, align 4
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %13 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %14 = load i64, i64* %max, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i32 -1)
  ret i64 %14
}

define internal i64 @Microsoft__Quantum__Math__Min__body(%Array* %values) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i32 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 0)
  %1 = bitcast i8* %0 to i64*
  %2 = load i64, i64* %1, align 4
  %min = alloca i64, align 8
  store i64 %2, i64* %min, align 4
  %nTerms = call i64 @__quantum__rt__array_get_size_1d(%Array* %values)
  %3 = sub i64 %nTerms, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %4 = icmp sle i64 %idx, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 4
  %8 = load i64, i64* %min, align 4
  %9 = icmp slt i64 %7, %8
  br i1 %9, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %values, i64 %idx)
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 4
  store i64 %12, i64* %min, align 4
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %13 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %14 = load i64, i64* %min, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %values, i32 -1)
  ret i64 %14
}

define internal i64 @Microsoft__Quantum__Math__MinI__body(i64 %a, i64 %b) {
entry:
  %0 = icmp slt i64 %a, %b
  %1 = select i1 %0, i64 %a, i64 %b
  ret i64 %1
}

define internal double @Microsoft__Quantum__Math__PI__body() {
entry:
  ret double 0x400921FB54442D18
}

define internal double @Microsoft__Quantum__Math__PowD__body(double %x, double %y) {
entry:
  %0 = call double @llvm.pow.f64(double %x, double %y)
  ret double %0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double, double) #0

define internal double @Microsoft__Quantum__Math__RealMod__body(double %value, double %modulo, double %minValue) {
entry:
  %0 = call double @Microsoft__Quantum__Math__PI__body()
  %1 = fmul double 2.000000e+00, %0
  %2 = fsub double %value, %minValue
  %3 = fdiv double %2, %modulo
  %4 = fsub double %3, 5.000000e-01
  %fractionalValue = fmul double %1, %4
  %cosFracValue = call double @__quantum__qis__cos__body(double %fractionalValue)
  %sinFracValue = call double @__quantum__qis__sin__body(double %fractionalValue)
  %5 = call double @__quantum__qis__arctan2__body(double %sinFracValue, double %cosFracValue)
  %6 = call double @Microsoft__Quantum__Math__PI__body()
  %7 = fmul double 2.000000e+00, %6
  %8 = fdiv double %5, %7
  %moduloValue = fadd double 5.000000e-01, %8
  %9 = fmul double %moduloValue, %modulo
  %output = fadd double %9, %minValue
  ret double %output
}

declare double @__quantum__qis__sin__body(double)

define internal double @Microsoft__Quantum__Math__Sin__body(double %theta) {
entry:
  %0 = call double @__quantum__qis__sin__body(double %theta)
  ret double %0
}

define internal double @Microsoft__Quantum__Math__Sqrt__body(double %d) {
entry:
  %0 = call double @__quantum__qis__sqrt__body(double %d)
  ret double %0
}

define internal i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceCP____body(double %tolerance, %Array* %coefficients) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %10)
  %13 = bitcast i8* %12 to { double, double }**
  %coefficient = load { double, double }*, { double, double }** %13, align 8
  %14 = bitcast { double, double }* %coefficient to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  %15 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %coefficient)
  %16 = fcmp ogt double %15, %tolerance
  br i1 %16, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  %17 = sub i64 %0, 1
  br label %header__3

continue__1:                                      ; preds = %body__2
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %18 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %19 = sub i64 %0, 1
  br label %header__4

header__3:                                        ; preds = %exiting__3, %then0__1
  %20 = phi i64 [ 0, %then0__1 ], [ %26, %exiting__3 ]
  %21 = icmp sle i64 %20, %17
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %20)
  %23 = bitcast i8* %22 to { double, double }**
  %24 = load { double, double }*, { double, double }** %23, align 8
  %25 = bitcast { double, double }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %25, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %26 = add i64 %20, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  ret i1 true

header__4:                                        ; preds = %exiting__4, %exit__2
  %27 = phi i64 [ 0, %exit__2 ], [ %33, %exiting__4 ]
  %28 = icmp sle i64 %27, %19
  br i1 %28, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %27)
  %30 = bitcast i8* %29 to { double, double }**
  %31 = load { double, double }*, { double, double }** %30, align 8
  %32 = bitcast { double, double }* %31 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %33 = add i64 %27, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  ret i1 false
}

define internal i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to double*
  %coefficient = load double, double* %5, align 8
  %6 = call double @Microsoft__Quantum__Math__AbsD__body(double %coefficient)
  %7 = fcmp oge double %6, %tolerance
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  ret i1 true

continue__1:                                      ; preds = %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  ret i1 false
}

define internal { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %coefficients) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %newCoefficientsLength = sdiv i64 %0, 2
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %newCoefficientsLength)
  %2 = sub i64 %newCoefficientsLength, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %6 = bitcast i8* %5 to double*
  store double 0.000000e+00, double* %6, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %coefficients0 = alloca %Array*, align 8
  store %Array* %1, %Array** %coefficients0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %newCoefficientsLength)
  %9 = sub i64 %newCoefficientsLength, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %14, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %10)
  %13 = bitcast i8* %12 to double*
  store double 0.000000e+00, double* %13, align 8
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %14 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %coefficients1 = alloca %Array*, align 8
  store %Array* %8, %Array** %coefficients1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %15 = sub i64 %newCoefficientsLength, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxCoeff = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %16 = icmp sle i64 %idxCoeff, %15
  br i1 %16, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %17 = load %Array*, %Array** %coefficients0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %18 = call %Array* @__quantum__rt__array_copy(%Array* %17, i1 false)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %20 = bitcast i8* %19 to double*
  %21 = load double, double* %20, align 8
  %22 = add i64 %idxCoeff, %newCoefficientsLength
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %22)
  %24 = bitcast i8* %23 to double*
  %25 = load double, double* %24, align 8
  %26 = fadd double %21, %25
  %27 = fmul double 5.000000e-01, %26
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %idxCoeff)
  %29 = bitcast i8* %28 to double*
  store double %27, double* %29, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  store %Array* %18, %Array** %coefficients0, align 8
  %30 = load %Array*, %Array** %coefficients1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 -1)
  %31 = call %Array* @__quantum__rt__array_copy(%Array* %30, i1 false)
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %33 = bitcast i8* %32 to double*
  %34 = load double, double* %33, align 8
  %35 = add i64 %idxCoeff, %newCoefficientsLength
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %35)
  %37 = bitcast i8* %36 to double*
  %38 = load double, double* %37, align 8
  %39 = fsub double %34, %38
  %40 = fmul double 5.000000e-01, %39
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %31, i64 %idxCoeff)
  %42 = bitcast i8* %41 to double*
  %43 = load double, double* %42, align 8
  store double %40, double* %42, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 1)
  store %Array* %31, %Array** %coefficients1, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %idxCoeff, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %45 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %46 = bitcast %Tuple* %45 to { %Array*, %Array* }*
  %47 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %46, i32 0, i32 0
  %48 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %46, i32 0, i32 1
  %49 = load %Array*, %Array** %coefficients0, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 1)
  %50 = load %Array*, %Array** %coefficients1, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %50, i32 1)
  store %Array* %49, %Array** %47, align 8
  store %Array* %50, %Array** %48, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %50, i32 -1)
  ret { %Array*, %Array* }* %46
}

declare %Array* @__quantum__rt__array_copy(%Array*, i1)

define internal double @Microsoft__Quantum__Canon____QsRef1__TrotterStepSize____body(i64 %order) {
entry:
  %0 = sitofp i64 %order to double
  %1 = fsub double %0, 1.000000e+00
  %2 = fdiv double 1.000000e+00, %1
  %3 = call double @Microsoft__Quantum__Math__PowD__body(double 4.000000e+00, double %2)
  %4 = fsub double 4.000000e+00, %3
  %5 = fdiv double 1.000000e+00, %4
  ret double %5
}

define internal void @Microsoft__Quantum__Canon__ApplyP__body(i2 %pauli, %Qubit* %target) {
entry:
  %0 = load i2, i2* @PauliX, align 1
  %1 = icmp eq i2 %pauli, %0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic__X__body(%Qubit* %target)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = load i2, i2* @PauliY, align 1
  %3 = icmp eq i2 %pauli, %2
  br i1 %3, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Intrinsic__Y__body(%Qubit* %target)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %4 = load i2, i2* @PauliZ, align 1
  %5 = icmp eq i2 %pauli, %4
  br i1 %5, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @Microsoft__Quantum__Intrinsic__Z__body(%Qubit* %target)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Y__body(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledY____body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Z__body(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledZ____body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyP__adj(i2 %pauli, %Qubit* %target) {
entry:
  %0 = load i2, i2* @PauliX, align 1
  %1 = icmp eq i2 %pauli, %0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic__X__adj(%Qubit* %target)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = load i2, i2* @PauliY, align 1
  %3 = icmp eq i2 %pauli, %2
  br i1 %3, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Intrinsic__Y__adj(%Qubit* %target)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %4 = load i2, i2* @PauliZ, align 1
  %5 = icmp eq i2 %pauli, %4
  br i1 %5, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @Microsoft__Quantum__Intrinsic__Z__adj(%Qubit* %target)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__adj(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic__X__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Y__adj(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic__Y__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Z__adj(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic__Z__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyP__ctl(%Array* %__controlQubits__, { i2, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = load i2, i2* @PauliX, align 1
  %4 = icmp eq i2 %pauli, %3
  br i1 %4, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %__controlQubits__, %Qubit* %target)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %5 = load i2, i2* @PauliY, align 1
  %6 = icmp eq i2 %pauli, %5
  br i1 %6, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Intrinsic__Y__ctl(%Array* %__controlQubits__, %Qubit* %target)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %7 = load i2, i2* @PauliZ, align 1
  %8 = icmp eq i2 %pauli, %7
  br i1 %8, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @Microsoft__Quantum__Intrinsic__Z__ctl(%Array* %__controlQubits__, %Qubit* %target)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %ctls, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  %control = load %Qubit*, %Qubit** %5, align 8
  call void @__quantum__qis__cnot__body(%Qubit* %control, %Qubit* %qubit)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %7 = icmp eq i64 %6, 2
  br i1 %7, label %then2__1, label %else__1

then2__1:                                         ; preds = %test2__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %9 = bitcast i8* %8 to %Qubit**
  %10 = load %Qubit*, %Qubit** %9, align 8
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 1)
  %12 = bitcast i8* %11 to %Qubit**
  %13 = load %Qubit*, %Qubit** %12, align 8
  call void @Microsoft__Quantum__Intrinsic__CCNOT__body(%Qubit* %10, %Qubit* %13, %Qubit* %qubit)
  br label %continue__1

else__1:                                          ; preds = %test2__1
  %14 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_controlled(%Callable* %14)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, %Qubit* }*
  %17 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %16, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 1)
  store %Array* %ctls, %Array** %17, align 8
  store %Qubit* %qubit, %Qubit** %18, align 8
  call void @Microsoft__Quantum__Intrinsic___d032bd2a9ae646cf9b61adf1f6b1e6c1___QsRef36__ApplyWithLessControlsA____body(%Callable* %14, { %Array*, %Qubit* }* %16)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Y__ctl(%Array* %ctls, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledY____body(%Qubit* %qubit)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  %6 = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Canon__CY__body(%Qubit* %6, %Qubit* %qubit)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %8 = icmp eq i64 %7, 2
  br i1 %8, label %then2__1, label %else__1

then2__1:                                         ; preds = %test2__1
  %9 = load i2, i2* @PauliZ, align 1
  %10 = load i2, i2* @PauliY, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____body(%Qubit* %qubit, i2 %9, i2 %10)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %12 = bitcast i8* %11 to %Qubit**
  %13 = load %Qubit*, %Qubit** %12, align 8
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 1)
  %15 = bitcast i8* %14 to %Qubit**
  %16 = load %Qubit*, %Qubit** %15, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__CCZ____body(%Qubit* %13, %Qubit* %16, %Qubit* %qubit)
  %17 = load i2, i2* @PauliZ, align 1
  %18 = load i2, i2* @PauliY, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____adj(%Qubit* %qubit, i2 %17, i2 %18)
  br label %continue__1

else__1:                                          ; preds = %test2__1
  %19 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__Y__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_controlled(%Callable* %19)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, %Qubit* }*
  %22 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 1)
  store %Array* %ctls, %Array** %22, align 8
  store %Qubit* %qubit, %Qubit** %23, align 8
  call void @Microsoft__Quantum__Intrinsic___d032bd2a9ae646cf9b61adf1f6b1e6c1___QsRef36__ApplyWithLessControlsA____body(%Callable* %19, { %Array*, %Qubit* }* %21)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Z__ctl(%Array* %ctls, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledZ____body(%Qubit* %qubit)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  %6 = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyControlledZ____body(%Qubit* %6, %Qubit* %qubit)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %8 = icmp eq i64 %7, 2
  br i1 %8, label %then2__1, label %else__1

then2__1:                                         ; preds = %test2__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %10 = bitcast i8* %9 to %Qubit**
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 1)
  %13 = bitcast i8* %12 to %Qubit**
  %14 = load %Qubit*, %Qubit** %13, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__CCZ____body(%Qubit* %11, %Qubit* %14, %Qubit* %qubit)
  br label %continue__1

else__1:                                          ; preds = %test2__1
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__Z__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, %Qubit* }*
  %18 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %17, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 1)
  store %Array* %ctls, %Array** %18, align 8
  store %Qubit* %qubit, %Qubit** %19, align 8
  call void @Microsoft__Quantum__Intrinsic___d032bd2a9ae646cf9b61adf1f6b1e6c1___QsRef36__ApplyWithLessControlsA____body(%Callable* %15, { %Array*, %Qubit* }* %17)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyP__ctladj(%Array* %__controlQubits__, { i2, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = load i2, i2* @PauliX, align 1
  %4 = icmp eq i2 %pauli, %3
  br i1 %4, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic__X__ctladj(%Array* %__controlQubits__, %Qubit* %target)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %5 = load i2, i2* @PauliY, align 1
  %6 = icmp eq i2 %pauli, %5
  br i1 %6, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Intrinsic__Y__ctladj(%Array* %__controlQubits__, %Qubit* %target)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %7 = load i2, i2* @PauliZ, align 1
  %8 = icmp eq i2 %pauli, %7
  br i1 %8, label %then2__1, label %continue__1

then2__1:                                         ; preds = %test2__1
  call void @Microsoft__Quantum__Intrinsic__Z__ctladj(%Array* %__controlQubits__, %Qubit* %target)
  br label %continue__1

continue__1:                                      ; preds = %then2__1, %test2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Y__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @Microsoft__Quantum__Intrinsic__Y__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Z__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @Microsoft__Quantum__Intrinsic__Z__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %pauli, i1 %bitApply, %Array* %bits, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %nBits = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %0 = call %Array* @Microsoft__Quantum__Arrays___2b4af87d1e2b44f0b17ef8e3f7af01d3_Zipped__body(%Array* %bits, %Array* %qubits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %0)
  %2 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %3)
  %6 = bitcast i8* %5 to { i1, %Qubit* }**
  %7 = load { i1, %Qubit* }*, { i1, %Qubit* }** %6, align 8
  %8 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %7, i32 0, i32 0
  %bit = load i1, i1* %8, align 1
  %9 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %7, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %9, align 8
  %10 = icmp eq i1 %bit, %bitApply
  br i1 %10, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  call void @Microsoft__Quantum__Canon__ApplyP__body(i2 %pauli, %Qubit* %qubit)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %11 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  %12 = sub i64 %1, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %13)
  %16 = bitcast i8* %15 to { i1, %Qubit* }**
  %17 = load { i1, %Qubit* }*, { i1, %Qubit* }** %16, align 8
  %18 = bitcast { i1, %Qubit* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___2b4af87d1e2b44f0b17ef8e3f7af01d3_Zipped__body(%Array* %left, %Array* %right) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %2 = icmp slt i64 %0, %1
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %1, %condFalse__1 ]
  %3 = call { i1, %Qubit* }* @Microsoft__Quantum__Core___0a3b18981fe647c3abac047c9ea87729_Default__body()
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %5 = sub i64 %nElements, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %condContinue__1
  %6 = phi i64 [ 0, %condContinue__1 ], [ %11, %exiting__1 ]
  %7 = icmp sle i64 %6, %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %6)
  %9 = bitcast i8* %8 to { i1, %Qubit* }**
  store { i1, %Qubit* }* %3, { i1, %Qubit* }** %9, align 8
  %10 = bitcast { i1, %Qubit* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %6, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %output = alloca %Array*, align 8
  store %Array* %4, %Array** %output, align 8
  %12 = sub i64 %nElements, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %13)
  %16 = bitcast i8* %15 to { i1, %Qubit* }**
  %17 = load { i1, %Qubit* }*, { i1, %Qubit* }** %16, align 8
  %18 = bitcast { i1, %Qubit* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %20 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idxElement = phi i64 [ 0, %exit__2 ], [ %38, %exiting__3 ]
  %21 = icmp sle i64 %idxElement, %20
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %22, i32 -1)
  %23 = call %Array* @__quantum__rt__array_copy(%Array* %22, i1 false)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, %Qubit* }* getelementptr ({ i1, %Qubit* }, { i1, %Qubit* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { i1, %Qubit* }*
  %26 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %25, i32 0, i32 1
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %29 = bitcast i8* %28 to i1*
  %30 = load i1, i1* %29, align 1
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %32 = bitcast i8* %31 to %Qubit**
  %33 = load %Qubit*, %Qubit** %32, align 8
  store i1 %30, i1* %26, align 1
  store %Qubit* %33, %Qubit** %27, align 8
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %idxElement)
  %35 = bitcast i8* %34 to { i1, %Qubit* }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 1)
  %36 = load { i1, %Qubit* }*, { i1, %Qubit* }** %35, align 8
  %37 = bitcast { i1, %Qubit* }* %36 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %37, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  store { i1, %Qubit* }* %25, { i1, %Qubit* }** %35, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  store %Array* %23, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %38 = add i64 %idxElement, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %39 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %40 = call i64 @__quantum__rt__array_get_size_1d(%Array* %39)
  %41 = sub i64 %40, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %42 = phi i64 [ 0, %exit__3 ], [ %48, %exiting__4 ]
  %43 = icmp sle i64 %42, %41
  br i1 %43, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 %42)
  %45 = bitcast i8* %44 to { i1, %Qubit* }**
  %46 = load { i1, %Qubit* }*, { i1, %Qubit* }** %45, align 8
  %47 = bitcast { i1, %Qubit* }* %46 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %47, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %48 = add i64 %42, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 -1)
  %49 = bitcast { i1, %Qubit* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %49, i32 -1)
  ret %Array* %39
}

define internal void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %pauli, i1 %bitApply, %Array* %bits, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %__qsVar0__nBits__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %0 = call %Array* @Microsoft__Quantum__Arrays___2b4af87d1e2b44f0b17ef8e3f7af01d3_Zipped__body(%Array* %bits, %Array* %qubits)
  %1 = call %Array* @Microsoft__Quantum__Arrays___2b4af87d1e2b44f0b17ef8e3f7af01d3_Zipped__body(%Array* %bits, %Array* %qubits)
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %3 = sub i64 %2, 1
  %4 = load %Range, %Range* @EmptyRange, align 4
  %5 = insertvalue %Range %4, i64 %3, 0
  %6 = insertvalue %Range %5, i64 -1, 1
  %7 = insertvalue %Range %6, i64 0, 2
  %8 = call %Array* @__quantum__rt__array_slice_1d(%Array* %0, %Range %7, i1 true)
  %9 = call i64 @__quantum__rt__array_get_size_1d(%Array* %8)
  %10 = sub i64 %9, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %11 = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %11)
  %14 = bitcast i8* %13 to { i1, %Qubit* }**
  %15 = load { i1, %Qubit* }*, { i1, %Qubit* }** %14, align 8
  %16 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %15, i32 0, i32 0
  %__qsVar1__bit__ = load i1, i1* %16, align 1
  %17 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %15, i32 0, i32 1
  %__qsVar2__qubit__ = load %Qubit*, %Qubit** %17, align 8
  %18 = icmp eq i1 %__qsVar1__bit__, %bitApply
  br i1 %18, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  call void @Microsoft__Quantum__Canon__ApplyP__adj(i2 %pauli, %Qubit* %__qsVar2__qubit__)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %19 = add i64 %11, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  %20 = call i64 @__quantum__rt__array_get_size_1d(%Array* %0)
  %21 = sub i64 %20, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %22 = phi i64 [ 0, %exit__1 ], [ %28, %exiting__2 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %22)
  %25 = bitcast i8* %24 to { i1, %Qubit* }**
  %26 = load { i1, %Qubit* }*, { i1, %Qubit* }** %25, align 8
  %27 = bitcast { i1, %Qubit* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %28 = add i64 %22, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  %29 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %30 = phi i64 [ 0, %exit__2 ], [ %36, %exiting__3 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %30)
  %33 = bitcast i8* %32 to { i1, %Qubit* }**
  %34 = load { i1, %Qubit* }*, { i1, %Qubit* }** %33, align 8
  %35 = bitcast { i1, %Qubit* }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %36 = add i64 %30, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 -1)
  ret void
}

declare %Array* @__quantum__rt__array_slice_1d(%Array*, %Range, i1)

define internal void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__ctl(%Array* %__controlQubits__, { i2, i1, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 1
  %bitApply = load i1, i1* %2, align 1
  %3 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 2
  %bits = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %4 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 3
  %qubits = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %nBits = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %5 = call %Array* @Microsoft__Quantum__Arrays___2b4af87d1e2b44f0b17ef8e3f7af01d3_Zipped__body(%Array* %bits, %Array* %qubits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %7 = sub i64 %6, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %8 = phi i64 [ 0, %entry ], [ %20, %exiting__1 ]
  %9 = icmp sle i64 %8, %7
  br i1 %9, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %5, i64 %8)
  %11 = bitcast i8* %10 to { i1, %Qubit* }**
  %12 = load { i1, %Qubit* }*, { i1, %Qubit* }** %11, align 8
  %13 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %12, i32 0, i32 0
  %bit = load i1, i1* %13, align 1
  %14 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %12, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %14, align 8
  %15 = icmp eq i1 %bit, %bitApply
  br i1 %15, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, %Qubit* }* getelementptr ({ i2, %Qubit* }, { i2, %Qubit* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i2, %Qubit* }*
  %18 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %17, i32 0, i32 1
  store i2 %pauli, i2* %18, align 1
  store %Qubit* %qubit, %Qubit** %19, align 8
  call void @Microsoft__Quantum__Canon__ApplyP__ctl(%Array* %__controlQubits__, { i2, %Qubit* }* %17)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %20 = add i64 %8, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  %21 = sub i64 %6, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %22 = phi i64 [ 0, %exit__1 ], [ %28, %exiting__2 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %5, i64 %22)
  %25 = bitcast i8* %24 to { i1, %Qubit* }**
  %26 = load { i1, %Qubit* }*, { i1, %Qubit* }** %25, align 8
  %27 = bitcast { i1, %Qubit* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %28 = add i64 %22, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__ctladj(%Array* %__controlQubits__, { i2, i1, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 1
  %bitApply = load i1, i1* %2, align 1
  %3 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 2
  %bits = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %4 = getelementptr inbounds { i2, i1, %Array*, %Array* }, { i2, i1, %Array*, %Array* }* %0, i32 0, i32 3
  %qubits = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %__qsVar0__nBits__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %5 = call %Array* @Microsoft__Quantum__Arrays___2b4af87d1e2b44f0b17ef8e3f7af01d3_Zipped__body(%Array* %bits, %Array* %qubits)
  %6 = call %Array* @Microsoft__Quantum__Arrays___2b4af87d1e2b44f0b17ef8e3f7af01d3_Zipped__body(%Array* %bits, %Array* %qubits)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %8 = sub i64 %7, 1
  %9 = load %Range, %Range* @EmptyRange, align 4
  %10 = insertvalue %Range %9, i64 %8, 0
  %11 = insertvalue %Range %10, i64 -1, 1
  %12 = insertvalue %Range %11, i64 0, 2
  %13 = call %Array* @__quantum__rt__array_slice_1d(%Array* %5, %Range %12, i1 true)
  %14 = call i64 @__quantum__rt__array_get_size_1d(%Array* %13)
  %15 = sub i64 %14, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %16 = phi i64 [ 0, %entry ], [ %28, %exiting__1 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %16)
  %19 = bitcast i8* %18 to { i1, %Qubit* }**
  %20 = load { i1, %Qubit* }*, { i1, %Qubit* }** %19, align 8
  %21 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %20, i32 0, i32 0
  %__qsVar1__bit__ = load i1, i1* %21, align 1
  %22 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %20, i32 0, i32 1
  %__qsVar2__qubit__ = load %Qubit*, %Qubit** %22, align 8
  %23 = icmp eq i1 %__qsVar1__bit__, %bitApply
  br i1 %23, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, %Qubit* }* getelementptr ({ i2, %Qubit* }, { i2, %Qubit* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { i2, %Qubit* }*
  %26 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %25, i32 0, i32 1
  store i2 %pauli, i2* %26, align 1
  store %Qubit* %__qsVar2__qubit__, %Qubit** %27, align 8
  call void @Microsoft__Quantum__Canon__ApplyP__ctladj(%Array* %__controlQubits__, { i2, %Qubit* }* %25)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %28 = add i64 %16, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  %29 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %30 = sub i64 %29, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %31 = phi i64 [ 0, %exit__1 ], [ %37, %exiting__2 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %5, i64 %31)
  %34 = bitcast i8* %33 to { i1, %Qubit* }**
  %35 = load { i1, %Qubit* }*, { i1, %Qubit* }** %34, align 8
  %36 = bitcast { i1, %Qubit* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %37 = add i64 %31, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  %38 = sub i64 %7, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %39 = phi i64 [ 0, %exit__2 ], [ %45, %exiting__3 ]
  %40 = icmp sle i64 %39, %38
  br i1 %40, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %39)
  %42 = bitcast i8* %41 to { i1, %Qubit* }**
  %43 = load { i1, %Qubit* }*, { i1, %Qubit* }** %42, align 8
  %44 = bitcast { i1, %Qubit* }* %43 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %44, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %45 = add i64 %39, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call i1 @Microsoft__Quantum__Arrays___698311d0e0c840ceba8029559c3ec895_IsEmpty__body(%Array* %1)
  br i1 %3, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %4 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @16, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__fail(%String* %4)
  unreachable

continue__1:                                      ; preds = %entry
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %6 = trunc i64 %5 to i32
  %7 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %6)
  %8 = fptosi double %7 to i64
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___519dc829a59e4170a314688eb719de0a_Padded__body(i64 %8, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %9 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %coefficients0 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 1)
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  %coefficients1 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 1)
  %12 = sub i64 %5, 2
  %13 = load %Range, %Range* @EmptyRange, align 4
  %14 = insertvalue %Range %13, i64 0, 0
  %15 = insertvalue %Range %14, i64 1, 1
  %16 = insertvalue %Range %15, i64 %12, 2
  %17 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %16, i1 true)
  %18 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %17)
  %19 = sub i64 %5, 1
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %19)
  %21 = bitcast i8* %20 to %Qubit**
  %22 = load %Qubit*, %Qubit** %21, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %18, %Qubit* %22)
  %23 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %24 = icmp eq i64 %23, 2
  br i1 %24, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %26 = bitcast i8* %25 to double*
  %27 = load double, double* %26, align 8
  %28 = call double @Microsoft__Quantum__Math__AbsD__body(double %27)
  %29 = fcmp ogt double %28, %tolerance
  br i1 %29, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  %30 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 0)
  %32 = bitcast i8* %31 to i2*
  %33 = load i2, i2* @PauliI, align 1
  store i2 %33, i2* %32, align 1
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %35 = bitcast i8* %34 to double*
  %36 = load double, double* %35, align 8
  %37 = fmul double 1.000000e+00, %36
  call void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %30, double %37, %Array* %1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %38 = call %Array* @Microsoft__Quantum__Arrays___b4331481875a4693accf310235e9e576_Most__body(%Array* %1)
  %39 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %38)
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients0, { %Array* }* %39)
  %40 = getelementptr inbounds { %Array* }, { %Array* }* %39, i32 0, i32 0
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  %42 = bitcast { %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %43 = getelementptr inbounds { %Array* }, { %Array* }* %18, i32 0, i32 0
  %44 = load %Array*, %Array** %43, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  %45 = bitcast { %Array*, %Array* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  %46 = bitcast { %Array* }* %18 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %46, i32 -1)
  ret void
}

define internal i1 @Microsoft__Quantum__Arrays___698311d0e0c840ceba8029559c3ec895_IsEmpty__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = icmp eq i64 %0, 0
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret i1 %1
}

define internal %Array* @Microsoft__Quantum__Arrays___519dc829a59e4170a314688eb719de0a_Padded__body(i64 %nElementsTotal, double %defaultElement, %Array* %inputArray) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i32 1)
  %nElementsInitial = call i64 @__quantum__rt__array_get_size_1d(%Array* %inputArray)
  %nAbsElementsTotal = call i64 @Microsoft__Quantum__Math__AbsI__body(i64 %nElementsTotal)
  %0 = icmp sge i64 %nAbsElementsTotal, %nElementsInitial
  %1 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @43, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %0, i1 true, %String* %1)
  %nElementsPad = sub i64 %nAbsElementsTotal, %nElementsInitial
  %padArray = call %Array* @Microsoft__Quantum__Arrays___33d7e864a59c4c46a65094ee950d2915_ConstantArray__body(i64 %nElementsPad, double %defaultElement)
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i32 1)
  %2 = icmp sge i64 %nElementsTotal, 0
  br i1 %2, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %3 = call %Array* @__quantum__rt__array_concatenate(%Array* %padArray, %Array* %inputArray)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  %4 = call %Array* @__quantum__rt__array_concatenate(%Array* %inputArray, %Array* %padArray)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %5 = phi %Array* [ %3, %condTrue__1 ], [ %4, %condFalse__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %padArray, i32 -1)
  ret %Array* %5
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.powi.f64.i32(double, i32) #0

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %4 = trunc i64 %3 to i32
  %5 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %4)
  %6 = fptosi double %5 to i64
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___519dc829a59e4170a314688eb719de0a_Padded__body(i64 %6, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 0)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 8
  %12 = call double @Microsoft__Quantum__Math__AbsD__body(double %11)
  %13 = fcmp ogt double %12, %tolerance
  br i1 %13, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  %14 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 0)
  %16 = bitcast i8* %15 to i2*
  %17 = load i2, i2* @PauliZ, align 1
  store i2 %17, i2* %16, align 1
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 0)
  %19 = bitcast i8* %18 to double*
  %20 = load double, double* %19, align 8
  %21 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 0)
  %23 = bitcast i8* %22 to %Qubit**
  store %Qubit* %target, %Qubit** %23, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %14, double %20, %Array* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %then0__1
  br label %continue__1

else__1:                                          ; preds = %entry
  %24 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 0
  %coefficients0 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 1)
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 1
  %coefficients1 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 1)
  %27 = sub i64 %3, 2
  %28 = load %Range, %Range* @EmptyRange, align 4
  %29 = insertvalue %Range %28, i64 0, 0
  %30 = insertvalue %Range %29, i64 1, 1
  %31 = insertvalue %Range %30, i64 %27, 2
  %32 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %31, i1 true)
  %33 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %32)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients0, { %Array* }* %33, %Qubit* %target)
  %34 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients1)
  br i1 %34, label %then0__3, label %continue__3

then0__3:                                         ; preds = %else__1
  %35 = sub i64 %3, 1
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %35)
  %37 = bitcast i8* %36 to %Qubit**
  %38 = load %Qubit*, %Qubit** %37, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %38, %Qubit* %target)
  %39 = sub i64 %3, 2
  %40 = load %Range, %Range* @EmptyRange, align 4
  %41 = insertvalue %Range %40, i64 0, 0
  %42 = insertvalue %Range %41, i64 1, 1
  %43 = insertvalue %Range %42, i64 %39, 2
  %44 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %43, i1 true)
  %45 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %44)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %45, %Qubit* %target)
  %46 = sub i64 %3, 1
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %46)
  %48 = bitcast i8* %47 to %Qubit**
  %49 = load %Qubit*, %Qubit** %48, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %49, %Qubit* %target)
  %50 = getelementptr inbounds { %Array* }, { %Array* }* %45, i32 0, i32 0
  %51 = load %Array*, %Array** %50, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %51, i32 -1)
  %52 = bitcast { %Array* }* %45 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %52, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %else__1
  %53 = getelementptr inbounds { %Array* }, { %Array* }* %33, i32 0, i32 0
  %54 = load %Array*, %Array** %53, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  %55 = bitcast { %Array*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %55, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i32 -1)
  %56 = bitcast { %Array* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %continue__3, %continue__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  ret void
}

define internal { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %__Item1__) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Array* }*
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %1, i32 0, i32 0
  store %Array* %__Item1__, %Array** %2, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item1__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item1__, i32 -1)
  ret { %Array* }* %1
}

define internal void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %paulis, double %theta, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %paulis)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %2 = icmp ne i64 %0, %1
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @33, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call { %Array*, %Array* }* @Microsoft__Quantum__Intrinsic____QsRef36__RemovePauliI____body(%Array* %paulis, %Array* %qubits)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %newPaulis = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %newPaulis, i32 1)
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  %newQubits = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %newQubits, i32 1)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %newPaulis)
  %8 = icmp ne i64 %7, 0
  br i1 %8, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Callable*, double }*
  %11 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %10, i32 0, i32 1
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__R__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %14 = fmul double -2.000000e+00, %theta
  store %Callable* %13, %Callable** %11, align 8
  store double %14, double* %12, align 8
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__27__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %9)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ExpUtil____body(%Array* %newPaulis, double %theta, %Array* %newQubits, %Callable* %15)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  br label %continue__2

else__1:                                          ; preds = %continue__1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyGlobalPhase____body(double %theta)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %then0__2
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %newPaulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %newQubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newPaulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newQubits, i32 -1)
  %16 = bitcast { %Array*, %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___b4331481875a4693accf310235e9e576_Most__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 2
  %2 = load %Range, %Range* @EmptyRange, align 4
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  %6 = call %Array* @__quantum__rt__array_slice_1d(%Array* %array, %Range %5, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  ret %Array* %6
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call i1 @Microsoft__Quantum__Arrays___698311d0e0c840ceba8029559c3ec895_IsEmpty__body(%Array* %1)
  br i1 %3, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %4 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @16, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__fail(%String* %4)
  unreachable

continue__1:                                      ; preds = %entry
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %6 = trunc i64 %5 to i32
  %7 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %6)
  %8 = fptosi double %7 to i64
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___519dc829a59e4170a314688eb719de0a_Padded__body(i64 %8, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 1)
  %9 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %13 = icmp eq i64 %12, 2
  br i1 %13, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %15 = bitcast i8* %14 to double*
  %16 = load double, double* %15, align 8
  %17 = call double @Microsoft__Quantum__Math__AbsD__body(double %16)
  %18 = fcmp ogt double %17, %tolerance
  br i1 %18, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 0)
  %21 = bitcast i8* %20 to i2*
  %22 = load i2, i2* @PauliI, align 1
  store i2 %22, i2* %21, align 1
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %24 = bitcast i8* %23 to double*
  %25 = load double, double* %24, align 8
  %26 = fmul double 1.000000e+00, %25
  call void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %19, double %26, %Array* %1)
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %27 = call %Array* @Microsoft__Quantum__Arrays___b4331481875a4693accf310235e9e576_Most__body(%Array* %1)
  %28 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %27)
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %28)
  %29 = getelementptr inbounds { %Array* }, { %Array* }* %28, i32 0, i32 0
  %30 = load %Array*, %Array** %29, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 -1)
  %31 = bitcast { %Array* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %32 = sub i64 %5, 2
  %33 = load %Range, %Range* @EmptyRange, align 4
  %34 = insertvalue %Range %33, i64 0, 0
  %35 = insertvalue %Range %34, i64 1, 1
  %36 = insertvalue %Range %35, i64 %32, 2
  %37 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %36, i1 true)
  %38 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %37)
  %39 = sub i64 %5, 1
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %39)
  %41 = bitcast i8* %40 to %Qubit**
  %42 = load %Qubit*, %Qubit** %41, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %38, %Qubit* %42)
  %43 = getelementptr inbounds { %Array* }, { %Array* }* %38, i32 0, i32 0
  %44 = load %Array*, %Array** %43, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  %45 = bitcast { %Array*, %Array* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  %46 = bitcast { %Array* }* %38 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %46, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %paulis, double %theta, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = fneg double %theta
  call void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %paulis, double %0, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %coefficients, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %1)
  %4 = trunc i64 %3 to i32
  %5 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %4)
  %6 = fptosi double %5 to i64
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___519dc829a59e4170a314688eb719de0a_Padded__body(i64 %6, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 1)
  %7 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %8 = icmp eq i64 %7, 1
  br i1 %8, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsPadded__, i64 0)
  %10 = bitcast i8* %9 to double*
  %11 = load double, double* %10, align 8
  %12 = call double @Microsoft__Quantum__Math__AbsD__body(double %11)
  %13 = fcmp ogt double %12, %tolerance
  br i1 %13, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  %14 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 0)
  %16 = bitcast i8* %15 to i2*
  %17 = load i2, i2* @PauliZ, align 1
  store i2 %17, i2* %16, align 1
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsPadded__, i64 0)
  %19 = bitcast i8* %18 to double*
  %20 = load double, double* %19, align 8
  %21 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 0)
  %23 = bitcast i8* %22 to %Qubit**
  store %Qubit* %target, %Qubit** %23, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %14, double %20, %Array* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %then0__1
  br label %continue__1

else__1:                                          ; preds = %entry
  %24 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %27 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %__qsVar2__coefficients1__)
  br i1 %27, label %then0__3, label %continue__3

then0__3:                                         ; preds = %else__1
  %28 = sub i64 %3, 1
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %28)
  %30 = bitcast i8* %29 to %Qubit**
  %31 = load %Qubit*, %Qubit** %30, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %31, %Qubit* %target)
  %32 = sub i64 %3, 2
  %33 = load %Range, %Range* @EmptyRange, align 4
  %34 = insertvalue %Range %33, i64 0, 0
  %35 = insertvalue %Range %34, i64 1, 1
  %36 = insertvalue %Range %35, i64 %32, 2
  %37 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %36, i1 true)
  %38 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %37)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %38, %Qubit* %target)
  %39 = sub i64 %3, 1
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %39)
  %41 = bitcast i8* %40 to %Qubit**
  %42 = load %Qubit*, %Qubit** %41, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %42, %Qubit* %target)
  %43 = getelementptr inbounds { %Array* }, { %Array* }* %38, i32 0, i32 0
  %44 = load %Array*, %Array** %43, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  %45 = bitcast { %Array* }* %38 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %else__1
  %46 = sub i64 %3, 2
  %47 = load %Range, %Range* @EmptyRange, align 4
  %48 = insertvalue %Range %47, i64 0, 0
  %49 = insertvalue %Range %48, i64 1, 1
  %50 = insertvalue %Range %49, i64 %46, 2
  %51 = call %Array* @__quantum__rt__array_slice_1d(%Array* %1, %Range %50, i1 true)
  %52 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %51)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %52, %Qubit* %target)
  %53 = getelementptr inbounds { %Array* }, { %Array* }* %52, i32 0, i32 0
  %54 = load %Array*, %Array** %53, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  %55 = bitcast { %Array*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %55, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %51, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i32 -1)
  %56 = bitcast { %Array* }* %52 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %continue__3, %continue__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = call i1 @Microsoft__Quantum__Arrays___698311d0e0c840ceba8029559c3ec895_IsEmpty__body(%Array* %5)
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @16, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__fail(%String* %8)
  unreachable

continue__1:                                      ; preds = %entry
  %9 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %10 = trunc i64 %9 to i32
  %11 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %10)
  %12 = fptosi double %11 to i64
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___519dc829a59e4170a314688eb719de0a_Padded__body(i64 %12, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %13 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 0
  %coefficients0 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 1)
  %15 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 1
  %coefficients1 = load %Array*, %Array** %15, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { double, %Array*, { %Array* }*, %Qubit* }*
  %18 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %17, i32 0, i32 2
  %21 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %17, i32 0, i32 3
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 1)
  %22 = sub i64 %9, 2
  %23 = load %Range, %Range* @EmptyRange, align 4
  %24 = insertvalue %Range %23, i64 0, 0
  %25 = insertvalue %Range %24, i64 1, 1
  %26 = insertvalue %Range %25, i64 %22, 2
  %27 = call %Array* @__quantum__rt__array_slice_1d(%Array* %5, %Range %26, i1 true)
  %28 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %27)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  %29 = sub i64 %9, 1
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %5, i64 %29)
  %31 = bitcast i8* %30 to %Qubit**
  %32 = load %Qubit*, %Qubit** %31, align 8
  store double %tolerance, double* %18, align 8
  store %Array* %coefficients1, %Array** %19, align 8
  store { %Array* }* %28, { %Array* }** %20, align 8
  store %Qubit* %32, %Qubit** %21, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }*, %Qubit* }* %17)
  %33 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %34 = icmp eq i64 %33, 2
  br i1 %34, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %36 = bitcast i8* %35 to double*
  %37 = load double, double* %36, align 8
  %38 = call double @Microsoft__Quantum__Math__AbsD__body(double %37)
  %39 = fcmp ogt double %38, %tolerance
  br i1 %39, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { %Array*, double, %Array* }*
  %42 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %41, i32 0, i32 1
  %44 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %41, i32 0, i32 2
  %45 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %45, i64 0)
  %47 = bitcast i8* %46 to i2*
  %48 = load i2, i2* @PauliI, align 1
  store i2 %48, i2* %47, align 1
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients0, i64 0)
  %50 = bitcast i8* %49 to double*
  %51 = load double, double* %50, align 8
  %52 = fmul double 1.000000e+00, %51
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  store %Array* %45, %Array** %42, align 8
  store double %52, double* %43, align 8
  store %Array* %5, %Array** %44, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %41)
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { double, %Array*, { %Array* }* }*
  %55 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 0
  %56 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 1
  %57 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %54, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 1)
  %58 = call %Array* @Microsoft__Quantum__Arrays___b4331481875a4693accf310235e9e576_Most__body(%Array* %5)
  %59 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %58)
  call void @__quantum__rt__array_update_reference_count(%Array* %58, i32 -1)
  store double %tolerance, double* %55, align 8
  store %Array* %coefficients0, %Array** %56, align 8
  store { %Array* }* %59, { %Array* }** %57, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %54)
  %60 = getelementptr inbounds { %Array* }, { %Array* }* %59, i32 0, i32 0
  %61 = load %Array*, %Array** %60, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i32 -1)
  %62 = bitcast { %Array* }* %59 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %62, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %63 = getelementptr inbounds { %Array* }, { %Array* }* %28, i32 0, i32 0
  %64 = load %Array*, %Array** %63, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  %65 = bitcast { %Array*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %64, i32 -1)
  %66 = bitcast { %Array* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %66, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %controlRegister, { double, %Array*, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %control = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %target = load %Qubit*, %Qubit** %7, align 8
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %9 = add i64 %8, 1
  %10 = trunc i64 %9 to i32
  %11 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %10)
  %12 = fptosi double %11 to i64
  %13 = trunc i64 %8 to i32
  %14 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %13)
  %15 = fptosi double %14 to i64
  %16 = call %Array* @Microsoft__Quantum__Arrays___519dc829a59e4170a314688eb719de0a_Padded__body(i64 %15, double 0.000000e+00, %Array* %coefficients)
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___519dc829a59e4170a314688eb719de0a_Padded__body(i64 %12, double 0.000000e+00, %Array* %16)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %17 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %coefficientsPadded)
  %18 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 0
  %coefficients0 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 1)
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 1
  %coefficients1 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 1)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients0, { %Array* }* %control, %Qubit* %target)
  %20 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %coefficients1)
  br i1 %20, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %tolerance, %Array* %coefficients1, { %Array* }* %control, %Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__X__ctladj(%Array* %controlRegister, %Qubit* %target)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients1, i32 -1)
  %21 = bitcast { %Array*, %Array* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 0
  %paulis = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %2 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 1
  %theta = load double, double* %2, align 8
  %3 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %paulis)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %6 = icmp ne i64 %4, %5
  br i1 %6, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %7 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @33, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__fail(%String* %7)
  unreachable

continue__1:                                      ; preds = %entry
  %8 = call { %Array*, %Array* }* @Microsoft__Quantum__Intrinsic____QsRef36__RemovePauliI____body(%Array* %paulis, %Array* %qubits)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %newPaulis = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %newPaulis, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  %newQubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %newQubits, i32 1)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %newPaulis)
  %12 = icmp ne i64 %11, 0
  br i1 %12, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array*, %Callable* }* getelementptr ({ %Array*, double, %Array*, %Callable* }, { %Array*, double, %Array*, %Callable* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array*, double, %Array*, %Callable* }*
  %15 = getelementptr inbounds { %Array*, double, %Array*, %Callable* }, { %Array*, double, %Array*, %Callable* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { %Array*, double, %Array*, %Callable* }, { %Array*, double, %Array*, %Callable* }* %14, i32 0, i32 1
  %17 = getelementptr inbounds { %Array*, double, %Array*, %Callable* }, { %Array*, double, %Array*, %Callable* }* %14, i32 0, i32 2
  %18 = getelementptr inbounds { %Array*, double, %Array*, %Callable* }, { %Array*, double, %Array*, %Callable* }* %14, i32 0, i32 3
  call void @__quantum__rt__array_update_reference_count(%Array* %newPaulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newQubits, i32 1)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Callable*, double }*
  %21 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %20, i32 0, i32 1
  %23 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__R__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %24 = fmul double -2.000000e+00, %theta
  store %Callable* %23, %Callable** %21, align 8
  store double %24, double* %22, align 8
  %25 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__28__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__16__FunctionTable, %Tuple* %19)
  store %Array* %newPaulis, %Array** %15, align 8
  store double %theta, double* %16, align 8
  store %Array* %newQubits, %Array** %17, align 8
  store %Callable* %25, %Callable** %18, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ExpUtil____ctl(%Array* %__controlQubits__, { %Array*, double, %Array*, %Callable* }* %14)
  call void @__quantum__rt__array_update_reference_count(%Array* %newPaulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newQubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %25, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %25, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  br label %continue__2

else__1:                                          ; preds = %continue__1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyGlobalPhase____ctl(%Array* %__controlQubits__, double %theta)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %then0__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %newPaulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %newQubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newPaulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newQubits, i32 -1)
  %26 = bitcast { %Array*, %Array* }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = call i1 @Microsoft__Quantum__Arrays___698311d0e0c840ceba8029559c3ec895_IsEmpty__body(%Array* %5)
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @16, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__fail(%String* %8)
  unreachable

continue__1:                                      ; preds = %entry
  %9 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %10 = trunc i64 %9 to i32
  %11 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %10)
  %12 = fptosi double %11 to i64
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___519dc829a59e4170a314688eb719de0a_Padded__body(i64 %12, double 0.000000e+00, %Array* %coefficients)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 1)
  %13 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %15 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %15, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsPadded__)
  %17 = icmp eq i64 %16, 2
  br i1 %17, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %19 = bitcast i8* %18 to double*
  %20 = load double, double* %19, align 8
  %21 = call double @Microsoft__Quantum__Math__AbsD__body(double %20)
  %22 = fcmp ogt double %21, %tolerance
  br i1 %22, label %then0__3, label %continue__3

then0__3:                                         ; preds = %then0__2
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, double, %Array* }*
  %25 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %24, i32 0, i32 1
  %27 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %24, i32 0, i32 2
  %28 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 0)
  %30 = bitcast i8* %29 to i2*
  %31 = load i2, i2* @PauliI, align 1
  store i2 %31, i2* %30, align 1
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coefficients0__, i64 0)
  %33 = bitcast i8* %32 to double*
  %34 = load double, double* %33, align 8
  %35 = fmul double 1.000000e+00, %34
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  store %Array* %28, %Array** %25, align 8
  store double %35, double* %26, align 8
  store %Array* %5, %Array** %27, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %24)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  br label %continue__3

continue__3:                                      ; preds = %then0__3, %then0__2
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { double, %Array*, { %Array* }* }*
  %38 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %37, i32 0, i32 1
  %40 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %37, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %41 = call %Array* @Microsoft__Quantum__Arrays___b4331481875a4693accf310235e9e576_Most__body(%Array* %5)
  %42 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %41)
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  store double %tolerance, double* %38, align 8
  store %Array* %__qsVar1__coefficients0__, %Array** %39, align 8
  store { %Array* }* %42, { %Array* }** %40, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %37)
  %43 = getelementptr inbounds { %Array* }, { %Array* }* %42, i32 0, i32 0
  %44 = load %Array*, %Array** %43, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %44, i32 -1)
  %45 = bitcast { %Array* }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__1, %continue__3
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %47 = bitcast %Tuple* %46 to { double, %Array*, { %Array* }*, %Qubit* }*
  %48 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %47, i32 0, i32 0
  %49 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %47, i32 0, i32 1
  %50 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %47, i32 0, i32 2
  %51 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %47, i32 0, i32 3
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %52 = sub i64 %9, 2
  %53 = load %Range, %Range* @EmptyRange, align 4
  %54 = insertvalue %Range %53, i64 0, 0
  %55 = insertvalue %Range %54, i64 1, 1
  %56 = insertvalue %Range %55, i64 %52, 2
  %57 = call %Array* @__quantum__rt__array_slice_1d(%Array* %5, %Range %56, i1 true)
  %58 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %57)
  call void @__quantum__rt__array_update_reference_count(%Array* %57, i32 -1)
  %59 = sub i64 %9, 1
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %5, i64 %59)
  %61 = bitcast i8* %60 to %Qubit**
  %62 = load %Qubit*, %Qubit** %61, align 8
  store double %tolerance, double* %48, align 8
  store %Array* %__qsVar2__coefficients1__, %Array** %49, align 8
  store { %Array* }* %58, { %Array* }** %50, align 8
  store %Qubit* %62, %Qubit** %51, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }*, %Qubit* }* %47)
  %63 = getelementptr inbounds { %Array* }, { %Array* }* %58, i32 0, i32 0
  %64 = load %Array*, %Array** %63, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  %65 = bitcast { %Array*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %64, i32 -1)
  %66 = bitcast { %Array* }* %58 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %66, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %46, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 0
  %paulis = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %2 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 1
  %theta = load double, double* %2, align 8
  %3 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array*, double, %Array* }*
  %6 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 1)
  %9 = fneg double %theta
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store %Array* %paulis, %Array** %6, align 8
  store double %9, double* %7, align 8
  store %Array* %qubits, %Array** %8, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %controlRegister, { double, %Array*, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %control = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %target = load %Qubit*, %Qubit** %7, align 8
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %5)
  %9 = add i64 %8, 1
  %10 = trunc i64 %9 to i32
  %11 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %10)
  %12 = fptosi double %11 to i64
  %13 = trunc i64 %8 to i32
  %14 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %13)
  %15 = fptosi double %14 to i64
  %16 = call %Array* @Microsoft__Quantum__Arrays___519dc829a59e4170a314688eb719de0a_Padded__body(i64 %15, double 0.000000e+00, %Array* %coefficients)
  %__qsVar0__coefficientsPadded__ = call %Array* @Microsoft__Quantum__Arrays___519dc829a59e4170a314688eb719de0a_Padded__body(i64 %12, double 0.000000e+00, %Array* %16)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 1)
  %17 = call { %Array*, %Array* }* @Microsoft__Quantum__Canon____QsRef1__MultiplexZCoefficients____body(%Array* %__qsVar0__coefficientsPadded__)
  %18 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 0
  %__qsVar1__coefficients0__ = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 1)
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %17, i32 0, i32 1
  %__qsVar2__coefficients1__ = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 1)
  %20 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %__qsVar2__coefficients1__)
  br i1 %20, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %controlRegister, %Qubit* %target)
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar2__coefficients1__, { %Array* }* %control, %Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__X__ctladj(%Array* %controlRegister, %Qubit* %target)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %tolerance, %Array* %__qsVar1__coefficients0__, { %Array* }* %control, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsPadded__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__coefficients0__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__coefficients1__, i32 -1)
  %21 = bitcast { %Array*, %Array* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %tolerance, %Array* %coefficients, i2 %pauli, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = load i2, i2* @PauliZ, align 1
  %4 = icmp eq i2 %pauli, %3
  br i1 %4, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, double, %Array*, { %Array* }* }*
  %7 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 2
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 3
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  store %Callable* %11, %Callable** %7, align 8
  store double %tolerance, double* %8, align 8
  store %Array* %coefficients, %Array** %9, align 8
  store { %Array* }* %control, { %Array* }** %10, align 8
  %op = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__3__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__3__FunctionTable, %Tuple* %5)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Qubit* }*
  %14 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %13, i32 0, i32 0
  store %Qubit* %target, %Qubit** %14, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %15 = load i2, i2* @PauliX, align 1
  %16 = icmp eq i2 %pauli, %15
  br i1 %16, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 1
  %21 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 2
  %22 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 3
  %23 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %18, i32 0, i32 4
  %24 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  %25 = load i2, i2* @PauliZ, align 1
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  store %Callable* %24, %Callable** %19, align 8
  store double %tolerance, double* %20, align 8
  store %Array* %coefficients, %Array** %21, align 8
  store i2 %25, i2* %22, align 1
  store { %Array* }* %control, { %Array* }** %23, align 8
  %op__1 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__4__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__4__FunctionTable, %Tuple* %17)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i32 1)
  %26 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @Microsoft__Quantum__Canon___a0281f75a8714dc99fdecb3e13592ae1_ApplyWithCA__body(%Callable* %26, %Callable* %op__1, %Qubit* %target)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %27 = load i2, i2* @PauliY, align 1
  %28 = icmp eq i2 %pauli, %27
  br i1 %28, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i32 0, i32 0
  %32 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i32 0, i32 1
  %33 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i32 0, i32 2
  %34 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i32 0, i32 3
  %35 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %30, i32 0, i32 4
  %36 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  %37 = load i2, i2* @PauliX, align 1
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  store %Callable* %36, %Callable** %31, align 8
  store double %tolerance, double* %32, align 8
  store %Array* %coefficients, %Array** %33, align 8
  store i2 %37, i2* %34, align 1
  store { %Array* }* %control, { %Array* }** %35, align 8
  %op__2 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__5__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__4__FunctionTable, %Tuple* %29)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i32 1)
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %38)
  call void @Microsoft__Quantum__Canon___a0281f75a8714dc99fdecb3e13592ae1_ApplyWithCA__body(%Callable* %38, %Callable* %op__2, %Qubit* %target)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %38, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %38, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %39 = load i2, i2* @PauliI, align 1
  %40 = icmp eq i2 %pauli, %39
  br i1 %40, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__body(double %tolerance, %Array* %coefficients, { %Array* }* %control)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %41 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @17, i32 0, i32 0))
  %42 = load i2, i2* @PauliX, align 1
  %43 = icmp eq i2 %42, %pauli
  br i1 %43, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %44 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @18, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  %45 = load i2, i2* @PauliY, align 1
  %46 = icmp eq i2 %45, %pauli
  br i1 %46, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condFalse__1
  %47 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @19, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condFalse__1
  %48 = load i2, i2* @PauliZ, align 1
  %49 = icmp eq i2 %48, %pauli
  br i1 %49, label %condTrue__3, label %condFalse__3

condTrue__3:                                      ; preds = %condFalse__2
  %50 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @20, i32 0, i32 0))
  br label %condContinue__3

condFalse__3:                                     ; preds = %condFalse__2
  %51 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @21, i32 0, i32 0))
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condTrue__3
  %52 = phi %String* [ %50, %condTrue__3 ], [ %51, %condFalse__3 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condTrue__2
  %53 = phi %String* [ %47, %condTrue__2 ], [ %52, %condContinue__3 ]
  br label %condContinue__1

condContinue__1:                                  ; preds = %condContinue__2, %condTrue__1
  %54 = phi %String* [ %44, %condTrue__1 ], [ %53, %condContinue__2 ]
  %55 = call %String* @__quantum__rt__string_concatenate(%String* %41, %String* %54)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %54, i32 -1)
  %56 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @22, i32 0, i32 0))
  %57 = call %String* @__quantum__rt__string_concatenate(%String* %55, %String* %56)
  call void @__quantum__rt__string_update_reference_count(%String* %55, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %56, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__fail(%String* %57)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__3__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__3__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__3__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__3__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, { %Array* }*, %Qubit* }*
  %1 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %5 = load double, double* %1, align 8
  %6 = load %Array*, %Array** %2, align 8
  %7 = load { %Array* }*, { %Array* }** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__body(double %5, %Array* %6, { %Array* }* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, { %Array* }*, %Qubit* }*
  %1 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %5 = load double, double* %1, align 8
  %6 = load %Array*, %Array** %2, align 8
  %7 = load { %Array* }*, { %Array* }** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__adj(double %5, %Array* %6, { %Array* }* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, { %Array* }*, %Qubit* }*, { double, %Array*, { %Array* }*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctl(%Array* %3, { double, %Array*, { %Array* }*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, { %Array* }*, %Qubit* }*, { double, %Array*, { %Array* }*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__ctladj(%Array* %3, { double, %Array*, { %Array* }*, %Qubit* }* %4)
  ret void
}

define internal void @MemoryManagement__3__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__3__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__4__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__4__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__4__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__4__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %1 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load %Array*, %Array** %2, align 8
  %8 = load i2, i2* %3, align 1
  %9 = load { %Array* }*, { %Array* }** %4, align 8
  %10 = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %6, %Array* %7, i2 %8, { %Array* }* %9, %Qubit* %10)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %1 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load %Array*, %Array** %2, align 8
  %8 = load i2, i2* %3, align 1
  %9 = load { %Array* }*, { %Array* }** %4, align 8
  %10 = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %6, %Array* %7, i2 %8, { %Array* }* %9, %Qubit* %10)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, i2, { %Array* }*, %Qubit* }*, { double, %Array*, i2, { %Array* }*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %3, { double, %Array*, i2, { %Array* }*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, i2, { %Array* }*, %Qubit* }*, { double, %Array*, i2, { %Array* }*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %3, { double, %Array*, i2, { %Array* }*, %Qubit* }* %4)
  ret void
}

define internal void @MemoryManagement__4__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__4__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 %count-change)
  %9 = bitcast { %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___a0281f75a8714dc99fdecb3e13592ae1_ApplyWithCA__body(%Callable* %outerOperation, %Callable* %innerOperation, %Qubit* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Qubit* }*
  %2 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %1, i32 0, i32 0
  store %Qubit* %target, %Qubit** %2, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %0, %Tuple* null)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Qubit* }*
  %5 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %4, i32 0, i32 0
  store %Qubit* %target, %Qubit** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %innerOperation, %Tuple* %3, %Tuple* null)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Qubit* }*
  %9 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %8, i32 0, i32 0
  store %Qubit* %target, %Qubit** %9, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__H__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__H__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Lifted__PartialApplication__5__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__5__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__5__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__5__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__S__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__S__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

declare void @__quantum__rt__callable_make_adjoint(%Callable*)

declare %String* @__quantum__rt__string_concatenate(%String*, %String*)

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %tolerance, %Array* %coefficients, i2 %pauli, { %Array* }* %control, %Qubit* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = load i2, i2* @PauliZ, align 1
  %4 = icmp eq i2 %pauli, %3
  br i1 %4, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, double, %Array*, { %Array* }* }*
  %7 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 2
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %6, i32 0, i32 3
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  store %Callable* %11, %Callable** %7, align 8
  store double %tolerance, double* %8, align 8
  store %Array* %coefficients, %Array** %9, align 8
  store { %Array* }* %control, { %Array* }** %10, align 8
  %__qsVar0__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__6__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__3__FunctionTable, %Tuple* %5)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Qubit* }*
  %15 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %14, i32 0, i32 0
  store %Qubit* %target, %Qubit** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %16 = load i2, i2* @PauliX, align 1
  %17 = icmp eq i2 %pauli, %16
  br i1 %17, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %20 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i32 0, i32 3
  %24 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %19, i32 0, i32 4
  %25 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  %26 = load i2, i2* @PauliZ, align 1
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  store %Callable* %25, %Callable** %20, align 8
  store double %tolerance, double* %21, align 8
  store %Array* %coefficients, %Array** %22, align 8
  store i2 %26, i2* %23, align 1
  store { %Array* }* %control, { %Array* }** %24, align 8
  %__qsVar1__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__7__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__4__FunctionTable, %Tuple* %18)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i32 1)
  %27 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @Microsoft__Quantum__Canon___a0281f75a8714dc99fdecb3e13592ae1_ApplyWithCA__adj(%Callable* %27, %Callable* %__qsVar1__op__, %Qubit* %target)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %28 = load i2, i2* @PauliY, align 1
  %29 = icmp eq i2 %pauli, %28
  br i1 %29, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %32 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i32 0, i32 1
  %34 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i32 0, i32 2
  %35 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i32 0, i32 3
  %36 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %31, i32 0, i32 4
  %37 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  %38 = load i2, i2* @PauliX, align 1
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  store %Callable* %37, %Callable** %32, align 8
  store double %tolerance, double* %33, align 8
  store %Array* %coefficients, %Array** %34, align 8
  store i2 %38, i2* %35, align 1
  store { %Array* }* %control, { %Array* }** %36, align 8
  %__qsVar2__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__8__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__4__FunctionTable, %Tuple* %30)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar2__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i32 1)
  %39 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %39)
  call void @Microsoft__Quantum__Canon___a0281f75a8714dc99fdecb3e13592ae1_ApplyWithCA__adj(%Callable* %39, %Callable* %__qsVar2__op__, %Qubit* %target)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %39, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %39, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %40 = load i2, i2* @PauliI, align 1
  %41 = icmp eq i2 %pauli, %40
  br i1 %41, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__adj(double %tolerance, %Array* %coefficients, { %Array* }* %control)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %42 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @17, i32 0, i32 0))
  %43 = load i2, i2* @PauliX, align 1
  %44 = icmp eq i2 %43, %pauli
  br i1 %44, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %45 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @18, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  %46 = load i2, i2* @PauliY, align 1
  %47 = icmp eq i2 %46, %pauli
  br i1 %47, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condFalse__1
  %48 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @19, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condFalse__1
  %49 = load i2, i2* @PauliZ, align 1
  %50 = icmp eq i2 %49, %pauli
  br i1 %50, label %condTrue__3, label %condFalse__3

condTrue__3:                                      ; preds = %condFalse__2
  %51 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @20, i32 0, i32 0))
  br label %condContinue__3

condFalse__3:                                     ; preds = %condFalse__2
  %52 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @21, i32 0, i32 0))
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condTrue__3
  %53 = phi %String* [ %51, %condTrue__3 ], [ %52, %condFalse__3 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condTrue__2
  %54 = phi %String* [ %48, %condTrue__2 ], [ %53, %condContinue__3 ]
  br label %condContinue__1

condContinue__1:                                  ; preds = %condContinue__2, %condTrue__1
  %55 = phi %String* [ %45, %condTrue__1 ], [ %54, %condContinue__2 ]
  %56 = call %String* @__quantum__rt__string_concatenate(%String* %42, %String* %55)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %55, i32 -1)
  %57 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @22, i32 0, i32 0))
  %58 = call %String* @__quantum__rt__string_concatenate(%String* %56, %String* %57)
  call void @__quantum__rt__string_update_reference_count(%String* %56, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %57, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__fail(%String* %58)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %pauli = load i2, i2* %3, align 1
  %4 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %control = load { %Array* }*, { %Array* }** %4, align 8
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 4
  %target = load %Qubit*, %Qubit** %8, align 8
  %9 = load i2, i2* @PauliZ, align 1
  %10 = icmp eq i2 %pauli, %9
  br i1 %10, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, double, %Array*, { %Array* }* }*
  %13 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 2
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 3
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  store %Callable* %17, %Callable** %13, align 8
  store double %tolerance, double* %14, align 8
  store %Array* %coefficients, %Array** %15, align 8
  store { %Array* }* %control, { %Array* }** %16, align 8
  %op = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__9__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__3__FunctionTable, %Tuple* %11)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, %Qubit* }*
  %21 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %20, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  store %Array* %__controlQubits__, %Array** %21, align 8
  store %Qubit* %target, %Qubit** %22, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %23 = load i2, i2* @PauliX, align 1
  %24 = icmp eq i2 %pauli, %23
  br i1 %24, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %27 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i32 0, i32 0
  %28 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i32 0, i32 1
  %29 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i32 0, i32 2
  %30 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i32 0, i32 3
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i32 0, i32 4
  %32 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  %33 = load i2, i2* @PauliZ, align 1
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  store %Callable* %32, %Callable** %27, align 8
  store double %tolerance, double* %28, align 8
  store %Array* %coefficients, %Array** %29, align 8
  store i2 %33, i2* %30, align 1
  store { %Array* }* %control, { %Array* }** %31, align 8
  %op__1 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__10__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__4__FunctionTable, %Tuple* %25)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i32 1)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Qubit* }* getelementptr ({ %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { %Callable*, %Callable*, %Qubit* }*
  %36 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i32 0, i32 0
  %37 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i32 0, i32 1
  %38 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i32 0, i32 2
  %39 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__1, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i32 1)
  store %Callable* %39, %Callable** %36, align 8
  store %Callable* %op__1, %Callable** %37, align 8
  store %Qubit* %target, %Qubit** %38, align 8
  call void @Microsoft__Quantum__Canon___a0281f75a8714dc99fdecb3e13592ae1_ApplyWithCA__ctl(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %35)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %39, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %39, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %40 = load i2, i2* @PauliY, align 1
  %41 = icmp eq i2 %pauli, %40
  br i1 %41, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %44 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i32 0, i32 0
  %45 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i32 0, i32 1
  %46 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i32 0, i32 2
  %47 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i32 0, i32 3
  %48 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i32 0, i32 4
  %49 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  %50 = load i2, i2* @PauliX, align 1
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  store %Callable* %49, %Callable** %44, align 8
  store double %tolerance, double* %45, align 8
  store %Array* %coefficients, %Array** %46, align 8
  store i2 %50, i2* %47, align 1
  store { %Array* }* %control, { %Array* }** %48, align 8
  %op__2 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__11__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__4__FunctionTable, %Tuple* %42)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i32 1)
  %51 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Qubit* }* getelementptr ({ %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* null, i32 1) to i64))
  %52 = bitcast %Tuple* %51 to { %Callable*, %Callable*, %Qubit* }*
  %53 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i32 0, i32 0
  %54 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i32 0, i32 1
  %55 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i32 0, i32 2
  %56 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %56)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__2, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i32 1)
  store %Callable* %56, %Callable** %53, align 8
  store %Callable* %op__2, %Callable** %54, align 8
  store %Qubit* %target, %Qubit** %55, align 8
  call void @Microsoft__Quantum__Canon___a0281f75a8714dc99fdecb3e13592ae1_ApplyWithCA__ctl(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %52)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %56, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %56, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op__2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %57 = load i2, i2* @PauliI, align 1
  %58 = icmp eq i2 %pauli, %57
  br i1 %58, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  %59 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %60 = bitcast %Tuple* %59 to { double, %Array*, { %Array* }* }*
  %61 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i32 0, i32 0
  %62 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i32 0, i32 1
  %63 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  store double %tolerance, double* %61, align 8
  store %Array* %coefficients, %Array** %62, align 8
  store { %Array* }* %control, { %Array* }** %63, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %60)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %59, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %64 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @17, i32 0, i32 0))
  %65 = load i2, i2* @PauliX, align 1
  %66 = icmp eq i2 %65, %pauli
  br i1 %66, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %67 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @18, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  %68 = load i2, i2* @PauliY, align 1
  %69 = icmp eq i2 %68, %pauli
  br i1 %69, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condFalse__1
  %70 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @19, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condFalse__1
  %71 = load i2, i2* @PauliZ, align 1
  %72 = icmp eq i2 %71, %pauli
  br i1 %72, label %condTrue__3, label %condFalse__3

condTrue__3:                                      ; preds = %condFalse__2
  %73 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @20, i32 0, i32 0))
  br label %condContinue__3

condFalse__3:                                     ; preds = %condFalse__2
  %74 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @21, i32 0, i32 0))
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condTrue__3
  %75 = phi %String* [ %73, %condTrue__3 ], [ %74, %condFalse__3 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condTrue__2
  %76 = phi %String* [ %70, %condTrue__2 ], [ %75, %condContinue__3 ]
  br label %condContinue__1

condContinue__1:                                  ; preds = %condContinue__2, %condTrue__1
  %77 = phi %String* [ %67, %condTrue__1 ], [ %76, %condContinue__2 ]
  %78 = call %String* @__quantum__rt__string_concatenate(%String* %64, %String* %77)
  call void @__quantum__rt__string_update_reference_count(%String* %64, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %77, i32 -1)
  %79 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @22, i32 0, i32 0))
  %80 = call %String* @__quantum__rt__string_concatenate(%String* %78, %String* %79)
  call void @__quantum__rt__string_update_reference_count(%String* %78, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %79, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__fail(%String* %80)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 2
  %pauli = load i2, i2* %3, align 1
  %4 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 3
  %control = load { %Array* }*, { %Array* }** %4, align 8
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %control, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array* }* %control to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %0, i32 0, i32 4
  %target = load %Qubit*, %Qubit** %8, align 8
  %9 = load i2, i2* @PauliZ, align 1
  %10 = icmp eq i2 %pauli, %9
  br i1 %10, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Callable*, double, %Array*, { %Array* }* }*
  %13 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 2
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %12, i32 0, i32 3
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexZ__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  store %Callable* %17, %Callable** %13, align 8
  store double %tolerance, double* %14, align 8
  store %Array* %coefficients, %Array** %15, align 8
  store { %Array* }* %control, { %Array* }** %16, align 8
  %__qsVar0__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__12__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__3__FunctionTable, %Tuple* %11)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, %Qubit* }*
  %21 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %20, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  store %Array* %__controlQubits__, %Array** %21, align 8
  store %Qubit* %target, %Qubit** %22, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %23 = load i2, i2* @PauliX, align 1
  %24 = icmp eq i2 %pauli, %23
  br i1 %24, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %27 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i32 0, i32 0
  %28 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i32 0, i32 1
  %29 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i32 0, i32 2
  %30 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i32 0, i32 3
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %26, i32 0, i32 4
  %32 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  %33 = load i2, i2* @PauliZ, align 1
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  store %Callable* %32, %Callable** %27, align 8
  store double %tolerance, double* %28, align 8
  store %Array* %coefficients, %Array** %29, align 8
  store i2 %33, i2* %30, align 1
  store { %Array* }* %control, { %Array* }** %31, align 8
  %__qsVar1__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__13__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__4__FunctionTable, %Tuple* %25)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i32 1)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Qubit* }* getelementptr ({ %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { %Callable*, %Callable*, %Qubit* }*
  %36 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i32 0, i32 0
  %37 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i32 0, i32 1
  %38 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %35, i32 0, i32 2
  %39 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__op__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i32 1)
  store %Callable* %39, %Callable** %36, align 8
  store %Callable* %__qsVar1__op__, %Callable** %37, align 8
  store %Qubit* %target, %Qubit** %38, align 8
  call void @Microsoft__Quantum__Canon___a0281f75a8714dc99fdecb3e13592ae1_ApplyWithCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %35)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %39, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %39, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar1__op__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %40 = load i2, i2* @PauliY, align 1
  %41 = icmp eq i2 %pauli, %40
  br i1 %41, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, { %Array* }* }* getelementptr ({ %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %44 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i32 0, i32 0
  %45 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i32 0, i32 1
  %46 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i32 0, i32 2
  %47 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i32 0, i32 3
  %48 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %43, i32 0, i32 4
  %49 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  %50 = load i2, i2* @PauliX, align 1
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  store %Callable* %49, %Callable** %44, align 8
  store double %tolerance, double* %45, align 8
  store %Array* %coefficients, %Array** %46, align 8
  store i2 %50, i2* %47, align 1
  store { %Array* }* %control, { %Array* }** %48, align 8
  %__qsVar2__op__ = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__14__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__4__FunctionTable, %Tuple* %42)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar2__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i32 1)
  %51 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Qubit* }* getelementptr ({ %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* null, i32 1) to i64))
  %52 = bitcast %Tuple* %51 to { %Callable*, %Callable*, %Qubit* }*
  %53 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i32 0, i32 0
  %54 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i32 0, i32 1
  %55 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %52, i32 0, i32 2
  %56 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %56)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar2__op__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i32 1)
  store %Callable* %56, %Callable** %53, align 8
  store %Callable* %__qsVar2__op__, %Callable** %54, align 8
  store %Qubit* %target, %Qubit** %55, align 8
  call void @Microsoft__Quantum__Canon___a0281f75a8714dc99fdecb3e13592ae1_ApplyWithCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Callable*, %Qubit* }* %52)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %56, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %56, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__qsVar2__op__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %57 = load i2, i2* @PauliI, align 1
  %58 = icmp eq i2 %pauli, %57
  br i1 %58, label %then3__1, label %else__1

then3__1:                                         ; preds = %test3__1
  %59 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %60 = bitcast %Tuple* %59 to { double, %Array*, { %Array* }* }*
  %61 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i32 0, i32 0
  %62 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i32 0, i32 1
  %63 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %60, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  store double %tolerance, double* %61, align 8
  store %Array* %coefficients, %Array** %62, align 8
  store { %Array* }* %control, { %Array* }** %63, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyApplyDiagonalUnitary__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %60)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %59, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test3__1
  %64 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @17, i32 0, i32 0))
  %65 = load i2, i2* @PauliX, align 1
  %66 = icmp eq i2 %65, %pauli
  br i1 %66, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %else__1
  %67 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @18, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %else__1
  %68 = load i2, i2* @PauliY, align 1
  %69 = icmp eq i2 %68, %pauli
  br i1 %69, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condFalse__1
  %70 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @19, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condFalse__1
  %71 = load i2, i2* @PauliZ, align 1
  %72 = icmp eq i2 %71, %pauli
  br i1 %72, label %condTrue__3, label %condFalse__3

condTrue__3:                                      ; preds = %condFalse__2
  %73 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @20, i32 0, i32 0))
  br label %condContinue__3

condFalse__3:                                     ; preds = %condFalse__2
  %74 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @21, i32 0, i32 0))
  br label %condContinue__3

condContinue__3:                                  ; preds = %condFalse__3, %condTrue__3
  %75 = phi %String* [ %73, %condTrue__3 ], [ %74, %condFalse__3 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condTrue__2
  %76 = phi %String* [ %70, %condTrue__2 ], [ %75, %condContinue__3 ]
  br label %condContinue__1

condContinue__1:                                  ; preds = %condContinue__2, %condTrue__1
  %77 = phi %String* [ %67, %condTrue__1 ], [ %76, %condContinue__2 ]
  %78 = call %String* @__quantum__rt__string_concatenate(%String* %64, %String* %77)
  call void @__quantum__rt__string_update_reference_count(%String* %64, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %77, i32 -1)
  %79 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @22, i32 0, i32 0))
  %80 = call %String* @__quantum__rt__string_concatenate(%String* %78, %String* %79)
  call void @__quantum__rt__string_update_reference_count(%String* %78, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %79, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__fail(%String* %80)
  unreachable

continue__1:                                      ; preds = %then3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledH____body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__ctl(%Array* %ctls, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledH____body(%Qubit* %qubit)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %qubit)
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  %6 = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %6, %Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %qubit)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__H__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Qubit* }*
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 1)
  store %Array* %ctls, %Array** %10, align 8
  store %Qubit* %qubit, %Qubit** %11, align 8
  call void @Microsoft__Quantum__Intrinsic___d032bd2a9ae646cf9b61adf1f6b1e6c1___QsRef36__ApplyWithLessControlsA____body(%Callable* %7, { %Array*, %Qubit* }* %9)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__H__ctladj(%Array* %__controlQubits__, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @Microsoft__Quantum__Intrinsic__H__ctl(%Array* %__controlQubits__, %Qubit* %qubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledS____body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledSAdj____body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__ctl(%Array* %ctls, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledS____body(%Qubit* %qubit)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  %6 = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %6)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %qubit)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %9, %Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %qubit)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %11 = bitcast i8* %10 to %Qubit**
  %12 = load %Qubit*, %Qubit** %11, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %12, %Qubit* %qubit)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_controlled(%Callable* %13)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Qubit* }*
  %16 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %15, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 1)
  store %Array* %ctls, %Array** %16, align 8
  store %Qubit* %qubit, %Qubit** %17, align 8
  call void @Microsoft__Quantum__Intrinsic___d032bd2a9ae646cf9b61adf1f6b1e6c1___QsRef36__ApplyWithLessControlsA____body(%Callable* %13, { %Array*, %Qubit* }* %15)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__S__ctladj(%Array* %ctls, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledSAdj____body(%Qubit* %qubit)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  %6 = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %6)
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %qubit)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %9, %Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %qubit)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %11 = bitcast i8* %10 to %Qubit**
  %12 = load %Qubit*, %Qubit** %11, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %12, %Qubit* %qubit)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__S__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %13)
  call void @__quantum__rt__callable_make_controlled(%Callable* %13)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Qubit* }*
  %16 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %15, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 1)
  store %Array* %ctls, %Array** %16, align 8
  store %Qubit* %qubit, %Qubit** %17, align 8
  call void @Microsoft__Quantum__Intrinsic___d032bd2a9ae646cf9b61adf1f6b1e6c1___QsRef36__ApplyWithLessControlsA____body(%Callable* %13, { %Array*, %Qubit* }* %15)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 -1)
  ret void
}

declare %Callable* @__quantum__rt__callable_copy(%Callable*, i1)

declare void @__quantum__rt__callable_make_controlled(%Callable*)

define internal void @Lifted__PartialApplication__6__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__6__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__6__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__6__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__7__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__7__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__7__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__7__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___a0281f75a8714dc99fdecb3e13592ae1_ApplyWithCA__adj(%Callable* %outerOperation, %Callable* %innerOperation, %Qubit* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %0)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Qubit* }*
  %3 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %2, i32 0, i32 0
  store %Qubit* %target, %Qubit** %3, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %0, %Tuple* %1, %Tuple* null)
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Qubit* }*
  %7 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %6, i32 0, i32 0
  store %Qubit* %target, %Qubit** %7, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  %8 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Qubit* }*
  %11 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %10, i32 0, i32 0
  store %Qubit* %target, %Qubit** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__8__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__8__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__8__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__8__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__9__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__9__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__9__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__9__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__10__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__10__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__10__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__10__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___a0281f75a8714dc99fdecb3e13592ae1_ApplyWithCA__ctl(%Array* %controlRegister, { %Callable*, %Callable*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 2
  %target = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Qubit* }*
  %6 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %5, i32 0, i32 0
  store %Qubit* %target, %Qubit** %6, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %outerOperation, %Tuple* %4, %Tuple* null)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Qubit* }*
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %9, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  store %Array* %controlRegister, %Array** %10, align 8
  store %Qubit* %target, %Qubit** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Qubit* }*
  %15 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %14, i32 0, i32 0
  store %Qubit* %target, %Qubit** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__11__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__11__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__11__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__11__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__12__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__12__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 3
  %6 = load { %Array* }*, { %Array* }** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %8 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %7, i32 0, i32 0
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, %Array*, { %Array* }*, %Qubit* }*
  %12 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %11, i32 0, i32 3
  store double %2, double* %12, align 8
  store %Array* %4, %Array** %13, align 8
  store { %Array* }* %6, { %Array* }** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__12__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__12__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 3
  %11 = load { %Array* }*, { %Array* }** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, { %Array* }*, %Qubit* }, { double, %Array*, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  store { %Array* }* %11, { %Array* }** %16, align 8
  store %Qubit* %4, %Qubit** %17, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }*
  %20 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, { %Array* }*, %Qubit* }* }* %19, i32 0, i32 1
  store %Array* %3, %Array** %20, align 8
  store { double, %Array*, { %Array* }*, %Qubit* }* %13, { double, %Array*, { %Array* }*, %Qubit* }** %21, align 8
  %22 = getelementptr inbounds { %Callable*, double, %Array*, { %Array* }* }, { %Callable*, double, %Array*, { %Array* }* }* %5, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_make_controlled(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__13__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__13__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__13__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__13__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___a0281f75a8714dc99fdecb3e13592ae1_ApplyWithCA__ctladj(%Array* %controlRegister, { %Callable*, %Callable*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 0
  %outerOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 1
  %innerOperation = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 1)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Qubit* }, { %Callable*, %Callable*, %Qubit* }* %0, i32 0, i32 2
  %target = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %4)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Qubit* }*
  %7 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %6, i32 0, i32 0
  store %Qubit* %target, %Qubit** %7, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %5, %Tuple* null)
  %8 = call %Callable* @__quantum__rt__callable_copy(%Callable* %innerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %8)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %8)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { %Array*, %Qubit* }*
  %11 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %10, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  store %Array* %controlRegister, %Array** %11, align 8
  store %Qubit* %target, %Qubit** %12, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %8, %Tuple* %9, %Tuple* null)
  %13 = call %Callable* @__quantum__rt__callable_copy(%Callable* %outerOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %13)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Qubit* }*
  %16 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %15, i32 0, i32 0
  store %Qubit* %target, %Qubit** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %13, %Tuple* %14, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outerOperation, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %innerOperation, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__14__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__14__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 4
  %8 = load { %Array* }*, { %Array* }** %7, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %10 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %9, i32 0, i32 0
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %14 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store %Array* %4, %Array** %15, align 8
  store i2 %6, i2* %16, align 1
  store { %Array* }* %8, { %Array* }** %17, align 8
  store %Qubit* %11, %Qubit** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__14__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__14__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, { %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 4
  %13 = load { %Array* }*, { %Array* }** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 3
  %20 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, i32 0, i32 4
  store double %7, double* %16, align 8
  store %Array* %9, %Array** %17, align 8
  store i2 %11, i2* %18, align 1
  store { %Array* }* %13, { %Array* }** %19, align 8
  store %Qubit* %4, %Qubit** %20, align 8
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }*
  %23 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }, { %Array*, { double, %Array*, i2, { %Array* }*, %Qubit* }* }* %22, i32 0, i32 1
  store %Array* %3, %Array** %23, align 8
  store { double, %Array*, i2, { %Array* }*, %Qubit* }* %15, { double, %Array*, i2, { %Array* }*, %Qubit* }** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, { %Array* }* }, { %Callable*, double, %Array*, i2, { %Array* }* }* %5, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_make_controlled(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %21, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control, %Qubit* %target) {
entry:
  call void @__quantum__qis__cnot__body(%Qubit* %control, %Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %control, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control, %Qubit* %target)
  ret void
}

define internal i1 @Microsoft__Quantum__Canon__IsRangeEmpty__body(%Range %rng) {
entry:
  %0 = extractvalue %Range %rng, 0
  %1 = extractvalue %Range %rng, 1
  %2 = extractvalue %Range %rng, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %3 = icmp sgt i64 %1, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idx = phi i64 [ %0, %preheader__1 ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %idx, %2
  %5 = icmp sge i64 %idx, %2
  %6 = select i1 %3, i1 %4, i1 %5
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  ret i1 false

exiting__1:                                       ; No predecessors!
  %7 = add i64 %idx, %1
  br label %header__1

exit__1:                                          ; preds = %header__1
  ret i1 true
}

define internal %Callable* @Microsoft__Quantum__Canon__MultiplexerBruteForceFromGenerator__body(i64 %0, %Callable* %1) {
entry:
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %unitaryGenerator = bitcast %Tuple* %2 to { i64, %Callable* }*
  %3 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %4 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  store i64 %0, i64* %3, align 4
  store %Callable* %1, %Callable** %4, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { i64, %Callable* }* }* getelementptr ({ %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Callable*, { i64, %Callable* }* }*
  %7 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %6, i32 0, i32 1
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  store %Callable* %9, %Callable** %7, align 8
  store { i64, %Callable* }* %unitaryGenerator, { i64, %Callable* }** %8, align 8
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__15__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__5__FunctionTable, %Tuple* %5)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret %Callable* %10
}

define internal void @Lifted__PartialApplication__15__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }*, %Array* }*
  %4 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4, align 8
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { %Array* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 2
  store { i64, %Callable* }* %2, { i64, %Callable* }** %10, align 8
  store { %Array* }* %5, { %Array* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__15__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { { %Array* }*, %Array* }*
  %4 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 0
  %5 = load { %Array* }*, { %Array* }** %4, align 8
  %6 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { %Array* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %10 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %9, i32 0, i32 2
  store { i64, %Callable* }* %2, { i64, %Callable* }** %10, align 8
  store { %Array* }* %5, { %Array* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__15__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { %Array* }*, %Array* }*, { { %Array* }*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %6 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 1
  %7 = load { i64, %Callable* }*, { i64, %Callable* }** %6, align 8
  %8 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %9 = load { %Array* }*, { %Array* }** %8, align 8
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { %Array* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %14 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 2
  store { i64, %Callable* }* %7, { i64, %Callable* }** %14, align 8
  store { %Array* }* %9, { %Array* }** %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, { { i64, %Callable* }*, { %Array* }*, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__15__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { %Array* }*, %Array* }* }, { %Array*, { { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { %Array* }*, %Array* }*, { { %Array* }*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %6 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 1
  %7 = load { i64, %Callable* }*, { i64, %Callable* }** %6, align 8
  %8 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 0
  %9 = load { %Array* }*, { %Array* }** %8, align 8
  %10 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { %Array* }*, %Array* }* getelementptr ({ { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %14 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, i32 0, i32 2
  store { i64, %Callable* }* %7, { i64, %Callable* }** %14, align 8
  store { %Array* }* %9, { %Array* }** %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { i64, %Callable* }*, { %Array* }*, %Array* }* %13, { { i64, %Callable* }*, { %Array* }*, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load { %Array* }*, { %Array* }** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__body({ i64, %Callable* }* %4, { %Array* }* %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, { %Array* }*, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load { %Array* }*, { %Array* }** %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__adj({ i64, %Callable* }* %4, { %Array* }* %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, { %Array* }*, %Array* }*, { { i64, %Callable* }*, { %Array* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__ctl(%Array* %3, { { i64, %Callable* }*, { %Array* }*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }, { %Array*, { { i64, %Callable* }*, { %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, { %Array* }*, %Array* }*, { { i64, %Callable* }*, { %Array* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__ctladj(%Array* %3, { { i64, %Callable* }*, { %Array* }*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__5__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %3, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %4, i32 0, i32 1
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  %7 = bitcast { i64, %Callable* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__5__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { i64, %Callable* }* }, { %Callable*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %3, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %4, i32 0, i32 1
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  %7 = bitcast { i64, %Callable* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__body({ i64, %Callable* }* %unitaryGenerator, { %Array* }* %index, %Array* %target) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %unitaryFunction = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  %1 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %4 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %nIndex = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %5 = trunc i64 %nIndex to i32
  %6 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %5)
  %nStates = fptosi double %6 to i64
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %nUnitaries = load i64, i64* %7, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  %8 = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %nStates, i64 %nUnitaries)
  %9 = sub i64 %8, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxOp = phi i64 [ 0, %entry ], [ %24, %exiting__1 ]
  %10 = icmp sle i64 %idxOp, %9
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i64 }*
  %13 = getelementptr inbounds { i64 }, { i64 }* %12, i32 0, i32 0
  store i64 %idxOp, i64* %13, align 4
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %unitaryFunction, %Tuple* %11, %Tuple* %14)
  %15 = bitcast %Tuple* %14 to { %Callable* }*
  %16 = getelementptr inbounds { %Callable* }, { %Callable* }* %15, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @Microsoft__Quantum__Canon___75633d6fee93417e9eff9a6252378862_ControlledOnInt__body(i64 %idxOp, %Callable* %17)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, %Array* }*
  %21 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 1
  %23 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store %Array* %23, %Array** %21, align 8
  store %Array* %target, %Array** %22, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %24 = add i64 %idxOp, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  %25 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__adj({ i64, %Callable* }* %unitaryGenerator, { %Array* }* %index, %Array* %target) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %__qsVar3__unitaryFunction__ = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  %1 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %4 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %__qsVar0__nIndex__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %3)
  %5 = trunc i64 %__qsVar0__nIndex__ to i32
  %6 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %5)
  %__qsVar1__nStates__ = fptosi double %6 to i64
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %__qsVar2__nUnitaries__ = load i64, i64* %7, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  %8 = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %__qsVar1__nStates__, i64 %__qsVar2__nUnitaries__)
  %9 = sub i64 %8, 1
  %10 = sub i64 %9, 0
  %11 = sdiv i64 %10, 1
  %12 = mul i64 1, %11
  %13 = add i64 0, %12
  %14 = load %Range, %Range* @EmptyRange, align 4
  %15 = insertvalue %Range %14, i64 %13, 0
  %16 = insertvalue %Range %15, i64 -1, 1
  %17 = insertvalue %Range %16, i64 0, 2
  %18 = extractvalue %Range %17, 0
  %19 = extractvalue %Range %17, 1
  %20 = extractvalue %Range %17, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %21 = icmp sgt i64 %19, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar4__idxOp__ = phi i64 [ %18, %preheader__1 ], [ %39, %exiting__1 ]
  %22 = icmp sle i64 %__qsVar4__idxOp__, %20
  %23 = icmp sge i64 %__qsVar4__idxOp__, %20
  %24 = select i1 %21, i1 %22, i1 %23
  br i1 %24, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %26 = bitcast %Tuple* %25 to { i64 }*
  %27 = getelementptr inbounds { i64 }, { i64 }* %26, i32 0, i32 0
  store i64 %__qsVar4__idxOp__, i64* %27, align 4
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__unitaryFunction__, %Tuple* %25, %Tuple* %28)
  %29 = bitcast %Tuple* %28 to { %Callable* }*
  %30 = getelementptr inbounds { %Callable* }, { %Callable* }* %29, i32 0, i32 0
  %31 = load %Callable*, %Callable** %30, align 8
  %32 = call %Callable* @Microsoft__Quantum__Canon___75633d6fee93417e9eff9a6252378862_ControlledOnInt__body(i64 %__qsVar4__idxOp__, %Callable* %31)
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %33)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { %Array*, %Array* }*
  %36 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %35, i32 0, i32 0
  %37 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %35, i32 0, i32 1
  %38 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store %Array* %38, %Array** %36, align 8
  store %Array* %target, %Array** %37, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %34, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %32, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %39 = add i64 %__qsVar4__idxOp__, %19
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  %40 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %unitaryGenerator = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %unitaryFunction = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  %3 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %4 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %index = load { %Array* }*, { %Array* }** %4, align 8
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %nIndex = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %9 = trunc i64 %nIndex to i32
  %10 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %9)
  %nStates = fptosi double %10 to i64
  %11 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %nUnitaries = load i64, i64* %11, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 1)
  %12 = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %nStates, i64 %nUnitaries)
  %13 = sub i64 %12, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxOp = phi i64 [ 0, %entry ], [ %33, %exiting__1 ]
  %14 = icmp sle i64 %idxOp, %13
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { i64 }*
  %17 = getelementptr inbounds { i64 }, { i64 }* %16, i32 0, i32 0
  store i64 %idxOp, i64* %17, align 4
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %unitaryFunction, %Tuple* %15, %Tuple* %18)
  %19 = bitcast %Tuple* %18 to { %Callable* }*
  %20 = getelementptr inbounds { %Callable* }, { %Callable* }* %19, i32 0, i32 0
  %21 = load %Callable*, %Callable** %20, align 8
  %22 = call %Callable* @Microsoft__Quantum__Canon___75633d6fee93417e9eff9a6252378862_ControlledOnInt__body(i64 %idxOp, %Callable* %21)
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Array*, { %Array*, %Array* }* }*
  %26 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %25, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { %Array*, %Array* }*
  %30 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %29, i32 0, i32 0
  %31 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %29, i32 0, i32 1
  %32 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store %Array* %32, %Array** %30, align 8
  store %Array* %target, %Array** %31, align 8
  store %Array* %__controlQubits__, %Array** %26, align 8
  store { %Array*, %Array* }* %29, { %Array*, %Array* }** %27, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %33 = add i64 %idxOp, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  %34 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unitaryFunction, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___2c3f3a66725f4931bfcba23d083ff337_MultiplexOperationsBruteForceFromGenerator__ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 0
  %unitaryGenerator = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 1
  %__qsVar3__unitaryFunction__ = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  %3 = bitcast { i64, %Callable* }* %unitaryGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %4 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 1
  %index = load { %Array* }*, { %Array* }** %4, align 8
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %index, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  %7 = bitcast { %Array* }* %index to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  %8 = getelementptr inbounds { { i64, %Callable* }*, { %Array* }*, %Array* }, { { i64, %Callable* }*, { %Array* }*, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %__qsVar0__nIndex__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %6)
  %9 = trunc i64 %__qsVar0__nIndex__ to i32
  %10 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %9)
  %__qsVar1__nStates__ = fptosi double %10 to i64
  %11 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %unitaryGenerator, i32 0, i32 0
  %__qsVar2__nUnitaries__ = load i64, i64* %11, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 1)
  %12 = call i64 @Microsoft__Quantum__Math__MinI__body(i64 %__qsVar1__nStates__, i64 %__qsVar2__nUnitaries__)
  %13 = sub i64 %12, 1
  %14 = sub i64 %13, 0
  %15 = sdiv i64 %14, 1
  %16 = mul i64 1, %15
  %17 = add i64 0, %16
  %18 = load %Range, %Range* @EmptyRange, align 4
  %19 = insertvalue %Range %18, i64 %17, 0
  %20 = insertvalue %Range %19, i64 -1, 1
  %21 = insertvalue %Range %20, i64 0, 2
  %22 = extractvalue %Range %21, 0
  %23 = extractvalue %Range %21, 1
  %24 = extractvalue %Range %21, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %25 = icmp sgt i64 %23, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar4__idxOp__ = phi i64 [ %22, %preheader__1 ], [ %47, %exiting__1 ]
  %26 = icmp sle i64 %__qsVar4__idxOp__, %24
  %27 = icmp sge i64 %__qsVar4__idxOp__, %24
  %28 = select i1 %25, i1 %26, i1 %27
  br i1 %28, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i64 }*
  %31 = getelementptr inbounds { i64 }, { i64 }* %30, i32 0, i32 0
  store i64 %__qsVar4__idxOp__, i64* %31, align 4
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__unitaryFunction__, %Tuple* %29, %Tuple* %32)
  %33 = bitcast %Tuple* %32 to { %Callable* }*
  %34 = getelementptr inbounds { %Callable* }, { %Callable* }* %33, i32 0, i32 0
  %35 = load %Callable*, %Callable** %34, align 8
  %36 = call %Callable* @Microsoft__Quantum__Canon___75633d6fee93417e9eff9a6252378862_ControlledOnInt__body(i64 %__qsVar4__idxOp__, %Callable* %35)
  %37 = call %Callable* @__quantum__rt__callable_copy(%Callable* %36, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %37, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %37)
  call void @__quantum__rt__callable_make_controlled(%Callable* %37)
  %38 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %39 = bitcast %Tuple* %38 to { %Array*, { %Array*, %Array* }* }*
  %40 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %39, i32 0, i32 0
  %41 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %39, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { %Array*, %Array* }*
  %44 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %43, i32 0, i32 0
  %45 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %43, i32 0, i32 1
  %46 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store %Array* %46, %Array** %44, align 8
  store %Array* %target, %Array** %45, align 8
  store %Array* %__controlQubits__, %Array** %40, align 8
  store { %Array*, %Array* }* %43, { %Array*, %Array* }** %41, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %37, %Tuple* %38, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %37, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %37, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %38, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %47 = add i64 %__qsVar4__idxOp__, %23
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  %48 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %48, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__unitaryFunction__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__CY__body(%Qubit* %control, %Qubit* %target) {
entry:
  %0 = load i2, i2* @PauliX, align 1
  %1 = load i2, i2* @PauliY, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____body(%Qubit* %target, i2 %0, i2 %1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control, %Qubit* %target)
  %2 = load i2, i2* @PauliX, align 1
  %3 = load i2, i2* @PauliY, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____adj(%Qubit* %target, i2 %2, i2 %3)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____body(%Qubit* %qubit, i2 %from, i2 %to) {
entry:
  %0 = icmp eq i2 %from, %to
  br i1 %0, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  br label %continue__1

test1__1:                                         ; preds = %entry
  %1 = load i2, i2* @PauliZ, align 1
  %2 = icmp eq i2 %from, %1
  br i1 %2, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %test1__1
  %3 = load i2, i2* @PauliX, align 1
  %4 = icmp eq i2 %to, %3
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %test1__1
  %5 = phi i1 [ %4, %condTrue__1 ], [ %2, %test1__1 ]
  %6 = xor i1 %5, true
  br i1 %6, label %condTrue__2, label %condContinue__2

condTrue__2:                                      ; preds = %condContinue__1
  %7 = load i2, i2* @PauliX, align 1
  %8 = icmp eq i2 %from, %7
  br i1 %8, label %condTrue__3, label %condContinue__3

condTrue__3:                                      ; preds = %condTrue__2
  %9 = load i2, i2* @PauliZ, align 1
  %10 = icmp eq i2 %to, %9
  br label %condContinue__3

condContinue__3:                                  ; preds = %condTrue__3, %condTrue__2
  %11 = phi i1 [ %10, %condTrue__3 ], [ %8, %condTrue__2 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condContinue__1
  %12 = phi i1 [ %11, %condContinue__3 ], [ %5, %condContinue__1 ]
  br i1 %12, label %then1__1, label %test2__1

then1__1:                                         ; preds = %condContinue__2
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %qubit)
  br label %continue__1

test2__1:                                         ; preds = %condContinue__2
  %13 = load i2, i2* @PauliZ, align 1
  %14 = icmp eq i2 %from, %13
  br i1 %14, label %condTrue__4, label %condContinue__4

condTrue__4:                                      ; preds = %test2__1
  %15 = load i2, i2* @PauliY, align 1
  %16 = icmp eq i2 %to, %15
  br label %condContinue__4

condContinue__4:                                  ; preds = %condTrue__4, %test2__1
  %17 = phi i1 [ %16, %condTrue__4 ], [ %14, %test2__1 ]
  br i1 %17, label %then2__1, label %test3__1

then2__1:                                         ; preds = %condContinue__4
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %qubit)
  br label %continue__1

test3__1:                                         ; preds = %condContinue__4
  %18 = load i2, i2* @PauliY, align 1
  %19 = icmp eq i2 %from, %18
  br i1 %19, label %condTrue__5, label %condContinue__5

condTrue__5:                                      ; preds = %test3__1
  %20 = load i2, i2* @PauliZ, align 1
  %21 = icmp eq i2 %to, %20
  br label %condContinue__5

condContinue__5:                                  ; preds = %condTrue__5, %test3__1
  %22 = phi i1 [ %21, %condTrue__5 ], [ %19, %test3__1 ]
  br i1 %22, label %then3__1, label %test4__1

then3__1:                                         ; preds = %condContinue__5
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %qubit)
  br label %continue__1

test4__1:                                         ; preds = %condContinue__5
  %23 = load i2, i2* @PauliY, align 1
  %24 = icmp eq i2 %from, %23
  br i1 %24, label %condTrue__6, label %condContinue__6

condTrue__6:                                      ; preds = %test4__1
  %25 = load i2, i2* @PauliX, align 1
  %26 = icmp eq i2 %to, %25
  br label %condContinue__6

condContinue__6:                                  ; preds = %condTrue__6, %test4__1
  %27 = phi i1 [ %26, %condTrue__6 ], [ %24, %test4__1 ]
  br i1 %27, label %then4__1, label %test5__1

then4__1:                                         ; preds = %condContinue__6
  call void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %qubit)
  br label %continue__1

test5__1:                                         ; preds = %condContinue__6
  %28 = load i2, i2* @PauliX, align 1
  %29 = icmp eq i2 %from, %28
  br i1 %29, label %condTrue__7, label %condContinue__7

condTrue__7:                                      ; preds = %test5__1
  %30 = load i2, i2* @PauliY, align 1
  %31 = icmp eq i2 %to, %30
  br label %condContinue__7

condContinue__7:                                  ; preds = %condTrue__7, %test5__1
  %32 = phi i1 [ %31, %condTrue__7 ], [ %29, %test5__1 ]
  br i1 %32, label %then5__1, label %else__1

then5__1:                                         ; preds = %condContinue__7
  call void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %qubit)
  br label %continue__1

else__1:                                          ; preds = %condContinue__7
  %33 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @32, i32 0, i32 0))
  call void @__quantum__rt__fail(%String* %33)
  unreachable

continue__1:                                      ; preds = %then5__1, %then4__1, %then3__1, %then2__1, %then1__1, %then0__1
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____adj(%Qubit* %qubit, i2 %from, i2 %to) {
entry:
  %0 = icmp eq i2 %from, %to
  br i1 %0, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  br label %continue__1

test1__1:                                         ; preds = %entry
  %1 = load i2, i2* @PauliZ, align 1
  %2 = icmp eq i2 %from, %1
  br i1 %2, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %test1__1
  %3 = load i2, i2* @PauliX, align 1
  %4 = icmp eq i2 %to, %3
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %test1__1
  %5 = phi i1 [ %4, %condTrue__1 ], [ %2, %test1__1 ]
  %6 = xor i1 %5, true
  br i1 %6, label %condTrue__2, label %condContinue__2

condTrue__2:                                      ; preds = %condContinue__1
  %7 = load i2, i2* @PauliX, align 1
  %8 = icmp eq i2 %from, %7
  br i1 %8, label %condTrue__3, label %condContinue__3

condTrue__3:                                      ; preds = %condTrue__2
  %9 = load i2, i2* @PauliZ, align 1
  %10 = icmp eq i2 %to, %9
  br label %condContinue__3

condContinue__3:                                  ; preds = %condTrue__3, %condTrue__2
  %11 = phi i1 [ %10, %condTrue__3 ], [ %8, %condTrue__2 ]
  br label %condContinue__2

condContinue__2:                                  ; preds = %condContinue__3, %condContinue__1
  %12 = phi i1 [ %11, %condContinue__3 ], [ %5, %condContinue__1 ]
  br i1 %12, label %then1__1, label %test2__1

then1__1:                                         ; preds = %condContinue__2
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %qubit)
  br label %continue__1

test2__1:                                         ; preds = %condContinue__2
  %13 = load i2, i2* @PauliZ, align 1
  %14 = icmp eq i2 %from, %13
  br i1 %14, label %condTrue__4, label %condContinue__4

condTrue__4:                                      ; preds = %test2__1
  %15 = load i2, i2* @PauliY, align 1
  %16 = icmp eq i2 %to, %15
  br label %condContinue__4

condContinue__4:                                  ; preds = %condTrue__4, %test2__1
  %17 = phi i1 [ %16, %condTrue__4 ], [ %14, %test2__1 ]
  br i1 %17, label %then2__1, label %test3__1

then2__1:                                         ; preds = %condContinue__4
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %qubit)
  br label %continue__1

test3__1:                                         ; preds = %condContinue__4
  %18 = load i2, i2* @PauliY, align 1
  %19 = icmp eq i2 %from, %18
  br i1 %19, label %condTrue__5, label %condContinue__5

condTrue__5:                                      ; preds = %test3__1
  %20 = load i2, i2* @PauliZ, align 1
  %21 = icmp eq i2 %to, %20
  br label %condContinue__5

condContinue__5:                                  ; preds = %condTrue__5, %test3__1
  %22 = phi i1 [ %21, %condTrue__5 ], [ %19, %test3__1 ]
  br i1 %22, label %then3__1, label %test4__1

then3__1:                                         ; preds = %condContinue__5
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %qubit)
  br label %continue__1

test4__1:                                         ; preds = %condContinue__5
  %23 = load i2, i2* @PauliY, align 1
  %24 = icmp eq i2 %from, %23
  br i1 %24, label %condTrue__6, label %condContinue__6

condTrue__6:                                      ; preds = %test4__1
  %25 = load i2, i2* @PauliX, align 1
  %26 = icmp eq i2 %to, %25
  br label %condContinue__6

condContinue__6:                                  ; preds = %condTrue__6, %test4__1
  %27 = phi i1 [ %26, %condTrue__6 ], [ %24, %test4__1 ]
  br i1 %27, label %then4__1, label %test5__1

then4__1:                                         ; preds = %condContinue__6
  call void @Microsoft__Quantum__Intrinsic__S__adj(%Qubit* %qubit)
  br label %continue__1

test5__1:                                         ; preds = %condContinue__6
  %28 = load i2, i2* @PauliX, align 1
  %29 = icmp eq i2 %from, %28
  br i1 %29, label %condTrue__7, label %condContinue__7

condTrue__7:                                      ; preds = %test5__1
  %30 = load i2, i2* @PauliY, align 1
  %31 = icmp eq i2 %to, %30
  br label %condContinue__7

condContinue__7:                                  ; preds = %condTrue__7, %test5__1
  %32 = phi i1 [ %31, %condTrue__7 ], [ %29, %test5__1 ]
  br i1 %32, label %then5__1, label %else__1

then5__1:                                         ; preds = %condContinue__7
  call void @Microsoft__Quantum__Intrinsic__S__body(%Qubit* %qubit)
  br label %continue__1

else__1:                                          ; preds = %condContinue__7
  %33 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @32, i32 0, i32 0))
  call void @__quantum__rt__fail(%String* %33)
  unreachable

continue__1:                                      ; preds = %then5__1, %then4__1, %then3__1, %then2__1, %then1__1, %then0__1
  ret void
}

define internal void @Microsoft__Quantum__Canon__CY__adj(%Qubit* %control, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Canon__CY__body(%Qubit* %control, %Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Canon__CY__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = load i2, i2* @PauliX, align 1
  %4 = load i2, i2* @PauliY, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____body(%Qubit* %target, i2 %3, i2 %4)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit*, %Qubit* }* getelementptr ({ %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { %Qubit*, %Qubit* }*
  %7 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %6, i32 0, i32 1
  store %Qubit* %control, %Qubit** %7, align 8
  store %Qubit* %target, %Qubit** %8, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %6)
  %9 = load i2, i2* @PauliX, align 1
  %10 = load i2, i2* @PauliY, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____adj(%Qubit* %target, i2 %9, i2 %10)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__ctl(%Array* %ctls, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @__quantum__qis__cnot__body(%Qubit* %control, %Qubit* %target)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %6 = icmp eq i64 %5, 1
  br i1 %6, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8, align 8
  call void @Microsoft__Quantum__Intrinsic__CCNOT__body(%Qubit* %9, %Qubit* %control, %Qubit* %target)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__CNOT__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Qubit*, %Qubit* }* }* getelementptr ({ %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Array*, { %Qubit*, %Qubit* }* }*
  %13 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %12, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 1)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit*, %Qubit* }* getelementptr ({ %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Qubit*, %Qubit* }*
  %17 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %16, i32 0, i32 1
  store %Qubit* %control, %Qubit** %17, align 8
  store %Qubit* %target, %Qubit** %18, align 8
  store %Array* %ctls, %Array** %13, align 8
  store { %Qubit*, %Qubit* }* %16, { %Qubit*, %Qubit* }** %14, align 8
  call void @Microsoft__Quantum__Intrinsic___c58cb28809e843f891697cf044f848da___QsRef36__ApplyWithLessControlsA____body(%Callable* %10, { %Array*, { %Qubit*, %Qubit* }* }* %12)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon__CY__ctladj(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit*, %Qubit* }* getelementptr ({ %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Qubit*, %Qubit* }*
  %5 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i32 0, i32 1
  store %Qubit* %control, %Qubit** %5, align 8
  store %Qubit* %target, %Qubit** %6, align 8
  call void @Microsoft__Quantum__Canon__CY__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____body(%Array* %operations, %Array* %target) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %8 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %9 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %10 = icmp sle i64 %9, %8
  br i1 %10, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %9)
  %12 = bitcast i8* %11 to %Callable**
  %op = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Array* }*
  %15 = getelementptr inbounds { %Array* }, { %Array* }* %14, i32 0, i32 0
  store %Array* %target, %Array** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %13, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %9, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %17 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %18 = phi i64 [ 0, %exit__2 ], [ %23, %exiting__3 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %18)
  %21 = bitcast i8* %20 to %Callable**
  %22 = load %Callable*, %Callable** %21, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %22, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %23 = add i64 %18, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____adj(%Array* %operations, %Array* %target) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %8 = sub i64 %0, 1
  %9 = load %Range, %Range* @EmptyRange, align 4
  %10 = insertvalue %Range %9, i64 %8, 0
  %11 = insertvalue %Range %10, i64 -1, 1
  %12 = insertvalue %Range %11, i64 0, 2
  %13 = call %Array* @__quantum__rt__array_slice_1d(%Array* %operations, %Range %12, i1 true)
  %14 = call i64 @__quantum__rt__array_get_size_1d(%Array* %13)
  %15 = sub i64 %14, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %24, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %16)
  %19 = bitcast i8* %18 to %Callable**
  %__qsVar0__op__ = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %20 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %20, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %20)
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array* }*
  %23 = getelementptr inbounds { %Array* }, { %Array* }* %22, i32 0, i32 0
  store %Array* %target, %Array** %23, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %21, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %24 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %25 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %26 = phi i64 [ 0, %exit__2 ], [ %31, %exiting__3 ]
  %27 = icmp sle i64 %26, %25
  br i1 %27, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %26)
  %29 = bitcast i8* %28 to %Callable**
  %30 = load %Callable*, %Callable** %29, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %30, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %30, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %31 = add i64 %26, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %operations = load %Array*, %Array** %1, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %4)
  %7 = bitcast i8* %6 to %Callable**
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %target = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %11 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %12)
  %15 = bitcast i8* %14 to %Callable**
  %op = load %Callable*, %Callable** %15, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %16 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %16, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %16)
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, %Array* }*
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %18, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store %Array* %__controlQubits__, %Array** %19, align 8
  store %Array* %target, %Array** %20, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %16, %Tuple* %17, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %22 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %23 = phi i64 [ 0, %exit__2 ], [ %28, %exiting__3 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %23)
  %26 = bitcast i8* %25 to %Callable**
  %27 = load %Callable*, %Callable** %26, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %27, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %28 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %operations = load %Array*, %Array** %1, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %4)
  %7 = bitcast i8* %6 to %Callable**
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %target = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %11 = sub i64 %2, 1
  %12 = load %Range, %Range* @EmptyRange, align 4
  %13 = insertvalue %Range %12, i64 %11, 0
  %14 = insertvalue %Range %13, i64 -1, 1
  %15 = insertvalue %Range %14, i64 0, 2
  %16 = call %Array* @__quantum__rt__array_slice_1d(%Array* %operations, %Range %15, i1 true)
  %17 = call i64 @__quantum__rt__array_get_size_1d(%Array* %16)
  %18 = sub i64 %17, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %28, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 %19)
  %22 = bitcast i8* %21 to %Callable**
  %__qsVar0__op__ = load %Callable*, %Callable** %22, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 1)
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %__qsVar0__op__, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Array*, %Array* }*
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %25, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store %Array* %__controlQubits__, %Array** %26, align 8
  store %Array* %target, %Array** %27, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar0__op__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %28 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %29 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %30 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %30)
  %33 = bitcast i8* %32 to %Callable**
  %34 = load %Callable*, %Callable** %33, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %34, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %30, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____body({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %4 = icmp sle i64 %idx, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, double, %Array* }*
  %7 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %6, i32 0, i32 2
  %10 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %idx, i64* %7, align 4
  store double %10, double* %8, align 8
  store %Array* %target, %Array** %9, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %5, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %12 = sub i64 %nSteps, 1
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idx__1 = phi i64 [ %12, %preheader__1 ], [ %22, %exiting__2 ]
  %13 = icmp sle i64 %idx__1, 0
  %14 = icmp sge i64 %idx__1, 0
  %15 = select i1 false, i1 %13, i1 %14
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i64, double, %Array* }*
  %18 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %17, i32 0, i32 2
  %21 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %idx__1, i64* %18, align 4
  store double %21, double* %19, align 8
  store %Array* %target, %Array** %20, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %16, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %idx__1, -1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____adj({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = sub i64 %nSteps, 1
  %4 = sub i64 0, %3
  %5 = sdiv i64 %4, -1
  %6 = mul i64 -1, %5
  %7 = add i64 %3, %6
  %8 = load %Range, %Range* @EmptyRange, align 4
  %9 = insertvalue %Range %8, i64 %7, 0
  %10 = insertvalue %Range %9, i64 1, 1
  %11 = insertvalue %Range %10, i64 %3, 2
  %12 = extractvalue %Range %11, 0
  %13 = extractvalue %Range %11, 1
  %14 = extractvalue %Range %11, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %15 = icmp sgt i64 %13, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar1__idx__ = phi i64 [ %12, %preheader__1 ], [ %26, %exiting__1 ]
  %16 = icmp sle i64 %__qsVar1__idx__, %14
  %17 = icmp sge i64 %__qsVar1__idx__, %14
  %18 = select i1 %15, i1 %16, i1 %17
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %19)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { i64, double, %Array* }*
  %22 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %21, i32 0, i32 2
  %25 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %__qsVar1__idx__, i64* %22, align 4
  store double %25, double* %23, align 8
  store %Array* %target, %Array** %24, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %20, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %26 = add i64 %__qsVar1__idx__, %13
  br label %header__1

exit__1:                                          ; preds = %header__1
  %27 = sub i64 %nSteps, 1
  %28 = sub i64 %27, 0
  %29 = sdiv i64 %28, 1
  %30 = mul i64 1, %29
  %31 = add i64 0, %30
  %32 = load %Range, %Range* @EmptyRange, align 4
  %33 = insertvalue %Range %32, i64 %31, 0
  %34 = insertvalue %Range %33, i64 -1, 1
  %35 = insertvalue %Range %34, i64 0, 2
  %36 = extractvalue %Range %35, 0
  %37 = extractvalue %Range %35, 1
  %38 = extractvalue %Range %35, 2
  br label %preheader__2

preheader__2:                                     ; preds = %exit__1
  %39 = icmp sgt i64 %37, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__2
  %__qsVar0__idx__ = phi i64 [ %36, %preheader__2 ], [ %50, %exiting__2 ]
  %40 = icmp sle i64 %__qsVar0__idx__, %38
  %41 = icmp sge i64 %__qsVar0__idx__, %38
  %42 = select i1 %39, i1 %40, i1 %41
  br i1 %42, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %43 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %43, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %43)
  %44 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %45 = bitcast %Tuple* %44 to { i64, double, %Array* }*
  %46 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %45, i32 0, i32 0
  %47 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %45, i32 0, i32 1
  %48 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %45, i32 0, i32 2
  %49 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %__qsVar0__idx__, i64* %46, align 4
  store double %49, double* %47, align 8
  store %Array* %target, %Array** %48, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %43, %Tuple* %44, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %43, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %43, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %44, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %50 = add i64 %__qsVar0__idx__, %37
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %3, align 8
  %4 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 0
  %nSteps = load i64, i64* %5, align 4
  %6 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 1
  %op = load %Callable*, %Callable** %6, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %7 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %20, %exiting__1 ]
  %8 = icmp sle i64 %idx, %7
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %9)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, double, %Array* }* }* getelementptr ({ %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, { i64, double, %Array* }* }*
  %12 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %11, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, double, %Array* }*
  %16 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %15, i32 0, i32 2
  %19 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %idx, i64* %16, align 4
  store double %19, double* %17, align 8
  store %Array* %target, %Array** %18, align 8
  store %Array* %__controlQubits__, %Array** %12, align 8
  store { i64, double, %Array* }* %15, { i64, double, %Array* }** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %10, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %21 = sub i64 %nSteps, 1
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idx__1 = phi i64 [ %21, %preheader__1 ], [ %36, %exiting__2 ]
  %22 = icmp sle i64 %idx__1, 0
  %23 = icmp sge i64 %idx__1, 0
  %24 = select i1 false, i1 %22, i1 %23
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %25, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %25)
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, double, %Array* }* }* getelementptr ({ %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { %Array*, { i64, double, %Array* }* }*
  %28 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %27, i32 0, i32 0
  %29 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %27, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { i64, double, %Array* }*
  %32 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %31, i32 0, i32 1
  %34 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %31, i32 0, i32 2
  %35 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %idx__1, i64* %32, align 4
  store double %35, double* %33, align 8
  store %Array* %target, %Array** %34, align 8
  store %Array* %__controlQubits__, %Array** %28, align 8
  store { i64, double, %Array* }* %31, { i64, double, %Array* }** %29, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %25, %Tuple* %26, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %25, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %idx__1, -1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %3, align 8
  %4 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 0
  %nSteps = load i64, i64* %5, align 4
  %6 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 1
  %op = load %Callable*, %Callable** %6, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %7 = sub i64 %nSteps, 1
  %8 = sub i64 0, %7
  %9 = sdiv i64 %8, -1
  %10 = mul i64 -1, %9
  %11 = add i64 %7, %10
  %12 = load %Range, %Range* @EmptyRange, align 4
  %13 = insertvalue %Range %12, i64 %11, 0
  %14 = insertvalue %Range %13, i64 1, 1
  %15 = insertvalue %Range %14, i64 %7, 2
  %16 = extractvalue %Range %15, 0
  %17 = extractvalue %Range %15, 1
  %18 = extractvalue %Range %15, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %19 = icmp sgt i64 %17, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar1__idx__ = phi i64 [ %16, %preheader__1 ], [ %34, %exiting__1 ]
  %20 = icmp sle i64 %__qsVar1__idx__, %18
  %21 = icmp sge i64 %__qsVar1__idx__, %18
  %22 = select i1 %19, i1 %20, i1 %21
  br i1 %22, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, double, %Array* }* }* getelementptr ({ %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Array*, { i64, double, %Array* }* }*
  %26 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %25, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { i64, double, %Array* }*
  %30 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %29, i32 0, i32 0
  %31 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %29, i32 0, i32 1
  %32 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %29, i32 0, i32 2
  %33 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %__qsVar1__idx__, i64* %30, align 4
  store double %33, double* %31, align 8
  store %Array* %target, %Array** %32, align 8
  store %Array* %__controlQubits__, %Array** %26, align 8
  store { i64, double, %Array* }* %29, { i64, double, %Array* }** %27, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %34 = add i64 %__qsVar1__idx__, %17
  br label %header__1

exit__1:                                          ; preds = %header__1
  %35 = sub i64 %nSteps, 1
  %36 = sub i64 %35, 0
  %37 = sdiv i64 %36, 1
  %38 = mul i64 1, %37
  %39 = add i64 0, %38
  %40 = load %Range, %Range* @EmptyRange, align 4
  %41 = insertvalue %Range %40, i64 %39, 0
  %42 = insertvalue %Range %41, i64 -1, 1
  %43 = insertvalue %Range %42, i64 0, 2
  %44 = extractvalue %Range %43, 0
  %45 = extractvalue %Range %43, 1
  %46 = extractvalue %Range %43, 2
  br label %preheader__2

preheader__2:                                     ; preds = %exit__1
  %47 = icmp sgt i64 %45, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__2
  %__qsVar0__idx__ = phi i64 [ %44, %preheader__2 ], [ %62, %exiting__2 ]
  %48 = icmp sle i64 %__qsVar0__idx__, %46
  %49 = icmp sge i64 %__qsVar0__idx__, %46
  %50 = select i1 %47, i1 %48, i1 %49
  br i1 %50, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %51 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %51, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %51)
  call void @__quantum__rt__callable_make_controlled(%Callable* %51)
  %52 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, double, %Array* }* }* getelementptr ({ %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* null, i32 1) to i64))
  %53 = bitcast %Tuple* %52 to { %Array*, { i64, double, %Array* }* }*
  %54 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %53, i32 0, i32 0
  %55 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %53, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %56 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %57 = bitcast %Tuple* %56 to { i64, double, %Array* }*
  %58 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %57, i32 0, i32 0
  %59 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %57, i32 0, i32 1
  %60 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %57, i32 0, i32 2
  %61 = fmul double %stepSize, 5.000000e-01
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %__qsVar0__idx__, i64* %58, align 4
  store double %61, double* %59, align 8
  store %Array* %target, %Array** %60, align 8
  store %Array* %__controlQubits__, %Array** %54, align 8
  store { i64, double, %Array* }* %57, { i64, double, %Array* }** %55, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %51, %Tuple* %52, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %51, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %51, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %52, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %62 = add i64 %__qsVar0__idx__, %45
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____body(i64 %order, { i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = icmp sgt i64 %order, 2
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %stepSizeOuter = call double @Microsoft__Quantum__Canon____QsRef1__TrotterStepSize____body(i64 %order)
  %4 = fmul double 4.000000e+00, %stepSizeOuter
  %stepSizeInner = fsub double 1.000000e+00, %4
  %5 = sub i64 %order, 2
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Callable* }*
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %7, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %8, align 4
  store %Callable* %op, %Callable** %9, align 8
  %10 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____body(i64 %5, { i64, %Callable* }* %7, double %10, %Array* %target)
  %11 = sub i64 %order, 2
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %14, align 4
  store %Callable* %op, %Callable** %15, align 8
  %16 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____body(i64 %11, { i64, %Callable* }* %13, double %16, %Array* %target)
  %17 = sub i64 %order, 2
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { i64, %Callable* }*
  %20 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %19, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %20, align 4
  store %Callable* %op, %Callable** %21, align 8
  %22 = fmul double %stepSizeInner, %stepSize
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____body(i64 %17, { i64, %Callable* }* %19, double %22, %Array* %target)
  %23 = sub i64 %order, 2
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { i64, %Callable* }*
  %26 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %25, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %26, align 4
  store %Callable* %op, %Callable** %27, align 8
  %28 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____body(i64 %23, { i64, %Callable* }* %25, double %28, %Array* %target)
  %29 = sub i64 %order, 2
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { i64, %Callable* }*
  %32 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %31, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %32, align 4
  store %Callable* %op, %Callable** %33, align 8
  %34 = fmul double %stepSizeOuter, %stepSize
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____body(i64 %29, { i64, %Callable* }* %31, double %34, %Array* %target)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %35 = icmp eq i64 %order, 2
  br i1 %35, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { i64, %Callable* }*
  %38 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %37, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %38, align 4
  store %Callable* %op, %Callable** %39, align 8
  call void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____body({ i64, %Callable* }* %37, double %stepSize, %Array* %target)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i64, %Callable* }*
  %42 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %41, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %42, align 4
  store %Callable* %op, %Callable** %43, align 8
  call void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____body({ i64, %Callable* }* %41, double %stepSize, %Array* %target)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____body({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %4 = icmp sle i64 %idx, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, double, %Array* }*
  %7 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %6, i32 0, i32 1
  %9 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %6, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %idx, i64* %7, align 4
  store double %stepSize, double* %8, align 8
  store %Array* %target, %Array** %9, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %5, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____adj(i64 %order, { i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = icmp sgt i64 %order, 2
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %__qsVar0__stepSizeOuter__ = call double @Microsoft__Quantum__Canon____QsRef1__TrotterStepSize____body(i64 %order)
  %4 = fmul double 4.000000e+00, %__qsVar0__stepSizeOuter__
  %__qsVar1__stepSizeInner__ = fsub double 1.000000e+00, %4
  %5 = sub i64 %order, 2
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Callable* }*
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %7, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %8, align 4
  store %Callable* %op, %Callable** %9, align 8
  %10 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____adj(i64 %5, { i64, %Callable* }* %7, double %10, %Array* %target)
  %11 = sub i64 %order, 2
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %14, align 4
  store %Callable* %op, %Callable** %15, align 8
  %16 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____adj(i64 %11, { i64, %Callable* }* %13, double %16, %Array* %target)
  %17 = sub i64 %order, 2
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { i64, %Callable* }*
  %20 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %19, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %20, align 4
  store %Callable* %op, %Callable** %21, align 8
  %22 = fmul double %__qsVar1__stepSizeInner__, %stepSize
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____adj(i64 %17, { i64, %Callable* }* %19, double %22, %Array* %target)
  %23 = sub i64 %order, 2
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { i64, %Callable* }*
  %26 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %25, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %26, align 4
  store %Callable* %op, %Callable** %27, align 8
  %28 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____adj(i64 %23, { i64, %Callable* }* %25, double %28, %Array* %target)
  %29 = sub i64 %order, 2
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { i64, %Callable* }*
  %32 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %31, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %32, align 4
  store %Callable* %op, %Callable** %33, align 8
  %34 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____adj(i64 %29, { i64, %Callable* }* %31, double %34, %Array* %target)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %35 = icmp eq i64 %order, 2
  br i1 %35, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { i64, %Callable* }*
  %38 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %37, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %38, align 4
  store %Callable* %op, %Callable** %39, align 8
  call void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____adj({ i64, %Callable* }* %37, double %stepSize, %Array* %target)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %40 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %41 = bitcast %Tuple* %40 to { i64, %Callable* }*
  %42 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %41, i32 0, i32 0
  %43 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %41, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %42, align 4
  store %Callable* %op, %Callable** %43, align 8
  call void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____adj({ i64, %Callable* }* %41, double %stepSize, %Array* %target)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____adj({ i64, %Callable* }* %0, double %stepSize, %Array* %target) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = sub i64 %nSteps, 1
  %4 = sub i64 %3, 0
  %5 = sdiv i64 %4, 1
  %6 = mul i64 1, %5
  %7 = add i64 0, %6
  %8 = load %Range, %Range* @EmptyRange, align 4
  %9 = insertvalue %Range %8, i64 %7, 0
  %10 = insertvalue %Range %9, i64 -1, 1
  %11 = insertvalue %Range %10, i64 0, 2
  %12 = extractvalue %Range %11, 0
  %13 = extractvalue %Range %11, 1
  %14 = extractvalue %Range %11, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %15 = icmp sgt i64 %13, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idx__ = phi i64 [ %12, %preheader__1 ], [ %25, %exiting__1 ]
  %16 = icmp sle i64 %__qsVar0__idx__, %14
  %17 = icmp sge i64 %__qsVar0__idx__, %14
  %18 = select i1 %15, i1 %16, i1 %17
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %19)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { i64, double, %Array* }*
  %22 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %21, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %__qsVar0__idx__, i64* %22, align 4
  store double %stepSize, double* %23, align 8
  store %Array* %target, %Array** %24, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %19, %Tuple* %20, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %19, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %25 = add i64 %__qsVar0__idx__, %13
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %order = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = load { i64, %Callable* }*, { i64, %Callable* }** %2, align 8
  %4 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %stepSize = load double, double* %4, align 8
  %5 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 3
  %target = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %6 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %3, i32 0, i32 0
  %nSteps = load i64, i64* %6, align 4
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %3, i32 0, i32 1
  %op = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %8 = icmp sgt i64 %order, 2
  br i1 %8, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %stepSizeOuter = call double @Microsoft__Quantum__Canon____QsRef1__TrotterStepSize____body(i64 %order)
  %9 = fmul double 4.000000e+00, %stepSizeOuter
  %stepSizeInner = fsub double 1.000000e+00, %9
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, { i64, %Callable* }*, double, %Array* }*
  %12 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i32 0, i32 3
  %16 = sub i64 %order, 2
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { i64, %Callable* }*
  %19 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %18, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %19, align 4
  store %Callable* %op, %Callable** %20, align 8
  %21 = fmul double %stepSizeOuter, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %16, i64* %12, align 4
  store { i64, %Callable* }* %18, { i64, %Callable* }** %13, align 8
  store double %21, double* %14, align 8
  store %Array* %target, %Array** %15, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %11)
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { i64, { i64, %Callable* }*, double, %Array* }*
  %24 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i32 0, i32 0
  %25 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i32 0, i32 1
  %26 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i32 0, i32 2
  %27 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i32 0, i32 3
  %28 = sub i64 %order, 2
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i64, %Callable* }*
  %31 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %30, i32 0, i32 0
  %32 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %30, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %31, align 4
  store %Callable* %op, %Callable** %32, align 8
  %33 = fmul double %stepSizeOuter, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %28, i64* %24, align 4
  store { i64, %Callable* }* %30, { i64, %Callable* }** %25, align 8
  store double %33, double* %26, align 8
  store %Array* %target, %Array** %27, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %23)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { i64, { i64, %Callable* }*, double, %Array* }*
  %36 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i32 0, i32 0
  %37 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i32 0, i32 1
  %38 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i32 0, i32 2
  %39 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i32 0, i32 3
  %40 = sub i64 %order, 2
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { i64, %Callable* }*
  %43 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %42, i32 0, i32 0
  %44 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %42, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %43, align 4
  store %Callable* %op, %Callable** %44, align 8
  %45 = fmul double %stepSizeInner, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %40, i64* %36, align 4
  store { i64, %Callable* }* %42, { i64, %Callable* }** %37, align 8
  store double %45, double* %38, align 8
  store %Array* %target, %Array** %39, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %35)
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %47 = bitcast %Tuple* %46 to { i64, { i64, %Callable* }*, double, %Array* }*
  %48 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i32 0, i32 0
  %49 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i32 0, i32 1
  %50 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i32 0, i32 2
  %51 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i32 0, i32 3
  %52 = sub i64 %order, 2
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { i64, %Callable* }*
  %55 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %54, i32 0, i32 0
  %56 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %54, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %55, align 4
  store %Callable* %op, %Callable** %56, align 8
  %57 = fmul double %stepSizeOuter, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %52, i64* %48, align 4
  store { i64, %Callable* }* %54, { i64, %Callable* }** %49, align 8
  store double %57, double* %50, align 8
  store %Array* %target, %Array** %51, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %47)
  %58 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %59 = bitcast %Tuple* %58 to { i64, { i64, %Callable* }*, double, %Array* }*
  %60 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i32 0, i32 0
  %61 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i32 0, i32 1
  %62 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i32 0, i32 2
  %63 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i32 0, i32 3
  %64 = sub i64 %order, 2
  %65 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %66 = bitcast %Tuple* %65 to { i64, %Callable* }*
  %67 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %66, i32 0, i32 0
  %68 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %66, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %67, align 4
  store %Callable* %op, %Callable** %68, align 8
  %69 = fmul double %stepSizeOuter, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %64, i64* %60, align 4
  store { i64, %Callable* }* %66, { i64, %Callable* }** %61, align 8
  store double %69, double* %62, align 8
  store %Array* %target, %Array** %63, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctl(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %59)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %46, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %58, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %70 = icmp eq i64 %order, 2
  br i1 %70, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { { i64, %Callable* }*, double, %Array* }*
  %73 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i32 0, i32 0
  %74 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i32 0, i32 1
  %75 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i32 0, i32 2
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %77 = bitcast %Tuple* %76 to { i64, %Callable* }*
  %78 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %77, i32 0, i32 0
  %79 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %77, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %78, align 4
  store %Callable* %op, %Callable** %79, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store { i64, %Callable* }* %77, { i64, %Callable* }** %73, align 8
  store double %stepSize, double* %74, align 8
  store %Array* %target, %Array** %75, align 8
  call void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %72)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %76, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %71, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %80 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %81 = bitcast %Tuple* %80 to { { i64, %Callable* }*, double, %Array* }*
  %82 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i32 0, i32 0
  %83 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i32 0, i32 1
  %84 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i32 0, i32 2
  %85 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %86 = bitcast %Tuple* %85 to { i64, %Callable* }*
  %87 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %86, i32 0, i32 0
  %88 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %86, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %87, align 4
  store %Callable* %op, %Callable** %88, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store { i64, %Callable* }* %86, { i64, %Callable* }** %82, align 8
  store double %stepSize, double* %83, align 8
  store %Array* %target, %Array** %84, align 8
  call void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %81)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %85, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____ctl(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %3, align 8
  %4 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 0
  %nSteps = load i64, i64* %5, align 4
  %6 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 1
  %op = load %Callable*, %Callable** %6, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %7 = sub i64 %nSteps, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idx = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %8 = icmp sle i64 %idx, %7
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %9)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, double, %Array* }* }* getelementptr ({ %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, { i64, double, %Array* }* }*
  %12 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %11, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, double, %Array* }*
  %16 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %15, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %idx, i64* %16, align 4
  store double %stepSize, double* %17, align 8
  store %Array* %target, %Array** %18, align 8
  store %Array* %__controlQubits__, %Array** %12, align 8
  store { i64, double, %Array* }* %15, { i64, double, %Array* }** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %10, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %idx, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %order = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = load { i64, %Callable* }*, { i64, %Callable* }** %2, align 8
  %4 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %stepSize = load double, double* %4, align 8
  %5 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 3
  %target = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %6 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %3, i32 0, i32 0
  %nSteps = load i64, i64* %6, align 4
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %3, i32 0, i32 1
  %op = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %8 = icmp sgt i64 %order, 2
  br i1 %8, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %__qsVar0__stepSizeOuter__ = call double @Microsoft__Quantum__Canon____QsRef1__TrotterStepSize____body(i64 %order)
  %9 = fmul double 4.000000e+00, %__qsVar0__stepSizeOuter__
  %__qsVar1__stepSizeInner__ = fsub double 1.000000e+00, %9
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, { i64, %Callable* }*, double, %Array* }*
  %12 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %11, i32 0, i32 3
  %16 = sub i64 %order, 2
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { i64, %Callable* }*
  %19 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %18, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %19, align 4
  store %Callable* %op, %Callable** %20, align 8
  %21 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %16, i64* %12, align 4
  store { i64, %Callable* }* %18, { i64, %Callable* }** %13, align 8
  store double %21, double* %14, align 8
  store %Array* %target, %Array** %15, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %11)
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { i64, { i64, %Callable* }*, double, %Array* }*
  %24 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i32 0, i32 0
  %25 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i32 0, i32 1
  %26 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i32 0, i32 2
  %27 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %23, i32 0, i32 3
  %28 = sub i64 %order, 2
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i64, %Callable* }*
  %31 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %30, i32 0, i32 0
  %32 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %30, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %31, align 4
  store %Callable* %op, %Callable** %32, align 8
  %33 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %28, i64* %24, align 4
  store { i64, %Callable* }* %30, { i64, %Callable* }** %25, align 8
  store double %33, double* %26, align 8
  store %Array* %target, %Array** %27, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %23)
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %35 = bitcast %Tuple* %34 to { i64, { i64, %Callable* }*, double, %Array* }*
  %36 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i32 0, i32 0
  %37 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i32 0, i32 1
  %38 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i32 0, i32 2
  %39 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %35, i32 0, i32 3
  %40 = sub i64 %order, 2
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { i64, %Callable* }*
  %43 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %42, i32 0, i32 0
  %44 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %42, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %43, align 4
  store %Callable* %op, %Callable** %44, align 8
  %45 = fmul double %__qsVar1__stepSizeInner__, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %40, i64* %36, align 4
  store { i64, %Callable* }* %42, { i64, %Callable* }** %37, align 8
  store double %45, double* %38, align 8
  store %Array* %target, %Array** %39, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %35)
  %46 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %47 = bitcast %Tuple* %46 to { i64, { i64, %Callable* }*, double, %Array* }*
  %48 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i32 0, i32 0
  %49 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i32 0, i32 1
  %50 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i32 0, i32 2
  %51 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %47, i32 0, i32 3
  %52 = sub i64 %order, 2
  %53 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %54 = bitcast %Tuple* %53 to { i64, %Callable* }*
  %55 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %54, i32 0, i32 0
  %56 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %54, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %55, align 4
  store %Callable* %op, %Callable** %56, align 8
  %57 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %52, i64* %48, align 4
  store { i64, %Callable* }* %54, { i64, %Callable* }** %49, align 8
  store double %57, double* %50, align 8
  store %Array* %target, %Array** %51, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %47)
  %58 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %59 = bitcast %Tuple* %58 to { i64, { i64, %Callable* }*, double, %Array* }*
  %60 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i32 0, i32 0
  %61 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i32 0, i32 1
  %62 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i32 0, i32 2
  %63 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %59, i32 0, i32 3
  %64 = sub i64 %order, 2
  %65 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %66 = bitcast %Tuple* %65 to { i64, %Callable* }*
  %67 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %66, i32 0, i32 0
  %68 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %66, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %67, align 4
  store %Callable* %op, %Callable** %68, align 8
  %69 = fmul double %__qsVar0__stepSizeOuter__, %stepSize
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %64, i64* %60, align 4
  store { i64, %Callable* }* %66, { i64, %Callable* }** %61, align 8
  store double %69, double* %62, align 8
  store %Array* %target, %Array** %63, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctladj(%Array* %__controlQubits__, { i64, { i64, %Callable* }*, double, %Array* }* %59)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %53, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %46, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %58, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %70 = icmp eq i64 %order, 2
  br i1 %70, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %71 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %72 = bitcast %Tuple* %71 to { { i64, %Callable* }*, double, %Array* }*
  %73 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i32 0, i32 0
  %74 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i32 0, i32 1
  %75 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %72, i32 0, i32 2
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %77 = bitcast %Tuple* %76 to { i64, %Callable* }*
  %78 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %77, i32 0, i32 0
  %79 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %77, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %78, align 4
  store %Callable* %op, %Callable** %79, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store { i64, %Callable* }* %77, { i64, %Callable* }** %73, align 8
  store double %stepSize, double* %74, align 8
  store %Array* %target, %Array** %75, align 8
  call void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %72)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %76, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %71, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %80 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %81 = bitcast %Tuple* %80 to { { i64, %Callable* }*, double, %Array* }*
  %82 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i32 0, i32 0
  %83 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i32 0, i32 1
  %84 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %81, i32 0, i32 2
  %85 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %86 = bitcast %Tuple* %85 to { i64, %Callable* }*
  %87 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %86, i32 0, i32 0
  %88 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %86, i32 0, i32 1
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store i64 %nSteps, i64* %87, align 4
  store %Callable* %op, %Callable** %88, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store { i64, %Callable* }* %86, { i64, %Callable* }** %82, align 8
  store double %stepSize, double* %83, align 8
  store %Array* %target, %Array** %84, align 8
  call void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %81)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %85, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____ctladj(%Array* %__controlQubits__, { { i64, %Callable* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %3, align 8
  %4 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 0
  %nSteps = load i64, i64* %5, align 4
  %6 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %2, i32 0, i32 1
  %op = load %Callable*, %Callable** %6, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %7 = sub i64 %nSteps, 1
  %8 = sub i64 %7, 0
  %9 = sdiv i64 %8, 1
  %10 = mul i64 1, %9
  %11 = add i64 0, %10
  %12 = load %Range, %Range* @EmptyRange, align 4
  %13 = insertvalue %Range %12, i64 %11, 0
  %14 = insertvalue %Range %13, i64 -1, 1
  %15 = insertvalue %Range %14, i64 0, 2
  %16 = extractvalue %Range %15, 0
  %17 = extractvalue %Range %15, 1
  %18 = extractvalue %Range %15, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %19 = icmp sgt i64 %17, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idx__ = phi i64 [ %16, %preheader__1 ], [ %33, %exiting__1 ]
  %20 = icmp sle i64 %__qsVar0__idx__, %18
  %21 = icmp sge i64 %__qsVar0__idx__, %18
  %22 = select i1 %19, i1 %20, i1 %21
  br i1 %22, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, double, %Array* }* }* getelementptr ({ %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Array*, { i64, double, %Array* }* }*
  %26 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %25, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, double, %Array* }* getelementptr ({ i64, double, %Array* }, { i64, double, %Array* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { i64, double, %Array* }*
  %30 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %29, i32 0, i32 0
  %31 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %29, i32 0, i32 1
  %32 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %29, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store i64 %__qsVar0__idx__, i64* %30, align 4
  store double %stepSize, double* %31, align 8
  store %Array* %target, %Array** %32, align 8
  store %Array* %__controlQubits__, %Array** %26, align 8
  store { i64, double, %Array* }* %29, { i64, double, %Array* }** %27, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %33 = add i64 %__qsVar0__idx__, %17
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__body(%Array* %input) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__adj(%Array* %input) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__ctl(%Array* %__controlQubits__, %Array* %input) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__ctladj(%Array* %__controlQubits__, %Array* %input) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %input, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__body(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %1 = call %Callable* @Microsoft__Quantum__Canon___05f9910a54034c8a9c8315d9c5610c6b_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %3 = bitcast %Tuple* %2 to { %Array*, %Qubit* }*
  %4 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %3, i32 0, i32 0
  %5 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %3, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  store %Array* %controlRegister, %Array** %4, align 8
  store %Qubit* %targetRegister, %Qubit** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %1, %Tuple* %2, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %number, i64 %bits) {
entry:
  %0 = icmp sge i64 %bits, 0
  br i1 %0, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %entry
  %1 = icmp sle i64 %bits, 63
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %entry
  %2 = phi i1 [ %1, %condTrue__1 ], [ %0, %entry ]
  %3 = trunc i64 %bits to i32
  %4 = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 %3)
  %5 = fptosi double %4 to i64
  %6 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @34, i32 0, i32 0))
  %7 = call %String* @__quantum__rt__int_to_string(i64 %5)
  %8 = call %String* @__quantum__rt__string_concatenate(%String* %6, %String* %7)
  call void @__quantum__rt__string_update_reference_count(%String* %6, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %7, i32 -1)
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %8)
  %9 = icmp slt i64 %bits, 63
  br i1 %9, label %condTrue__2, label %condFalse__1

condTrue__2:                                      ; preds = %condContinue__1
  %10 = shl i64 1, %bits
  br label %condContinue__2

condFalse__1:                                     ; preds = %condContinue__1
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__1, %condTrue__2
  %max = phi i64 [ %10, %condTrue__2 ], [ 9223372036854775807, %condFalse__1 ]
  %11 = icmp sge i64 %number, 0
  br i1 %11, label %condTrue__3, label %condContinue__3

condTrue__3:                                      ; preds = %condContinue__2
  %12 = icmp sle i64 %number, %max
  br label %condContinue__3

condContinue__3:                                  ; preds = %condTrue__3, %condContinue__2
  %13 = phi i1 [ %12, %condTrue__3 ], [ %11, %condContinue__2 ]
  %14 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @35, i32 0, i32 0))
  %15 = call %String* @__quantum__rt__int_to_string(i64 %bits)
  %16 = call %String* @__quantum__rt__string_concatenate(%String* %14, %String* %15)
  call void @__quantum__rt__string_update_reference_count(%String* %14, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %15, i32 -1)
  %17 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @36, i32 0, i32 0))
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i32 -1)
  %19 = call %String* @__quantum__rt__int_to_string(i64 %number)
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i32 -1)
  %21 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @22, i32 0, i32 0))
  %22 = call %String* @__quantum__rt__string_concatenate(%String* %20, %String* %21)
  call void @__quantum__rt__string_update_reference_count(%String* %20, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %21, i32 -1)
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %13, %String* %22)
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %bits)
  %24 = sub i64 %bits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %condContinue__3
  %25 = phi i64 [ 0, %condContinue__3 ], [ %29, %exiting__1 ]
  %26 = icmp sle i64 %25, %24
  br i1 %26, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 %25)
  %28 = bitcast i8* %27 to i1*
  store i1 false, i1* %28, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %29 = add i64 %25, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %outputBits = alloca %Array*, align 8
  store %Array* %23, %Array** %outputBits, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %tempInt = alloca i64, align 8
  store i64 %number, i64* %tempInt, align 4
  %30 = sub i64 %bits, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idxBit = phi i64 [ 0, %exit__1 ], [ %41, %exiting__2 ]
  %31 = icmp sle i64 %idxBit, %30
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = load %Array*, %Array** %outputBits, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  %33 = call %Array* @__quantum__rt__array_copy(%Array* %32, i1 false)
  %34 = load i64, i64* %tempInt, align 4
  %35 = srem i64 %34, 2
  %36 = icmp eq i64 %35, 0
  %37 = select i1 %36, i1 false, i1 true
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 %idxBit)
  %39 = bitcast i8* %38 to i1*
  store i1 %37, i1* %39, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 1)
  store %Array* %33, %Array** %outputBits, align 8
  %40 = sdiv i64 %34, 2
  store i64 %40, i64* %tempInt, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %41 = add i64 %idxBit, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %42 = load %Array*, %Array** %outputBits, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %22, i32 -1)
  ret %Array* %42
}

define internal %Callable* @Microsoft__Quantum__Canon___05f9910a54034c8a9c8315d9c5610c6b_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array*, %Callable* }* getelementptr ({ %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array*, %Callable* }*
  %2 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i32 0, i32 1
  %4 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i32 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 1)
  store %Callable* %5, %Callable** %2, align 8
  store %Array* %bits, %Array** %3, align 8
  store %Callable* %oracle, %Callable** %4, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__22__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__12__FunctionTable, %Tuple* %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  ret %Callable* %6
}

define internal void @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__adj(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 1)
  %1 = call %Callable* @Microsoft__Quantum__Canon___05f9910a54034c8a9c8315d9c5610c6b_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %2 = call %Callable* @__quantum__rt__callable_copy(%Callable* %1, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %2)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array*, %Qubit* }*
  %5 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  store %Array* %controlRegister, %Array** %5, align 8
  store %Qubit* %targetRegister, %Qubit** %6, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %3, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__ctl(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %numberState = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %6 = call %Callable* @Microsoft__Quantum__Canon___05f9910a54034c8a9c8315d9c5610c6b_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array*, %Qubit* }* }*
  %10 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %9, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Qubit* }*
  %14 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  store %Array* %controlRegister, %Array** %14, align 8
  store %Qubit* %targetRegister, %Qubit** %15, align 8
  store %Array* %__controlQubits__, %Array** %10, align 8
  store { %Array*, %Qubit* }* %13, { %Array*, %Qubit* }** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__ctladj(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %numberState = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 1)
  %6 = call %Callable* @Microsoft__Quantum__Canon___05f9910a54034c8a9c8315d9c5610c6b_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %7)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array*, %Qubit* }* }*
  %10 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %9, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Qubit* }*
  %14 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  store %Array* %controlRegister, %Array** %14, align 8
  store %Qubit* %targetRegister, %Qubit** %15, align 8
  store %Array* %__controlQubits__, %Array** %10, align 8
  store { %Array*, %Qubit* }* %13, { %Array*, %Qubit* }** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__body(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %1 = call %Callable* @Microsoft__Quantum__Canon___47c9a8e720a0402e8f593ab7918f441f_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %3 = bitcast %Tuple* %2 to { %Array*, %Array* }*
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  store %Array* %controlRegister, %Array** %4, align 8
  store %Array* %targetRegister, %Array** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %1, %Tuple* %2, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___47c9a8e720a0402e8f593ab7918f441f_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array*, %Callable* }* getelementptr ({ %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array*, %Callable* }*
  %2 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i32 0, i32 1
  %4 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %1, i32 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 1)
  store %Callable* %5, %Callable** %2, align 8
  store %Array* %bits, %Array** %3, align 8
  store %Callable* %oracle, %Callable** %4, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__23__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__13__FunctionTable, %Tuple* %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  ret %Callable* %6
}

define internal void @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__adj(i64 %numberState, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 1)
  %1 = call %Callable* @Microsoft__Quantum__Canon___47c9a8e720a0402e8f593ab7918f441f_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %2 = call %Callable* @__quantum__rt__callable_copy(%Callable* %1, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %2)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array*, %Array* }*
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  store %Array* %controlRegister, %Array** %5, align 8
  store %Array* %targetRegister, %Array** %6, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %3, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__ctl(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %numberState = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %targetRegister = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %bits = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %6 = call %Callable* @Microsoft__Quantum__Canon___47c9a8e720a0402e8f593ab7918f441f_ControlledOnBitString__body(%Array* %bits, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array*, %Array* }* }*
  %10 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %9, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Array* }*
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  store %Array* %controlRegister, %Array** %14, align 8
  store %Array* %targetRegister, %Array** %15, align 8
  store %Array* %__controlQubits__, %Array** %10, align 8
  store { %Array*, %Array* }* %13, { %Array*, %Array* }** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__ctladj(%Array* %__controlQubits__, { i64, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %numberState = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %targetRegister = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %__qsVar0__bits__ = call %Array* @Microsoft__Quantum__Convert__IntAsBoolArray__body(i64 %numberState, i64 %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 1)
  %6 = call %Callable* @Microsoft__Quantum__Canon___47c9a8e720a0402e8f593ab7918f441f_ControlledOnBitString__body(%Array* %__qsVar0__bits__, %Callable* %oracle)
  %7 = call %Callable* @__quantum__rt__callable_copy(%Callable* %6, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %7)
  call void @__quantum__rt__callable_make_controlled(%Callable* %7)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, { %Array*, %Array* }* }*
  %10 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %9, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Array* }*
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %13, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  store %Array* %controlRegister, %Array** %14, align 8
  store %Array* %targetRegister, %Array** %15, align 8
  store %Array* %__controlQubits__, %Array** %10, align 8
  store { %Array*, %Array* }* %13, { %Array*, %Array* }** %11, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %7, %Tuple* %8, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__bits__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___76fba6cab0944055820a95dde131bcd9_BoundCA__body(%Array* %operations) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %operations)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %13 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %14)
  %17 = bitcast i8* %16 to %Callable**
  %18 = load %Callable*, %Callable** %17, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %operations, i32 1)
  store %Callable* %12, %Callable** %10, align 8
  store %Array* %operations, %Array** %11, align 8
  %20 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__16__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__6__FunctionTable, %Tuple* %8)
  %21 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %22 = phi i64 [ 0, %exit__2 ], [ %27, %exiting__3 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %operations, i64 %22)
  %25 = bitcast i8* %24 to %Callable**
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %27 = add i64 %22, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %operations, i32 -1)
  ret %Callable* %20
}

define internal void @Lifted__PartialApplication__16__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__16__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__16__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__16__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____body(%Array* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____adj(%Array* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____ctl(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___c736421e6b5a4db0a0b6b9144e5f7dea___QsRef1__ApplyBoundCA____ctladj(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__6__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__6__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %11, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___97989c0516e045d58b685c2060226bd1_Compose__body(%Callable* %outer, %Callable* %inner) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Callable*, %Callable* }*
  %2 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i32 0, i32 1
  %4 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i32 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___11c79ab270fa4d91ab1a5b7fb6d4bd5d___QsRef1__ComposedOutput____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %inner, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %inner, i32 1)
  store %Callable* %5, %Callable** %2, align 8
  store %Callable* %outer, %Callable** %3, align 8
  store %Callable* %inner, %Callable** %4, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__17__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__7__FunctionTable, %Tuple* %0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 -1)
  ret %Callable* %6
}

define internal void @Lifted__PartialApplication__17__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { double }*
  %6 = getelementptr inbounds { double }, { double }* %5, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, double }* getelementptr ({ %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Callable*, double }*
  %10 = getelementptr inbounds { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store %Callable* %4, %Callable** %11, align 8
  store double %7, double* %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___11c79ab270fa4d91ab1a5b7fb6d4bd5d___QsRef1__ComposedOutput____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, %Callable*, double }, { %Callable*, %Callable*, double }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load %Callable*, %Callable** %2, align 8
  %6 = load double, double* %3, align 8
  %7 = call { double, double }* @Microsoft__Quantum__Canon___11c79ab270fa4d91ab1a5b7fb6d4bd5d___QsRef1__ComposedOutput____body(%Callable* %4, %Callable* %5, double %6)
  %8 = bitcast %Tuple* %result-tuple to { { double, double }* }*
  %9 = getelementptr inbounds { { double, double }* }, { { double, double }* }* %8, i32 0, i32 0
  store { double, double }* %7, { double, double }** %9, align 8
  ret void
}

define internal void @MemoryManagement__7__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__7__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal { double, double }* @Microsoft__Quantum__Canon___11c79ab270fa4d91ab1a5b7fb6d4bd5d___QsRef1__ComposedOutput____body(%Callable* %outer, %Callable* %inner, double %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double }*
  %2 = getelementptr inbounds { double }, { double }* %1, i32 0, i32 0
  store double %target, double* %2, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %inner, %Tuple* %0, %Tuple* %3)
  %4 = bitcast %Tuple* %3 to { double }*
  %5 = getelementptr inbounds { double }, { double }* %4, i32 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { double }*
  %9 = getelementptr inbounds { double }, { double }* %8, i32 0, i32 0
  store double %6, double* %9, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }* }* getelementptr ({ { double, double }* }, { { double, double }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %outer, %Tuple* %7, %Tuple* %10)
  %11 = bitcast %Tuple* %10 to { { double, double }* }*
  %12 = getelementptr inbounds { { double, double }* }, { { double, double }* }* %11, i32 0, i32 0
  %13 = load { double, double }*, { double, double }** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret { double, double }* %13
}

define internal %Callable* @Microsoft__Quantum__Canon___b2c3788ae8024c4c81804222891f5019_Compose__body(%Callable* %outer, %Callable* %inner) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Callable*, %Callable* }*
  %2 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i32 0, i32 1
  %4 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i32 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___7c1d4e110efc45d686748c23da837b88___QsRef1__ComposedOutput____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %inner, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %inner, i32 1)
  store %Callable* %5, %Callable** %2, align 8
  store %Callable* %outer, %Callable** %3, align 8
  store %Callable* %inner, %Callable** %4, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__18__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__8__FunctionTable, %Tuple* %0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 -1)
  ret %Callable* %6
}

define internal void @Lifted__PartialApplication__18__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { i64 }*
  %6 = getelementptr inbounds { i64 }, { i64 }* %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 4
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, i64 }* getelementptr ({ %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Callable*, i64 }*
  %10 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store %Callable* %4, %Callable** %11, align 8
  store i64 %7, i64* %12, align 4
  %13 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___7c1d4e110efc45d686748c23da837b88___QsRef1__ComposedOutput____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load %Callable*, %Callable** %2, align 8
  %6 = load i64, i64* %3, align 4
  %7 = call double @Microsoft__Quantum__Canon___7c1d4e110efc45d686748c23da837b88___QsRef1__ComposedOutput____body(%Callable* %4, %Callable* %5, i64 %6)
  %8 = bitcast %Tuple* %result-tuple to { double }*
  %9 = getelementptr inbounds { double }, { double }* %8, i32 0, i32 0
  store double %7, double* %9, align 8
  ret void
}

define internal void @MemoryManagement__8__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__8__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal double @Microsoft__Quantum__Canon___7c1d4e110efc45d686748c23da837b88___QsRef1__ComposedOutput____body(%Callable* %outer, %Callable* %inner, i64 %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i64 }*
  %2 = getelementptr inbounds { i64 }, { i64 }* %1, i32 0, i32 0
  store i64 %target, i64* %2, align 4
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %inner, %Tuple* %0, %Tuple* %3)
  %4 = bitcast %Tuple* %3 to { %Array* }*
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %4, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array* }*
  %9 = getelementptr inbounds { %Array* }, { %Array* }* %8, i32 0, i32 0
  store %Array* %6, %Array** %9, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %outer, %Tuple* %7, %Tuple* %10)
  %11 = bitcast %Tuple* %10 to { double }*
  %12 = getelementptr inbounds { double }, { double }* %11, i32 0, i32 0
  %13 = load double, double* %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret double %13
}

define internal %Callable* @Microsoft__Quantum__Canon___8ef78cf708ed4088adeed7b7fd342f5b_Compose__body(%Callable* %outer, %Callable* %inner) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Callable*, %Callable* }*
  %2 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i32 0, i32 1
  %4 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %1, i32 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___80e474e595394349a32401558841bc5d___QsRef1__ComposedOutput____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %inner, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %inner, i32 1)
  store %Callable* %5, %Callable** %2, align 8
  store %Callable* %outer, %Callable** %3, align 8
  store %Callable* %inner, %Callable** %4, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__19__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__9__FunctionTable, %Tuple* %0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 -1)
  ret %Callable* %6
}

define internal void @Lifted__PartialApplication__19__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { i64 }*
  %6 = getelementptr inbounds { i64 }, { i64 }* %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 4
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable*, i64 }* getelementptr ({ %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Callable*, i64 }*
  %10 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store %Callable* %4, %Callable** %11, align 8
  store i64 %7, i64* %12, align 4
  %13 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___80e474e595394349a32401558841bc5d___QsRef1__ComposedOutput____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, %Callable*, i64 }, { %Callable*, %Callable*, i64 }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load %Callable*, %Callable** %2, align 8
  %6 = load i64, i64* %3, align 4
  %7 = call i64 @Microsoft__Quantum__Canon___80e474e595394349a32401558841bc5d___QsRef1__ComposedOutput____body(%Callable* %4, %Callable* %5, i64 %6)
  %8 = bitcast %Tuple* %result-tuple to { i64 }*
  %9 = getelementptr inbounds { i64 }, { i64 }* %8, i32 0, i32 0
  store i64 %7, i64* %9, align 4
  ret void
}

define internal void @MemoryManagement__9__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__9__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Callable*, %Callable* }, { %Callable*, %Callable*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal i64 @Microsoft__Quantum__Canon___80e474e595394349a32401558841bc5d___QsRef1__ComposedOutput____body(%Callable* %outer, %Callable* %inner, i64 %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i64 }*
  %2 = getelementptr inbounds { i64 }, { i64 }* %1, i32 0, i32 0
  store i64 %target, i64* %2, align 4
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %inner, %Tuple* %0, %Tuple* %3)
  %4 = bitcast %Tuple* %3 to { %Array* }*
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %4, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array* }*
  %9 = getelementptr inbounds { %Array* }, { %Array* }* %8, i32 0, i32 0
  store %Array* %6, %Array** %9, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %outer, %Tuple* %7, %Tuple* %10)
  %11 = bitcast %Tuple* %10 to { i64 }*
  %12 = getelementptr inbounds { i64 }, { i64 }* %11, i32 0, i32 0
  %13 = load i64, i64* %12, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %outer, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %inner, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %inner, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret i64 %13
}

define internal void @Microsoft__Quantum__Canon___0f6039caba3447ba9af5384ce34aedbd_ApplyToEachCA__body(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %0 = call %Range @Microsoft__Quantum__Arrays___6dadefcae19c42a986c668221ac18f87_IndexRange__body(%Array* %register)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %4 = icmp sgt i64 %2, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxQubit = phi i64 [ %1, %preheader__1 ], [ %14, %exiting__1 ]
  %5 = icmp sle i64 %idxQubit, %3
  %6 = icmp sge i64 %idxQubit, %3
  %7 = select i1 %4, i1 %5, i1 %6
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %9 = bitcast i8* %8 to %Qubit**
  %10 = load %Qubit*, %Qubit** %9, align 8
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Qubit* }*
  %13 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %12, i32 0, i32 0
  store %Qubit* %10, %Qubit** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %singleElementOperation, %Tuple* %11, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %14 = add i64 %idxQubit, %2
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal %Range @Microsoft__Quantum__Arrays___6dadefcae19c42a986c668221ac18f87_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = load %Range, %Range* @EmptyRange, align 4
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %5
}

define internal void @Microsoft__Quantum__Canon___0f6039caba3447ba9af5384ce34aedbd_ApplyToEachCA__adj(%Callable* %singleElementOperation, %Array* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %0 = call %Range @Microsoft__Quantum__Arrays___6dadefcae19c42a986c668221ac18f87_IndexRange__body(%Array* %register)
  %1 = extractvalue %Range %0, 0
  %2 = extractvalue %Range %0, 1
  %3 = extractvalue %Range %0, 2
  %4 = sub i64 %3, %1
  %5 = sdiv i64 %4, %2
  %6 = mul i64 %2, %5
  %7 = add i64 %1, %6
  %8 = sub i64 0, %2
  %9 = load %Range, %Range* @EmptyRange, align 4
  %10 = insertvalue %Range %9, i64 %7, 0
  %11 = insertvalue %Range %10, i64 %8, 1
  %12 = insertvalue %Range %11, i64 %1, 2
  %13 = extractvalue %Range %12, 0
  %14 = extractvalue %Range %12, 1
  %15 = extractvalue %Range %12, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %16 = icmp sgt i64 %14, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxQubit__ = phi i64 [ %13, %preheader__1 ], [ %27, %exiting__1 ]
  %17 = icmp sle i64 %__qsVar0__idxQubit__, %15
  %18 = icmp sge i64 %__qsVar0__idxQubit__, %15
  %19 = select i1 %16, i1 %17, i1 %18
  br i1 %19, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %20 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %20, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %20)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %__qsVar0__idxQubit__)
  %22 = bitcast i8* %21 to %Qubit**
  %23 = load %Qubit*, %Qubit** %22, align 8
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit* }* getelementptr ({ %Qubit* }, { %Qubit* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Qubit* }*
  %26 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %25, i32 0, i32 0
  store %Qubit* %23, %Qubit** %26, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %27 = add i64 %__qsVar0__idxQubit__, %14
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___0f6039caba3447ba9af5384ce34aedbd_ApplyToEachCA__ctl(%Array* %__controlQubits__, { %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %singleElementOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %register = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %3 = call %Range @Microsoft__Quantum__Arrays___6dadefcae19c42a986c668221ac18f87_IndexRange__body(%Array* %register)
  %4 = extractvalue %Range %3, 0
  %5 = extractvalue %Range %3, 1
  %6 = extractvalue %Range %3, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %7 = icmp sgt i64 %5, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idxQubit = phi i64 [ %4, %preheader__1 ], [ %19, %exiting__1 ]
  %8 = icmp sle i64 %idxQubit, %6
  %9 = icmp sge i64 %idxQubit, %6
  %10 = select i1 %7, i1 %8, i1 %9
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, %Qubit* }*
  %14 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %13, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxQubit)
  %17 = bitcast i8* %16 to %Qubit**
  %18 = load %Qubit*, %Qubit** %17, align 8
  store %Array* %__controlQubits__, %Array** %14, align 8
  store %Qubit* %18, %Qubit** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %idxQubit, %5
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___0f6039caba3447ba9af5384ce34aedbd_ApplyToEachCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %singleElementOperation = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 1)
  %2 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %register = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %3 = call %Range @Microsoft__Quantum__Arrays___6dadefcae19c42a986c668221ac18f87_IndexRange__body(%Array* %register)
  %4 = extractvalue %Range %3, 0
  %5 = extractvalue %Range %3, 1
  %6 = extractvalue %Range %3, 2
  %7 = sub i64 %6, %4
  %8 = sdiv i64 %7, %5
  %9 = mul i64 %5, %8
  %10 = add i64 %4, %9
  %11 = sub i64 0, %5
  %12 = load %Range, %Range* @EmptyRange, align 4
  %13 = insertvalue %Range %12, i64 %10, 0
  %14 = insertvalue %Range %13, i64 %11, 1
  %15 = insertvalue %Range %14, i64 %4, 2
  %16 = extractvalue %Range %15, 0
  %17 = extractvalue %Range %15, 1
  %18 = extractvalue %Range %15, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %19 = icmp sgt i64 %17, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxQubit__ = phi i64 [ %16, %preheader__1 ], [ %31, %exiting__1 ]
  %20 = icmp sle i64 %__qsVar0__idxQubit__, %18
  %21 = icmp sge i64 %__qsVar0__idxQubit__, %18
  %22 = select i1 %19, i1 %20, i1 %21
  br i1 %22, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %singleElementOperation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Array*, %Qubit* }*
  %26 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %25, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %__qsVar0__idxQubit__)
  %29 = bitcast i8* %28 to %Qubit**
  %30 = load %Qubit*, %Qubit** %29, align 8
  store %Array* %__controlQubits__, %Array** %26, align 8
  store %Qubit* %30, %Qubit** %27, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %24, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %31 = add i64 %__qsVar0__idxQubit__, %17
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %singleElementOperation, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___75633d6fee93417e9eff9a6252378862_ControlledOnInt__body(i64 %numberState, %Callable* %oracle) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, i64, %Callable* }*
  %2 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i32 0, i32 1
  %4 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i32 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 1)
  store %Callable* %5, %Callable** %2, align 8
  store i64 %numberState, i64* %3, align 4
  store %Callable* %oracle, %Callable** %4, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__20__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__10__FunctionTable, %Tuple* %0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  ret %Callable* %6
}

define internal void @Lifted__PartialApplication__20__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 1
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable*, %Array*, %Array* }*
  %12 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 3
  store i64 %2, i64* %12, align 4
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__20__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 1
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable*, %Array*, %Array* }*
  %12 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %11, i32 0, i32 3
  store i64 %2, i64* %12, align 4
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__20__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, %Callable*, %Array*, %Array* }*
  %16 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 3
  store i64 %7, i64* %16, align 4
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Callable*, %Array*, %Array* }* }* getelementptr ({ %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { i64, %Callable*, %Array*, %Array* }* %15, { i64, %Callable*, %Array*, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__20__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Array* }* getelementptr ({ i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, %Callable*, %Array*, %Array* }*
  %16 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %15, i32 0, i32 3
  store i64 %7, i64* %16, align 4
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Callable*, %Array*, %Array* }* }* getelementptr ({ %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { i64, %Callable*, %Array*, %Array* }* %15, { i64, %Callable*, %Array*, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %5 = load i64, i64* %1, align 4
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__body(i64 %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Array* }, { i64, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %5 = load i64, i64* %1, align 4
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__adj(i64 %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, %Callable*, %Array*, %Array* }*, { i64, %Callable*, %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__ctl(%Array* %3, { i64, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Array* }* }, { %Array*, { i64, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, %Callable*, %Array*, %Array* }*, { i64, %Callable*, %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___aca620971a0449728030bfffe25c3dfe_ApplyControlledOnInt__ctladj(%Array* %3, { i64, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__10__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__10__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___05911784854a4b2dbed56f5181ebb2a2_ControlledOnInt__body(i64 %numberState, %Callable* %oracle) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, i64, %Callable* }*
  %2 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i32 0, i32 1
  %4 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %1, i32 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 1)
  store %Callable* %5, %Callable** %2, align 8
  store i64 %numberState, i64* %3, align 4
  store %Callable* %oracle, %Callable** %4, align 8
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__21__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__11__FunctionTable, %Tuple* %0)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  ret %Callable* %6
}

define internal void @Lifted__PartialApplication__21__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %6 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 1
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable*, %Array*, %Qubit* }*
  %12 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 3
  store i64 %2, i64* %12, align 4
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__21__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %6 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 1
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable*, %Array*, %Qubit* }*
  %12 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 3
  store i64 %2, i64* %12, align 4
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__21__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 1
  %13 = load %Qubit*, %Qubit** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, %Callable*, %Array*, %Qubit* }*
  %16 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 3
  store i64 %7, i64* %16, align 4
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Qubit* %13, %Qubit** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* getelementptr ({ %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %22 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { i64, %Callable*, %Array*, %Qubit* }* %15, { i64, %Callable*, %Array*, %Qubit* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__21__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 1
  %13 = load %Qubit*, %Qubit** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable*, %Array*, %Qubit* }* getelementptr ({ i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64, %Callable*, %Array*, %Qubit* }*
  %16 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 3
  store i64 %7, i64* %16, align 4
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Qubit* %13, %Qubit** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* getelementptr ({ %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %22 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { i64, %Callable*, %Array*, %Qubit* }* %15, { i64, %Callable*, %Array*, %Qubit* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %5 = load i64, i64* %1, align 4
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__body(i64 %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, %Callable*, %Array*, %Qubit* }, { i64, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %5 = load i64, i64* %1, align 4
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__adj(i64 %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, %Callable*, %Array*, %Qubit* }*, { i64, %Callable*, %Array*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__ctl(%Array* %3, { i64, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }, { %Array*, { i64, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, %Callable*, %Array*, %Qubit* }*, { i64, %Callable*, %Array*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon___1ac33807ae784d6cacef8bdbb02fd1f4_ApplyControlledOnInt__ctladj(%Array* %3, { i64, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define internal void @MemoryManagement__11__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__11__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__22__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %6 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 1
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Qubit* }* getelementptr ({ %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %12 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 3
  store %Array* %2, %Array** %12, align 8
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__22__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %6 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %5, i32 0, i32 1
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Qubit* }* getelementptr ({ %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %12 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %11, i32 0, i32 3
  store %Array* %2, %Array** %12, align 8
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Qubit* %9, %Qubit** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__22__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 1
  %13 = load %Qubit*, %Qubit** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Qubit* }* getelementptr ({ %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %16 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 3
  store %Array* %7, %Array** %16, align 8
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Qubit* %13, %Qubit** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %22 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { %Array*, %Callable*, %Array*, %Qubit* }* %15, { %Array*, %Callable*, %Array*, %Qubit* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__22__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Qubit* }*, { %Array*, %Qubit* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %4, i32 0, i32 1
  %13 = load %Qubit*, %Qubit** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Qubit* }* getelementptr ({ %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Callable*, %Array*, %Qubit* }*
  %16 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %15, i32 0, i32 3
  store %Array* %7, %Array** %16, align 8
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Qubit* %13, %Qubit** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %22 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { %Array*, %Callable*, %Array*, %Qubit* }* %15, { %Array*, %Callable*, %Array*, %Qubit* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %5 = load %Array*, %Array** %1, align 8
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__body(%Array* %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %5 = load %Array*, %Array** %1, align 8
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Qubit*, %Qubit** %4, align 8
  call void @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__adj(%Array* %5, %Callable* %6, %Array* %7, %Qubit* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Callable*, %Array*, %Qubit* }*, { %Array*, %Callable*, %Array*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__ctl(%Array* %3, { %Array*, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Callable*, %Array*, %Qubit* }*, { %Array*, %Callable*, %Array*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__ctladj(%Array* %3, { %Array*, %Callable*, %Array*, %Qubit* }* %4)
  ret void
}

define internal void @MemoryManagement__12__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__12__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__body(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange, align 4
  %6 = insertvalue %Range %5, i64 0, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %8, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 1)
  %9 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %9, i1 false, %Array* %bits, %Array* %controlSubregister)
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Array*, %Qubit* }*
  %13 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %12, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 1)
  store %Array* %controlSubregister, %Array** %13, align 8
  store %Qubit* %targetRegister, %Qubit** %14, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %11, %Tuple* null)
  %15 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %15, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__adj(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Qubit* %targetRegister) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange, align 4
  %6 = insertvalue %Range %5, i64 0, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %8, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  %9 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %9, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Array*, %Qubit* }*
  %13 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %12, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  store %Array* %__qsVar0__controlSubregister__, %Array** %13, align 8
  store %Qubit* %targetRegister, %Qubit** %14, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %11, %Tuple* null)
  %15 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %15, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__ctl(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %bits = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = load %Range, %Range* @EmptyRange, align 4
  %11 = insertvalue %Range %10, i64 0, 0
  %12 = insertvalue %Range %11, i64 1, 1
  %13 = insertvalue %Range %12, i64 %9, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %13, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 1)
  %14 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %14, i1 false, %Array* %bits, %Array* %controlSubregister)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Qubit* }* }*
  %18 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, %Qubit* }*
  %22 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 1)
  store %Array* %controlSubregister, %Array** %22, align 8
  store %Qubit* %targetRegister, %Qubit** %23, align 8
  store %Array* %__controlQubits__, %Array** %18, align 8
  store { %Array*, %Qubit* }* %21, { %Array*, %Qubit* }** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  %24 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %24, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___5fef659eb7234cf887861a6875a2916a_ApplyControlledOnBitString__ctladj(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 0
  %bits = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Qubit* }, { %Array*, %Callable*, %Array*, %Qubit* }* %0, i32 0, i32 3
  %targetRegister = load %Qubit*, %Qubit** %4, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = load %Range, %Range* @EmptyRange, align 4
  %11 = insertvalue %Range %10, i64 0, 0
  %12 = insertvalue %Range %11, i64 1, 1
  %13 = insertvalue %Range %12, i64 %9, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %13, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  %14 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %14, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Qubit* }* }* getelementptr ({ %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Qubit* }* }*
  %18 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { %Array*, %Qubit* }* }, { %Array*, { %Array*, %Qubit* }* }* %17, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, %Qubit* }*
  %22 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %21, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  store %Array* %__qsVar0__controlSubregister__, %Array** %22, align 8
  store %Qubit* %targetRegister, %Qubit** %23, align 8
  store %Array* %__controlQubits__, %Array** %18, align 8
  store { %Array*, %Qubit* }* %21, { %Array*, %Qubit* }** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  %24 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %24, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__23__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 1
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Array* }* getelementptr ({ %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, %Callable*, %Array*, %Array* }*
  %12 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 3
  store %Array* %2, %Array** %12, align 8
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__23__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %5, i32 0, i32 1
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Array* }* getelementptr ({ %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Array*, %Callable*, %Array*, %Array* }*
  %12 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %11, i32 0, i32 3
  store %Array* %2, %Array** %12, align 8
  store %Callable* %4, %Callable** %13, align 8
  store %Array* %7, %Array** %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__23__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Array* }* getelementptr ({ %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Callable*, %Array*, %Array* }*
  %16 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 3
  store %Array* %7, %Array** %16, align 8
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { %Array*, %Callable*, %Array*, %Array* }* %15, { %Array*, %Callable*, %Array*, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__23__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Callable*, %Array*, %Array* }* getelementptr ({ %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Callable*, %Array*, %Array* }*
  %16 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %15, i32 0, i32 3
  store %Array* %7, %Array** %16, align 8
  store %Callable* %9, %Callable** %17, align 8
  store %Array* %11, %Array** %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { %Array*, %Callable*, %Array*, %Array* }* %15, { %Array*, %Callable*, %Array*, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %5 = load %Array*, %Array** %1, align 8
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__body(%Array* %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %5 = load %Array*, %Array** %1, align 8
  %6 = load %Callable*, %Callable** %2, align 8
  %7 = load %Array*, %Array** %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__adj(%Array* %5, %Callable* %6, %Array* %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Callable*, %Array*, %Array* }*, { %Array*, %Callable*, %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__ctl(%Array* %3, { %Array*, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }, { %Array*, { %Array*, %Callable*, %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Callable*, %Array*, %Array* }*, { %Array*, %Callable*, %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__ctladj(%Array* %3, { %Array*, %Callable*, %Array*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__13__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__13__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, %Array*, %Callable* }, { %Callable*, %Array*, %Callable* }* %0, i32 0, i32 2
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__body(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange, align 4
  %6 = insertvalue %Range %5, i64 0, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %8, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 1)
  %9 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %9, i1 false, %Array* %bits, %Array* %controlSubregister)
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Array*, %Array* }*
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  store %Array* %controlSubregister, %Array** %13, align 8
  store %Array* %targetRegister, %Array** %14, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %11, %Tuple* null)
  %15 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %15, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__adj(%Array* %bits, %Callable* %oracle, %Array* %controlRegister, %Array* %targetRegister) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %2 = icmp sle i64 %0, %1
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %2, %String* %3)
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange, align 4
  %6 = insertvalue %Range %5, i64 0, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %8, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  %9 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %9, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %10)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Array*, %Array* }*
  %13 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %12, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  store %Array* %__qsVar0__controlSubregister__, %Array** %13, align 8
  store %Array* %targetRegister, %Array** %14, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %11, %Tuple* null)
  %15 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %15, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__ctl(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %bits = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %targetRegister = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = load %Range, %Range* @EmptyRange, align 4
  %11 = insertvalue %Range %10, i64 0, 0
  %12 = insertvalue %Range %11, i64 1, 1
  %13 = insertvalue %Range %12, i64 %9, 2
  %controlSubregister = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %13, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 1)
  %14 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %14, i1 false, %Array* %bits, %Array* %controlSubregister)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Array* }* }*
  %18 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, %Array* }*
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  store %Array* %controlSubregister, %Array** %22, align 8
  store %Array* %targetRegister, %Array** %23, align 8
  store %Array* %__controlQubits__, %Array** %18, align 8
  store { %Array*, %Array* }* %21, { %Array*, %Array* }** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  %24 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %24, i1 false, %Array* %bits, %Array* %controlSubregister)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %controlSubregister, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___84f097ce81e54090bdb5a8d3e6c06281_ApplyControlledOnBitString__ctladj(%Array* %__controlQubits__, { %Array*, %Callable*, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %bits = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %2 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %oracle = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %3 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %controlRegister = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 1)
  %4 = getelementptr inbounds { %Array*, %Callable*, %Array*, %Array* }, { %Array*, %Callable*, %Array*, %Array* }* %0, i32 0, i32 3
  %targetRegister = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controlRegister)
  %7 = icmp sle i64 %5, %6
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @23, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %7, %String* %8)
  %9 = sub i64 %5, 1
  %10 = load %Range, %Range* @EmptyRange, align 4
  %11 = insertvalue %Range %10, i64 0, 0
  %12 = insertvalue %Range %11, i64 1, 1
  %13 = insertvalue %Range %12, i64 %9, 2
  %__qsVar0__controlSubregister__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controlRegister, %Range %13, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  %14 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__body(i2 %14, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %oracle, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, %Array* }* }*
  %18 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %17, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, %Array* }*
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 1)
  store %Array* %__qsVar0__controlSubregister__, %Array** %22, align 8
  store %Array* %targetRegister, %Array** %23, align 8
  store %Array* %__controlQubits__, %Array** %18, align 8
  store { %Array*, %Array* }* %21, { %Array*, %Array* }** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  %24 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Canon__ApplyPauliFromBitString__adj(i2 %24, i1 false, %Array* %bits, %Array* %__qsVar0__controlSubregister__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controlRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__controlSubregister__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetRegister, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %actual, %String* %message) {
entry:
  %0 = xor i1 %actual, true
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @__quantum__rt__string_update_reference_count(%String* %message, i32 1)
  call void @__quantum__rt__fail(%String* %message)
  unreachable

continue__1:                                      ; preds = %entry
  ret void
}

define internal void @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____body(%Callable* %op, i64 %power, %Array* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %0 = sub i64 %power, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxApplication = phi i64 [ 0, %entry ], [ %5, %exiting__1 ]
  %1 = icmp sle i64 %idxApplication, %0
  br i1 %1, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %3 = bitcast %Tuple* %2 to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  store %Array* %target, %Array** %4, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %2, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %5 = add i64 %idxApplication, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____adj(%Callable* %op, i64 %power, %Array* %target) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %0 = sub i64 %power, 1
  %1 = sub i64 %0, 0
  %2 = sdiv i64 %1, 1
  %3 = mul i64 1, %2
  %4 = add i64 0, %3
  %5 = load %Range, %Range* @EmptyRange, align 4
  %6 = insertvalue %Range %5, i64 %4, 0
  %7 = insertvalue %Range %6, i64 -1, 1
  %8 = insertvalue %Range %7, i64 0, 2
  %9 = extractvalue %Range %8, 0
  %10 = extractvalue %Range %8, 1
  %11 = extractvalue %Range %8, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %12 = icmp sgt i64 %10, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxApplication__ = phi i64 [ %9, %preheader__1 ], [ %20, %exiting__1 ]
  %13 = icmp sle i64 %__qsVar0__idxApplication__, %11
  %14 = icmp sge i64 %__qsVar0__idxApplication__, %11
  %15 = select i1 %12, i1 %13, i1 %14
  br i1 %15, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %16 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %16, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %16)
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array* }*
  %19 = getelementptr inbounds { %Array* }, { %Array* }* %18, i32 0, i32 0
  store %Array* %target, %Array** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %16, %Tuple* %17, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %20 = add i64 %__qsVar0__idxApplication__, %10
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____ctl(%Array* %__controlQubits__, { %Callable*, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %op = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %2 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %power = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %4 = sub i64 %power, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxApplication = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %5 = icmp sle i64 %idxApplication, %4
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store %Array* %__controlQubits__, %Array** %9, align 8
  store %Array* %target, %Array** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %idxApplication, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____ctladj(%Array* %__controlQubits__, { %Callable*, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %op = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %2 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %power = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %target = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 1)
  %4 = sub i64 %power, 1
  %5 = sub i64 %4, 0
  %6 = sdiv i64 %5, 1
  %7 = mul i64 1, %6
  %8 = add i64 0, %7
  %9 = load %Range, %Range* @EmptyRange, align 4
  %10 = insertvalue %Range %9, i64 %8, 0
  %11 = insertvalue %Range %10, i64 -1, 1
  %12 = insertvalue %Range %11, i64 0, 2
  %13 = extractvalue %Range %12, 0
  %14 = extractvalue %Range %12, 1
  %15 = extractvalue %Range %12, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %16 = icmp sgt i64 %14, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar0__idxApplication__ = phi i64 [ %13, %preheader__1 ], [ %25, %exiting__1 ]
  %17 = icmp sle i64 %__qsVar0__idxApplication__, %15
  %18 = icmp sge i64 %__qsVar0__idxApplication__, %15
  %19 = select i1 %16, i1 %17, i1 %18
  br i1 %19, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %20 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %20, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %20)
  call void @__quantum__rt__callable_make_controlled(%Callable* %20)
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Array*, %Array* }*
  %23 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %22, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 1)
  store %Array* %__controlQubits__, %Array** %23, align 8
  store %Array* %target, %Array** %24, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %21, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %target, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %25 = add i64 %__qsVar0__idxApplication__, %14
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %target, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Canon___10884c63c2824fe3855d321aeb132037_DecomposedIntoTimeStepsCA__body({ i64, %Callable* }* %0, i64 %trotterOrder) {
entry:
  %1 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 0
  %nSteps = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %0, i32 0, i32 1
  %op = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %3 = icmp eq i64 %trotterOrder, 1
  br i1 %3, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store %Callable* %9, %Callable** %6, align 8
  store i64 %nSteps, i64* %7, align 4
  store %Callable* %op, %Callable** %8, align 8
  %10 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__24__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__14__FunctionTable, %Tuple* %4)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret %Callable* %10

test1__1:                                         ; preds = %entry
  %11 = icmp eq i64 %trotterOrder, 2
  br i1 %11, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Callable* }* getelementptr ({ %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Callable*, i64, %Callable* }*
  %14 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %13, i32 0, i32 2
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store %Callable* %17, %Callable** %14, align 8
  store i64 %nSteps, i64* %15, align 4
  store %Callable* %op, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__25__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__14__FunctionTable, %Tuple* %12)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret %Callable* %18

test2__1:                                         ; preds = %test1__1
  %19 = srem i64 %trotterOrder, 2
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %then2__1, label %else__1

then2__1:                                         ; preds = %test2__1
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, i64, %Callable* }* getelementptr ({ %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { %Callable*, i64, i64, %Callable* }*
  %23 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %22, i32 0, i32 1
  %25 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %22, i32 0, i32 2
  %26 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %22, i32 0, i32 3
  %27 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %op, i32 1)
  store %Callable* %27, %Callable** %23, align 8
  store i64 %trotterOrder, i64* %24, align 4
  store i64 %nSteps, i64* %25, align 4
  store %Callable* %op, %Callable** %26, align 8
  %28 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__26__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__15__FunctionTable, %Tuple* %21)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  ret %Callable* %28

else__1:                                          ; preds = %test2__1
  %29 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @24, i32 0, i32 0))
  %30 = call %String* @__quantum__rt__int_to_string(i64 %trotterOrder)
  %31 = call %String* @__quantum__rt__string_concatenate(%String* %29, %String* %30)
  call void @__quantum__rt__string_update_reference_count(%String* %29, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %30, i32 -1)
  %32 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @25, i32 0, i32 0))
  %33 = call %String* @__quantum__rt__string_concatenate(%String* %31, %String* %32)
  call void @__quantum__rt__string_update_reference_count(%String* %31, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %32, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__fail(%String* %33)
  unreachable

continue__1:                                      ; No predecessors!
  %34 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @15, i32 0, i32 0))
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__fail(%String* %34)
  unreachable
}

define internal void @Lifted__PartialApplication__24__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Callable* }*
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  store i64 %2, i64* %7, align 4
  store %Callable* %4, %Callable** %8, align 8
  %9 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { i64, %Callable* }*, double, %Array* }*
  %16 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 2
  store { i64, %Callable* }* %6, { i64, %Callable* }** %16, align 8
  store double %11, double* %17, align 8
  store %Array* %13, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %14, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__24__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Callable* }*
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  store i64 %2, i64* %7, align 4
  store %Callable* %4, %Callable** %8, align 8
  %9 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { i64, %Callable* }*, double, %Array* }*
  %16 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 2
  store { i64, %Callable* }* %6, { i64, %Callable* }** %16, align 8
  store double %11, double* %17, align 8
  store %Array* %13, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %14, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__24__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable* }*
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  store i64 %7, i64* %12, align 4
  store %Callable* %9, %Callable** %13, align 8
  %14 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, %Callable* }*, double, %Array* }*
  %20 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 2
  store { i64, %Callable* }* %11, { i64, %Callable* }** %20, align 8
  store double %15, double* %21, align 8
  store %Array* %17, %Array** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %25 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 1
  store %Array* %3, %Array** %25, align 8
  store { { i64, %Callable* }*, double, %Array* }* %19, { { i64, %Callable* }*, double, %Array* }** %26, align 8
  %27 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %28 = load %Callable*, %Callable** %27, align 8
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__24__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable* }*
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  store i64 %7, i64* %12, align 4
  store %Callable* %9, %Callable** %13, align 8
  %14 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, %Callable* }*, double, %Array* }*
  %20 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 2
  store { i64, %Callable* }* %11, { i64, %Callable* }** %20, align 8
  store double %15, double* %21, align 8
  store %Array* %17, %Array** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %25 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 1
  store %Array* %3, %Array** %25, align 8
  store { { i64, %Callable* }*, double, %Array* }* %19, { { i64, %Callable* }*, double, %Array* }** %26, align 8
  %27 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %28 = load %Callable*, %Callable** %27, align 8
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %29)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____body({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____adj({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____ctl(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___890b92b16879439d9af2261ac31b5097___QsRef1__Trotter1ImplCA____ctladj(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__14__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__14__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__25__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Callable* }*
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  store i64 %2, i64* %7, align 4
  store %Callable* %4, %Callable** %8, align 8
  %9 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { i64, %Callable* }*, double, %Array* }*
  %16 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 2
  store { i64, %Callable* }* %6, { i64, %Callable* }** %16, align 8
  store double %11, double* %17, align 8
  store %Array* %13, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %14, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__25__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Callable* }*
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  store i64 %2, i64* %7, align 4
  store %Callable* %4, %Callable** %8, align 8
  %9 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { i64, %Callable* }*, double, %Array* }*
  %16 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %15, i32 0, i32 2
  store { i64, %Callable* }* %6, { i64, %Callable* }** %16, align 8
  store double %11, double* %17, align 8
  store %Array* %13, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %14, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__25__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable* }*
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  store i64 %7, i64* %12, align 4
  store %Callable* %9, %Callable** %13, align 8
  %14 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, %Callable* }*, double, %Array* }*
  %20 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 2
  store { i64, %Callable* }* %11, { i64, %Callable* }** %20, align 8
  store double %15, double* %21, align 8
  store %Array* %17, %Array** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %25 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 1
  store %Array* %3, %Array** %25, align 8
  store { { i64, %Callable* }*, double, %Array* }* %19, { { i64, %Callable* }*, double, %Array* }** %26, align 8
  %27 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %28 = load %Callable*, %Callable** %27, align 8
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__25__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i64, %Callable* }*
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  store i64 %7, i64* %12, align 4
  store %Callable* %9, %Callable** %13, align 8
  %14 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, double, %Array* }* getelementptr ({ { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { { i64, %Callable* }*, double, %Array* }*
  %20 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %19, i32 0, i32 2
  store { i64, %Callable* }* %11, { i64, %Callable* }** %20, align 8
  store double %15, double* %21, align 8
  store %Array* %17, %Array** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }* getelementptr ({ %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %25 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %24, i32 0, i32 1
  store %Array* %3, %Array** %25, align 8
  store { { i64, %Callable* }*, double, %Array* }* %19, { { i64, %Callable* }*, double, %Array* }** %26, align 8
  %27 = getelementptr inbounds { %Callable*, i64, %Callable* }, { %Callable*, i64, %Callable* }* %5, i32 0, i32 0
  %28 = load %Callable*, %Callable** %27, align 8
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %29)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____body({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { i64, %Callable* }*, double, %Array* }, { { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____adj({ i64, %Callable* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____ctl(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { i64, %Callable* }*, double, %Array* }* }, { %Array*, { { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { i64, %Callable* }*, double, %Array* }*, { { i64, %Callable* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___ba1df2cbdea343448403b3b1f6b62f73___QsRef1__Trotter2ImplCA____ctladj(%Array* %3, { { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define internal void @Lifted__PartialApplication__26__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 3
  %6 = load %Callable*, %Callable** %5, align 8
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { i64, %Callable* }*
  %9 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %8, i32 0, i32 1
  store i64 %4, i64* %9, align 4
  store %Callable* %6, %Callable** %10, align 8
  %11 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %12 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %11, i32 0, i32 0
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %11, i32 0, i32 1
  %15 = load %Array*, %Array** %14, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i64, { i64, %Callable* }*, double, %Array* }*
  %18 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 2
  %21 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 3
  store i64 %2, i64* %18, align 4
  store { i64, %Callable* }* %8, { i64, %Callable* }** %19, align 8
  store double %13, double* %20, align 8
  store %Array* %15, %Array** %21, align 8
  %22 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %16, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__26__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 3
  %6 = load %Callable*, %Callable** %5, align 8
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { i64, %Callable* }*
  %9 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %8, i32 0, i32 1
  store i64 %4, i64* %9, align 4
  store %Callable* %6, %Callable** %10, align 8
  %11 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %12 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %11, i32 0, i32 0
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %11, i32 0, i32 1
  %15 = load %Array*, %Array** %14, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i64, { i64, %Callable* }*, double, %Array* }*
  %18 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 2
  %21 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %17, i32 0, i32 3
  store i64 %2, i64* %18, align 4
  store { i64, %Callable* }* %8, { i64, %Callable* }** %19, align 8
  store double %13, double* %20, align 8
  store %Array* %15, %Array** %21, align 8
  %22 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 0
  %23 = load %Callable*, %Callable** %22, align 8
  %24 = call %Callable* @__quantum__rt__callable_copy(%Callable* %23, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %24)
  call void @__quantum__rt__callable_invoke(%Callable* %24, %Tuple* %16, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %24, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__26__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 3
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 1
  store i64 %9, i64* %14, align 4
  store %Callable* %11, %Callable** %15, align 8
  %16 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %19 = load %Array*, %Array** %18, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { i64, { i64, %Callable* }*, double, %Array* }*
  %22 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 3
  store i64 %7, i64* %22, align 4
  store { i64, %Callable* }* %13, { i64, %Callable* }** %23, align 8
  store double %17, double* %24, align 8
  store %Array* %19, %Array** %25, align 8
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* getelementptr ({ %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %28 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %27, i32 0, i32 0
  %29 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %27, i32 0, i32 1
  store %Array* %3, %Array** %28, align 8
  store { i64, { i64, %Callable* }*, double, %Array* }* %21, { i64, { i64, %Callable* }*, double, %Array* }** %29, align 8
  %30 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 0
  %31 = load %Callable*, %Callable** %30, align 8
  %32 = call %Callable* @__quantum__rt__callable_copy(%Callable* %31, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %32)
  call void @__quantum__rt__callable_invoke(%Callable* %32, %Tuple* %26, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %32, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__26__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 1
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 3
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, %Callable* }*
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %13, i32 0, i32 1
  store i64 %9, i64* %14, align 4
  store %Callable* %11, %Callable** %15, align 8
  %16 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %19 = load %Array*, %Array** %18, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, { i64, %Callable* }*, double, %Array* }* getelementptr ({ i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { i64, { i64, %Callable* }*, double, %Array* }*
  %22 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %21, i32 0, i32 3
  store i64 %7, i64* %22, align 4
  store { i64, %Callable* }* %13, { i64, %Callable* }** %23, align 8
  store double %17, double* %24, align 8
  store %Array* %19, %Array** %25, align 8
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* getelementptr ({ %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %28 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %27, i32 0, i32 0
  %29 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %27, i32 0, i32 1
  store %Array* %3, %Array** %28, align 8
  store { i64, { i64, %Callable* }*, double, %Array* }* %21, { i64, { i64, %Callable* }*, double, %Array* }** %29, align 8
  %30 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %5, i32 0, i32 0
  %31 = load %Callable*, %Callable** %30, align 8
  %32 = call %Callable* @__quantum__rt__callable_copy(%Callable* %31, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %32)
  call void @__quantum__rt__callable_make_controlled(%Callable* %32)
  call void @__quantum__rt__callable_invoke(%Callable* %32, %Tuple* %26, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %32, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 3
  %5 = load i64, i64* %1, align 4
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %2, align 8
  %7 = load double, double* %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____body(i64 %5, { i64, %Callable* }* %6, double %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, { i64, %Callable* }*, double, %Array* }*
  %1 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, { i64, %Callable* }*, double, %Array* }, { i64, { i64, %Callable* }*, double, %Array* }* %0, i32 0, i32 3
  %5 = load i64, i64* %1, align 4
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %2, align 8
  %7 = load double, double* %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____adj(i64 %5, { i64, %Callable* }* %6, double %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, { i64, %Callable* }*, double, %Array* }*, { i64, { i64, %Callable* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctl(%Array* %3, { i64, { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }, { %Array*, { i64, { i64, %Callable* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, { i64, %Callable* }*, double, %Array* }*, { i64, { i64, %Callable* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___955f80e030834962bf7b4e9a644c9ea3___QsRef1__TrotterArbitraryImplCA____ctladj(%Array* %3, { i64, { i64, %Callable* }*, double, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__15__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 3
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__15__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, i64, %Callable* }, { %Callable*, i64, i64, %Callable* }* %0, i32 0, i32 3
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

declare %String* @__quantum__rt__int_to_string(i64)

define internal void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %actual, i1 %expected, %String* %message) {
entry:
  %0 = icmp ne i1 %actual, %expected
  br i1 %0, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Diagnostics___16ffa054d4354371a322e86bc0876e5c___QsRef1__FormattedFailure____body(i1 %actual, i1 %expected, %String* %message)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  ret void
}

define internal void @Microsoft__Quantum__Diagnostics___16ffa054d4354371a322e86bc0876e5c___QsRef1__FormattedFailure____body(i1 %actual, i1 %expected, %String* %message) {
entry:
  %0 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @26, i32 0, i32 0))
  %1 = call %String* @__quantum__rt__string_concatenate(%String* %0, %String* %message)
  %2 = call %String* @__quantum__rt__string_concatenate(%String* %1, %String* %0)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %0, i32 -1)
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @27, i32 0, i32 0))
  %4 = call %String* @__quantum__rt__string_concatenate(%String* %2, %String* %3)
  call void @__quantum__rt__string_update_reference_count(%String* %2, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %3, i32 -1)
  br i1 %expected, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %entry
  %5 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @28, i32 0, i32 0))
  br label %condContinue__1

condFalse__1:                                     ; preds = %entry
  %6 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @29, i32 0, i32 0))
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %7 = phi %String* [ %5, %condTrue__1 ], [ %6, %condFalse__1 ]
  %8 = call %String* @__quantum__rt__string_concatenate(%String* %4, %String* %7)
  call void @__quantum__rt__string_update_reference_count(%String* %4, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %7, i32 -1)
  %9 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @30, i32 0, i32 0))
  %10 = call %String* @__quantum__rt__string_concatenate(%String* %8, %String* %9)
  call void @__quantum__rt__string_update_reference_count(%String* %8, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %9, i32 -1)
  br i1 %actual, label %condTrue__2, label %condFalse__2

condTrue__2:                                      ; preds = %condContinue__1
  %11 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @28, i32 0, i32 0))
  br label %condContinue__2

condFalse__2:                                     ; preds = %condContinue__1
  %12 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @29, i32 0, i32 0))
  br label %condContinue__2

condContinue__2:                                  ; preds = %condFalse__2, %condTrue__2
  %13 = phi %String* [ %11, %condTrue__2 ], [ %12, %condFalse__2 ]
  %14 = call %String* @__quantum__rt__string_concatenate(%String* %10, %String* %13)
  call void @__quantum__rt__string_update_reference_count(%String* %10, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %13, i32 -1)
  call void @__quantum__rt__fail(%String* %14)
  unreachable
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyControlledX____body(%Qubit* %control, %Qubit* %target) {
entry:
  call void @__quantum__qis__cnot__body(%Qubit* %control, %Qubit* %target)
  ret void
}

declare void @__quantum__qis__cnot__body(%Qubit*, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyControlledX____adj(%Qubit* %control, %Qubit* %target) {
entry:
  call void @__quantum__qis__cnot__body(%Qubit* %control, %Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyControlledZ____body(%Qubit* %control, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledH____body(%Qubit* %target)
  call void @__quantum__qis__cnot__body(%Qubit* %control, %Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledH____body(%Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledH____body(%Qubit* %qubit) {
entry:
  %0 = call double @Microsoft__Quantum__Math__PI__body()
  %1 = fneg double %0
  %2 = fdiv double %1, 2.000000e+00
  call void @Microsoft__Quantum__Intrinsic__Rx__body(double %2, %Qubit* %qubit)
  %3 = call double @Microsoft__Quantum__Math__PI__body()
  %4 = fneg double %3
  %5 = fdiv double %4, 2.000000e+00
  call void @Microsoft__Quantum__Intrinsic__Rz__body(double %5, %Qubit* %qubit)
  %6 = call double @Microsoft__Quantum__Math__PI__body()
  %7 = fneg double %6
  %8 = fdiv double %7, 2.000000e+00
  call void @Microsoft__Quantum__Intrinsic__Rx__body(double %8, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyControlledZ____adj(%Qubit* %control, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyControlledZ____body(%Qubit* %control, %Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyGlobalPhase____body(double %theta) {
entry:
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyGlobalPhase____adj(double %theta) {
entry:
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyGlobalPhase____ctl(%Array* %controls, double %theta) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controls)
  %1 = icmp sgt i64 %0, 0
  br i1 %1, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 0)
  %3 = bitcast i8* %2 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %3, align 8
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange, align 4
  %6 = insertvalue %Range %5, i64 1, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %rest = call %Array* @__quantum__rt__array_slice_1d(%Array* %controls, %Range %8, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %rest, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { double, %Qubit* }*
  %11 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %10, i32 0, i32 1
  store double %theta, double* %11, align 8
  store %Qubit* %qubit, %Qubit** %12, align 8
  call void @Microsoft__Quantum__Intrinsic__R1__ctl(%Array* %rest, { double, %Qubit* }* %10)
  call void @__quantum__rt__array_update_alias_count(%Array* %rest, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %rest, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1__ctl(%Array* %__controlQubits__, { double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %theta = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { i2, double, %Qubit* }*
  %5 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 1
  %7 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 2
  %8 = load i2, i2* @PauliZ, align 1
  store i2 %8, i2* %5, align 1
  store double %theta, double* %6, align 8
  store %Qubit* %qubit, %Qubit** %7, align 8
  call void @Microsoft__Quantum__Intrinsic__R__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %4)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { i2, double, %Qubit* }*
  %11 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %10, i32 0, i32 1
  %13 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %10, i32 0, i32 2
  %14 = load i2, i2* @PauliI, align 1
  %15 = fneg double %theta
  store i2 %14, i2* %11, align 1
  store double %15, double* %12, align 8
  store %Qubit* %qubit, %Qubit** %13, align 8
  call void @Microsoft__Quantum__Intrinsic__R__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %10)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyGlobalPhase____ctladj(%Array* %controls, double %theta) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %controls)
  %1 = icmp sgt i64 %0, 0
  br i1 %1, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 0)
  %3 = bitcast i8* %2 to %Qubit**
  %__qsVar0__qubit__ = load %Qubit*, %Qubit** %3, align 8
  %4 = sub i64 %0, 1
  %5 = load %Range, %Range* @EmptyRange, align 4
  %6 = insertvalue %Range %5, i64 1, 0
  %7 = insertvalue %Range %6, i64 1, 1
  %8 = insertvalue %Range %7, i64 %4, 2
  %__qsVar1__rest__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %controls, %Range %8, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__rest__, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { double, %Qubit* }*
  %11 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %10, i32 0, i32 1
  store double %theta, double* %11, align 8
  store %Qubit* %__qsVar0__qubit__, %Qubit** %12, align 8
  call void @Microsoft__Quantum__Intrinsic__R1__ctladj(%Array* %__qsVar1__rest__, { double, %Qubit* }* %10)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__rest__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__rest__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1__ctladj(%Array* %__controlQubits__, { double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %theta = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { i2, double, %Qubit* }*
  %5 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 1
  %7 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %4, i32 0, i32 2
  %8 = load i2, i2* @PauliI, align 1
  %9 = fneg double %theta
  store i2 %8, i2* %5, align 1
  store double %9, double* %6, align 8
  store %Qubit* %qubit, %Qubit** %7, align 8
  call void @Microsoft__Quantum__Intrinsic__R__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %4)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { i2, double, %Qubit* }*
  %12 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %11, i32 0, i32 2
  %15 = load i2, i2* @PauliZ, align 1
  store i2 %15, i2* %12, align 1
  store double %theta, double* %13, align 8
  store %Qubit* %qubit, %Qubit** %14, align 8
  call void @Microsoft__Quantum__Intrinsic__R__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %11)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rx__body(double %theta, %Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledRx____body(double %theta, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rz__body(double %theta, %Qubit* %qubit) {
entry:
  call void @__quantum__qis__rz__body(double %theta, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledH____adj(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledH____body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledRx____body(double %theta, %Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledSAdj____body(%Qubit* %qubit)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %0 = phi i64 [ 1, %entry ], [ %2, %exiting__1 ]
  %1 = icmp sle i64 %0, 3
  br i1 %1, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  call void @__quantum__qis__sqrtx__body(%Qubit* %qubit)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %2 = add i64 %0, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @Microsoft__Quantum__Intrinsic__Rz__body(double %theta, %Qubit* %qubit)
  call void @__quantum__qis__sqrtx__body(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledS____body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledSAdj____body(%Qubit* %qubit) {
entry:
  %0 = call double @Microsoft__Quantum__Math__PI__body()
  %1 = fneg double %0
  %2 = fdiv double %1, 2.000000e+00
  call void @__quantum__qis__rz__body(double %2, %Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__sqrtx__body(%Qubit*)

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledS____body(%Qubit* %qubit) {
entry:
  %0 = call double @Microsoft__Quantum__Math__PI__body()
  %1 = fdiv double %0, 2.000000e+00
  call void @__quantum__qis__rz__body(double %1, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledRy____body(double %theta, %Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledH____body(%Qubit* %qubit)
  call void @__quantum__qis__rz__body(double %theta, %Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledH____body(%Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__rz__body(double, %Qubit*)

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledT____body(%Qubit* %qubit) {
entry:
  %0 = call double @Microsoft__Quantum__Math__PI__body()
  %1 = fdiv double %0, 4.000000e+00
  call void @__quantum__qis__rz__body(double %1, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledTAdj____body(%Qubit* %qubit) {
entry:
  %0 = call double @Microsoft__Quantum__Math__PI__body()
  %1 = fneg double %0
  %2 = fdiv double %1, 4.000000e+00
  call void @__quantum__qis__rz__body(double %2, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledX____body(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  ret void
}

declare void @__quantum__qis__x__body(%Qubit*)

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledX____adj(%Qubit* %qubit) {
entry:
  call void @__quantum__qis__x__body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledY____body(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledH____body(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledS____body(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledZ____body(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledSAdj____body(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledH____body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledZ____body(%Qubit* %qubit) {
entry:
  %0 = call double @Microsoft__Quantum__Math__PI__body()
  call void @__quantum__qis__rz__body(double %0, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledY____adj(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledY____body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledZ____adj(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledZ____body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__CCZ____body(%Qubit* %control1, %Qubit* %control2, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %control2)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %target, %Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control2, %Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control2, %Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control2, %Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %target, %Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control2, %Qubit* %control1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledTAdj____body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledT____body(%Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__CCZ____adj(%Qubit* %control1, %Qubit* %control2, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %control2, %Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %target, %Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %control2, %Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %control2, %Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %control2, %Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %target, %Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %control2)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %control1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ExpUtil____body(%Array* %paulis, double %theta, %Array* %qubits, %Callable* %rotation) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %rotation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %rotation, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %paulis)
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %2 = icmp ne i64 %0, %1
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @31, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %rotation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %rotation, i32 -1)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call i64 @__quantum__rt__array_get_size_1d(%Array* %paulis)
  %5 = icmp eq i64 %4, 1
  br i1 %5, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, %Qubit* }* getelementptr ({ i2, %Qubit* }, { i2, %Qubit* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i2, %Qubit* }*
  %8 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %7, i32 0, i32 1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %11 = bitcast i8* %10 to i2*
  %12 = load i2, i2* %11, align 1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %14 = bitcast i8* %13 to %Qubit**
  %15 = load %Qubit*, %Qubit** %14, align 8
  store i2 %12, i2* %8, align 1
  store %Qubit* %15, %Qubit** %9, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %rotation, %Tuple* %6, %Tuple* null)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %paulis)
  %17 = sub i64 %16, 1
  br label %header__1

continue__2:                                      ; preds = %exit__2, %then0__2
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %rotation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %rotation, i32 -1)
  ret void

header__1:                                        ; preds = %exiting__1, %else__1
  %__qsVar0__i__ = phi i64 [ 0, %else__1 ], [ %26, %exiting__1 ]
  %18 = icmp sle i64 %__qsVar0__i__, %17
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %__qsVar0__i__)
  %20 = bitcast i8* %19 to %Qubit**
  %21 = load %Qubit*, %Qubit** %20, align 8
  %22 = load i2, i2* @PauliZ, align 1
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 %__qsVar0__i__)
  %24 = bitcast i8* %23 to i2*
  %25 = load i2, i2* %24, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____body(%Qubit* %21, i2 %22, i2 %25)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %26 = add i64 %__qsVar0__i__, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %28 = bitcast i8* %27 to %Qubit**
  %29 = load %Qubit*, %Qubit** %28, align 8
  %30 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %31 = sub i64 %30, 1
  %32 = load %Range, %Range* @EmptyRange, align 4
  %33 = insertvalue %Range %32, i64 1, 0
  %34 = insertvalue %Range %33, i64 1, 1
  %35 = insertvalue %Range %34, i64 %31, 2
  %36 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %35, i1 true)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__SpreadZ____body(%Qubit* %29, %Array* %36)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, %Qubit* }* getelementptr ({ i2, %Qubit* }, { i2, %Qubit* }* null, i32 1) to i64))
  %38 = bitcast %Tuple* %37 to { i2, %Qubit* }*
  %39 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %38, i32 0, i32 0
  %40 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %38, i32 0, i32 1
  %41 = load i2, i2* @PauliZ, align 1
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %43 = bitcast i8* %42 to %Qubit**
  %44 = load %Qubit*, %Qubit** %43, align 8
  store i2 %41, i2* %39, align 1
  store %Qubit* %44, %Qubit** %40, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %rotation, %Tuple* %37, %Tuple* null)
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %46 = bitcast i8* %45 to %Qubit**
  %47 = load %Qubit*, %Qubit** %46, align 8
  %48 = sub i64 %30, 1
  %49 = load %Range, %Range* @EmptyRange, align 4
  %50 = insertvalue %Range %49, i64 1, 0
  %51 = insertvalue %Range %50, i64 1, 1
  %52 = insertvalue %Range %51, i64 %48, 2
  %53 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %52, i1 true)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__SpreadZ____adj(%Qubit* %47, %Array* %53)
  %54 = sub i64 %16, 1
  %55 = sub i64 %54, 0
  %56 = sdiv i64 %55, 1
  %57 = mul i64 1, %56
  %58 = add i64 0, %57
  %59 = load %Range, %Range* @EmptyRange, align 4
  %60 = insertvalue %Range %59, i64 %58, 0
  %61 = insertvalue %Range %60, i64 -1, 1
  %62 = insertvalue %Range %61, i64 0, 2
  %63 = extractvalue %Range %62, 0
  %64 = extractvalue %Range %62, 1
  %65 = extractvalue %Range %62, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %66 = icmp sgt i64 %64, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar0____qsVar0__i____ = phi i64 [ %63, %preheader__1 ], [ %77, %exiting__2 ]
  %67 = icmp sle i64 %__qsVar0____qsVar0__i____, %65
  %68 = icmp sge i64 %__qsVar0____qsVar0__i____, %65
  %69 = select i1 %66, i1 %67, i1 %68
  br i1 %69, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %__qsVar0____qsVar0__i____)
  %71 = bitcast i8* %70 to %Qubit**
  %72 = load %Qubit*, %Qubit** %71, align 8
  %73 = load i2, i2* @PauliZ, align 1
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 %__qsVar0____qsVar0__i____)
  %75 = bitcast i8* %74 to i2*
  %76 = load i2, i2* %75, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____adj(%Qubit* %72, i2 %73, i2 %76)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %77 = add i64 %__qsVar0____qsVar0__i____, %64
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %36, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i32 -1)
  br label %continue__2
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__SpreadZ____body(%Qubit* %from, %Array* %to) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %to, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %to)
  %1 = icmp sgt i64 %0, 0
  br i1 %1, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %to, i64 0)
  %3 = bitcast i8* %2 to %Qubit**
  %4 = load %Qubit*, %Qubit** %3, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %4, %Qubit* %from)
  %5 = icmp sgt i64 %0, 1
  br i1 %5, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  %half = sdiv i64 %0, 2
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %to, i64 0)
  %7 = bitcast i8* %6 to %Qubit**
  %8 = load %Qubit*, %Qubit** %7, align 8
  %9 = add i64 %half, 1
  %10 = sub i64 %0, 1
  %11 = load %Range, %Range* @EmptyRange, align 4
  %12 = insertvalue %Range %11, i64 %9, 0
  %13 = insertvalue %Range %12, i64 1, 1
  %14 = insertvalue %Range %13, i64 %10, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %to, %Range %14, i1 true)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__SpreadZ____body(%Qubit* %8, %Array* %15)
  %16 = load %Range, %Range* @EmptyRange, align 4
  %17 = insertvalue %Range %16, i64 1, 0
  %18 = insertvalue %Range %17, i64 1, 1
  %19 = insertvalue %Range %18, i64 %half, 2
  %20 = call %Array* @__quantum__rt__array_slice_1d(%Array* %to, %Range %19, i1 true)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__SpreadZ____body(%Qubit* %from, %Array* %20)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %then0__1
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %to, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__SpreadZ____adj(%Qubit* %from, %Array* %to) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %to, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %to)
  %1 = icmp sgt i64 %0, 0
  br i1 %1, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %2 = icmp sgt i64 %0, 1
  br i1 %2, label %then0__2, label %continue__2

then0__2:                                         ; preds = %then0__1
  %__qsVar0__half__ = sdiv i64 %0, 2
  %3 = load %Range, %Range* @EmptyRange, align 4
  %4 = insertvalue %Range %3, i64 1, 0
  %5 = insertvalue %Range %4, i64 1, 1
  %6 = insertvalue %Range %5, i64 %__qsVar0__half__, 2
  %7 = call %Array* @__quantum__rt__array_slice_1d(%Array* %to, %Range %6, i1 true)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__SpreadZ____adj(%Qubit* %from, %Array* %7)
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %to, i64 0)
  %9 = bitcast i8* %8 to %Qubit**
  %10 = load %Qubit*, %Qubit** %9, align 8
  %11 = add i64 %__qsVar0__half__, 1
  %12 = sub i64 %0, 1
  %13 = load %Range, %Range* @EmptyRange, align 4
  %14 = insertvalue %Range %13, i64 %11, 0
  %15 = insertvalue %Range %14, i64 1, 1
  %16 = insertvalue %Range %15, i64 %12, 2
  %17 = call %Array* @__quantum__rt__array_slice_1d(%Array* %to, %Range %16, i1 true)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__SpreadZ____adj(%Qubit* %10, %Array* %17)
  call void @__quantum__rt__array_update_reference_count(%Array* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %then0__1
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %to, i64 0)
  %19 = bitcast i8* %18 to %Qubit**
  %20 = load %Qubit*, %Qubit** %19, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %20, %Qubit* %from)
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %entry
  call void @__quantum__rt__array_update_alias_count(%Array* %to, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__ExpUtil____ctl(%Array* %__controlQubits__, { %Array*, double, %Array*, %Callable* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, double, %Array*, %Callable* }, { %Array*, double, %Array*, %Callable* }* %0, i32 0, i32 0
  %paulis = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  %2 = getelementptr inbounds { %Array*, double, %Array*, %Callable* }, { %Array*, double, %Array*, %Callable* }* %0, i32 0, i32 1
  %theta = load double, double* %2, align 8
  %3 = getelementptr inbounds { %Array*, double, %Array*, %Callable* }, { %Array*, double, %Array*, %Callable* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %4 = getelementptr inbounds { %Array*, double, %Array*, %Callable* }, { %Array*, double, %Array*, %Callable* }* %0, i32 0, i32 3
  %rotation = load %Callable*, %Callable** %4, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %rotation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %rotation, i32 1)
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %paulis)
  %6 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %7 = icmp ne i64 %5, %6
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %8 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @31, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %rotation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %rotation, i32 -1)
  call void @__quantum__rt__fail(%String* %8)
  unreachable

continue__1:                                      ; preds = %entry
  %9 = call i64 @__quantum__rt__array_get_size_1d(%Array* %paulis)
  %10 = icmp eq i64 %9, 1
  br i1 %10, label %then0__2, label %else__1

then0__2:                                         ; preds = %continue__1
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %rotation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i2, %Qubit* }* }* getelementptr ({ %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { i2, %Qubit* }* }*
  %14 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %13, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, %Qubit* }* getelementptr ({ i2, %Qubit* }, { i2, %Qubit* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { i2, %Qubit* }*
  %18 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %17, i32 0, i32 1
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 0)
  %21 = bitcast i8* %20 to i2*
  %22 = load i2, i2* %21, align 1
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %24 = bitcast i8* %23 to %Qubit**
  %25 = load %Qubit*, %Qubit** %24, align 8
  store i2 %22, i2* %18, align 1
  store %Qubit* %25, %Qubit** %19, align 8
  store %Array* %__controlQubits__, %Array** %14, align 8
  store { i2, %Qubit* }* %17, { i2, %Qubit* }** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %12, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  br label %continue__2

else__1:                                          ; preds = %continue__1
  %26 = call i64 @__quantum__rt__array_get_size_1d(%Array* %paulis)
  %27 = sub i64 %26, 1
  br label %header__1

continue__2:                                      ; preds = %exit__2, %then0__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %rotation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %rotation, i32 -1)
  ret void

header__1:                                        ; preds = %exiting__1, %else__1
  %__qsVar0__i__ = phi i64 [ 0, %else__1 ], [ %36, %exiting__1 ]
  %28 = icmp sle i64 %__qsVar0__i__, %27
  br i1 %28, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %__qsVar0__i__)
  %30 = bitcast i8* %29 to %Qubit**
  %31 = load %Qubit*, %Qubit** %30, align 8
  %32 = load i2, i2* @PauliZ, align 1
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 %__qsVar0__i__)
  %34 = bitcast i8* %33 to i2*
  %35 = load i2, i2* %34, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____body(%Qubit* %31, i2 %32, i2 %35)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %36 = add i64 %__qsVar0__i__, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %38 = bitcast i8* %37 to %Qubit**
  %39 = load %Qubit*, %Qubit** %38, align 8
  %40 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %41 = sub i64 %40, 1
  %42 = load %Range, %Range* @EmptyRange, align 4
  %43 = insertvalue %Range %42, i64 1, 0
  %44 = insertvalue %Range %43, i64 1, 1
  %45 = insertvalue %Range %44, i64 %41, 2
  %46 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %45, i1 true)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__SpreadZ____body(%Qubit* %39, %Array* %46)
  %47 = call %Callable* @__quantum__rt__callable_copy(%Callable* %rotation, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %47, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %47)
  %48 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i2, %Qubit* }* }* getelementptr ({ %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* null, i32 1) to i64))
  %49 = bitcast %Tuple* %48 to { %Array*, { i2, %Qubit* }* }*
  %50 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %49, i32 0, i32 0
  %51 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %49, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %52 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, %Qubit* }* getelementptr ({ i2, %Qubit* }, { i2, %Qubit* }* null, i32 1) to i64))
  %53 = bitcast %Tuple* %52 to { i2, %Qubit* }*
  %54 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %53, i32 0, i32 0
  %55 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %53, i32 0, i32 1
  %56 = load i2, i2* @PauliZ, align 1
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %58 = bitcast i8* %57 to %Qubit**
  %59 = load %Qubit*, %Qubit** %58, align 8
  store i2 %56, i2* %54, align 1
  store %Qubit* %59, %Qubit** %55, align 8
  store %Array* %__controlQubits__, %Array** %50, align 8
  store { i2, %Qubit* }* %53, { i2, %Qubit* }** %51, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %47, %Tuple* %48, %Tuple* null)
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 0)
  %61 = bitcast i8* %60 to %Qubit**
  %62 = load %Qubit*, %Qubit** %61, align 8
  %63 = sub i64 %40, 1
  %64 = load %Range, %Range* @EmptyRange, align 4
  %65 = insertvalue %Range %64, i64 1, 0
  %66 = insertvalue %Range %65, i64 1, 1
  %67 = insertvalue %Range %66, i64 %63, 2
  %68 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %67, i1 true)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__SpreadZ____adj(%Qubit* %62, %Array* %68)
  %69 = sub i64 %26, 1
  %70 = sub i64 %69, 0
  %71 = sdiv i64 %70, 1
  %72 = mul i64 1, %71
  %73 = add i64 0, %72
  %74 = load %Range, %Range* @EmptyRange, align 4
  %75 = insertvalue %Range %74, i64 %73, 0
  %76 = insertvalue %Range %75, i64 -1, 1
  %77 = insertvalue %Range %76, i64 0, 2
  %78 = extractvalue %Range %77, 0
  %79 = extractvalue %Range %77, 1
  %80 = extractvalue %Range %77, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %81 = icmp sgt i64 %79, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar0____qsVar0__i____ = phi i64 [ %78, %preheader__1 ], [ %92, %exiting__2 ]
  %82 = icmp sle i64 %__qsVar0____qsVar0__i____, %80
  %83 = icmp sge i64 %__qsVar0____qsVar0__i____, %80
  %84 = select i1 %81, i1 %82, i1 %83
  br i1 %84, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %__qsVar0____qsVar0__i____)
  %86 = bitcast i8* %85 to %Qubit**
  %87 = load %Qubit*, %Qubit** %86, align 8
  %88 = load i2, i2* @PauliZ, align 1
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulis, i64 %__qsVar0____qsVar0__i____)
  %90 = bitcast i8* %89 to i2*
  %91 = load i2, i2* %90, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____adj(%Qubit* %87, i2 %88, i2 %91)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %92 = add i64 %__qsVar0____qsVar0__i____, %79
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %47, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %47, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %52, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %48, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %68, i32 -1)
  br label %continue__2
}

define internal %Array* @Microsoft__Quantum__Intrinsic____QsRef36__IndicesOfNonIdentity____body(%Array* %paulies) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %paulies, i32 1)
  %nonIdPauliCount = alloca i64, align 8
  store i64 0, i64* %nonIdPauliCount, align 4
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %paulies)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %i = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %2 = icmp sle i64 %i, %1
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulies, i64 %i)
  %4 = bitcast i8* %3 to i2*
  %5 = load i2, i2* %4, align 1
  %6 = load i2, i2* @PauliI, align 1
  %7 = icmp ne i2 %5, %6
  br i1 %7, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__1
  %8 = load i64, i64* %nonIdPauliCount, align 4
  %9 = add i64 %8, 1
  store i64 %9, i64* %nonIdPauliCount, align 4
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__1
  br label %exiting__1

exiting__1:                                       ; preds = %continue__1
  %10 = add i64 %i, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %11 = load i64, i64* %nonIdPauliCount, align 4
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %11)
  %13 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %18, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %12, i64 %14)
  %17 = bitcast i8* %16 to i64*
  store i64 0, i64* %17, align 4
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %18 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %indices = alloca %Array*, align 8
  store %Array* %12, %Array** %indices, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %index = alloca i64, align 8
  store i64 0, i64* %index, align 4
  %19 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %i__1 = phi i64 [ 0, %exit__2 ], [ %32, %exiting__3 ]
  %20 = icmp sle i64 %i__1, %19
  br i1 %20, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %paulies, i64 %i__1)
  %22 = bitcast i8* %21 to i2*
  %23 = load i2, i2* %22, align 1
  %24 = load i2, i2* @PauliI, align 1
  %25 = icmp ne i2 %23, %24
  br i1 %25, label %then0__2, label %continue__2

then0__2:                                         ; preds = %body__3
  %26 = load %Array*, %Array** %indices, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 -1)
  %27 = call %Array* @__quantum__rt__array_copy(%Array* %26, i1 false)
  %28 = load i64, i64* %index, align 4
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %28)
  %30 = bitcast i8* %29 to i64*
  store i64 %i__1, i64* %30, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  store %Array* %27, %Array** %indices, align 8
  %31 = add i64 %28, 1
  store i64 %31, i64* %index, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %body__3
  br label %exiting__3

exiting__3:                                       ; preds = %continue__2
  %32 = add i64 %i__1, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %33 = load %Array*, %Array** %indices, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %paulies, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 -1)
  ret %Array* %33
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____body(%Qubit* %control1, %Qubit* %control2, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %target, %Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control1, %Qubit* %control2)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %control2)
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %target, %Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %control1, %Qubit* %control2)
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %control2)
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %target, %Qubit* %control2)
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____adj(%Qubit* %control1, %Qubit* %control2, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %target, %Qubit* %control2)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %control2)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %control1, %Qubit* %control2)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %target, %Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %control2)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %control1, %Qubit* %control2)
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %target, %Qubit* %control1)
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic____QsRef36__PreparePostM____body(%Result* %result, %Qubit* %qubit) {
entry:
  ret void
}

define internal { %Array*, %Array* }* @Microsoft__Quantum__Intrinsic____QsRef36__RemovePauliI____body(%Array* %paulis, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %indices = call %Array* @Microsoft__Quantum__Intrinsic____QsRef36__IndicesOfNonIdentity____body(%Array* %paulis)
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 1)
  %newPaulis = call %Array* @Microsoft__Quantum__Intrinsic___e4617f55854145d395076bc0a02eb22d___QsRef36__Subarray____body(%Array* %indices, %Array* %paulis)
  call void @__quantum__rt__array_update_alias_count(%Array* %newPaulis, i32 1)
  %newQubits = call %Array* @Microsoft__Quantum__Intrinsic___9bcea4665028401a8d2f264f56e3dbd8___QsRef36__Subarray____body(%Array* %indices, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %newQubits, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Array*, %Array* }*
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %newPaulis, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newQubits, i32 1)
  store %Array* %newPaulis, %Array** %2, align 8
  store %Array* %newQubits, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %paulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %newPaulis, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %newQubits, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newPaulis, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %newQubits, i32 -1)
  ret { %Array*, %Array* }* %1
}

define internal %Array* @Microsoft__Quantum__Intrinsic___e4617f55854145d395076bc0a02eb22d___QsRef36__Subarray____body(%Array* %indices, %Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %nSliced = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %0 = load i2, i2* @PauliI, align 1
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nSliced)
  %2 = sub i64 %nSliced, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %6 = bitcast i8* %5 to i2*
  store i2 %0, i2* %6, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %sliced = alloca %Array*, align 8
  store %Array* %1, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %8 = sub i64 %nSliced, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idx = phi i64 [ 0, %exit__1 ], [ %20, %exiting__2 ]
  %9 = icmp sle i64 %idx, %8
  br i1 %9, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %10 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 -1)
  %11 = call %Array* @__quantum__rt__array_copy(%Array* %10, i1 false)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %idx)
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 4
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %16 = bitcast i8* %15 to i2*
  %17 = load i2, i2* %16, align 1
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %idx)
  %19 = bitcast i8* %18 to i2*
  store i2 %17, i2* %19, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  store %Array* %11, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %20 = add i64 %idx, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %21 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 -1)
  ret %Array* %21
}

define internal %Array* @Microsoft__Quantum__Intrinsic___9bcea4665028401a8d2f264f56e3dbd8___QsRef36__Subarray____body(%Array* %indices, %Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %nSliced = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nSliced)
  %1 = sub i64 %nSliced, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to %Qubit**
  store %Qubit* null, %Qubit** %5, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %sliced = alloca %Array*, align 8
  store %Array* %0, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 1)
  %7 = sub i64 %nSliced, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idx = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %8 = icmp sle i64 %idx, %7
  br i1 %8, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %9 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 -1)
  %10 = call %Array* @__quantum__rt__array_copy(%Array* %9, i1 false)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %idx)
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 4
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %13)
  %15 = bitcast i8* %14 to %Qubit**
  %16 = load %Qubit*, %Qubit** %15, align 8
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %idx)
  %18 = bitcast i8* %17 to %Qubit**
  store %Qubit* %16, %Qubit** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  store %Array* %10, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %idx, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %20 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  ret %Array* %20
}

define internal void @Microsoft__Quantum__Intrinsic__CCNOT__body(%Qubit* %control1, %Qubit* %control2, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__CCZ____body(%Qubit* %control1, %Qubit* %control2, %Qubit* %target)
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CCNOT__adj(%Qubit* %control1, %Qubit* %control2, %Qubit* %target) {
entry:
  call void @Microsoft__Quantum__Intrinsic__CCNOT__body(%Qubit* %control1, %Qubit* %control2, %Qubit* %target)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CCNOT__ctl(%Array* %ctls, { %Qubit*, %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control1 = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %control2 = load %Qubit*, %Qubit** %2, align 8
  %3 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 2
  %target = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 0)
  %6 = bitcast i8* %5 to %Qubit**
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 1)
  %8 = bitcast i8* %7 to %Qubit**
  store %Qubit* %control1, %Qubit** %6, align 8
  store %Qubit* %control2, %Qubit** %8, align 8
  %9 = call %Array* @__quantum__rt__array_concatenate(%Array* %ctls, %Array* %4)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 1)
  call void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %9, %Qubit* %target)
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  ret void
}

declare %Array* @__quantum__rt__array_concatenate(%Array*, %Array*)

define internal void @Microsoft__Quantum__Intrinsic__CCNOT__ctladj(%Array* %__controlQubits__, { %Qubit*, %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control1 = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %control2 = load %Qubit*, %Qubit** %2, align 8
  %3 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %0, i32 0, i32 2
  %target = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit*, %Qubit*, %Qubit* }* getelementptr ({ %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Qubit*, %Qubit*, %Qubit* }*
  %6 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { %Qubit*, %Qubit*, %Qubit* }, { %Qubit*, %Qubit*, %Qubit* }* %5, i32 0, i32 2
  store %Qubit* %control1, %Qubit** %6, align 8
  store %Qubit* %control2, %Qubit** %7, align 8
  store %Qubit* %target, %Qubit** %8, align 8
  call void @Microsoft__Quantum__Intrinsic__CCNOT__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit*, %Qubit* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic___c58cb28809e843f891697cf044f848da___QsRef36__ApplyWithLessControlsA____body(%Callable* %op, { %Array*, { %Qubit*, %Qubit* }* }* %0) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %0, i32 0, i32 0
  %controls = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 1)
  %2 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %0, i32 0, i32 1
  %arg = load { %Qubit*, %Qubit* }*, { %Qubit*, %Qubit* }** %2, align 8
  %3 = bitcast { %Qubit*, %Qubit* }* %arg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %numControls = call i64 @__quantum__rt__array_get_size_1d(%Array* %controls)
  %numControlPairs = sdiv i64 %numControls, 2
  %temps = call %Array* @__quantum__rt__qubit_allocate_array(i64 %numControlPairs)
  call void @__quantum__rt__array_update_alias_count(%Array* %temps, i32 1)
  %4 = sub i64 %numControlPairs, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %__qsVar0__numPair__ = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %5 = icmp sle i64 %__qsVar0__numPair__, %4
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = mul i64 2, %__qsVar0__numPair__
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %6)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = mul i64 2, %__qsVar0__numPair__
  %11 = add i64 %10, 1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %11)
  %13 = bitcast i8* %12 to %Qubit**
  %14 = load %Qubit*, %Qubit** %13, align 8
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %temps, i64 %__qsVar0__numPair__)
  %16 = bitcast i8* %15 to %Qubit**
  %17 = load %Qubit*, %Qubit** %16, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____body(%Qubit* %9, %Qubit* %14, %Qubit* %17)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %__qsVar0__numPair__, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %19 = srem i64 %numControls, 2
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__1
  call void @__quantum__rt__array_update_reference_count(%Array* %temps, i32 1)
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__1
  %21 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 0)
  %23 = bitcast i8* %22 to %Qubit**
  %24 = sub i64 %numControls, 1
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %24)
  %26 = bitcast i8* %25 to %Qubit**
  %27 = load %Qubit*, %Qubit** %26, align 8
  store %Qubit* %27, %Qubit** %23, align 8
  %28 = call %Array* @__quantum__rt__array_concatenate(%Array* %temps, %Array* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %__qsVar1__newControls__ = phi %Array* [ %temps, %condTrue__1 ], [ %28, %condFalse__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__newControls__, i32 1)
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Qubit*, %Qubit* }* }* getelementptr ({ %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { %Array*, { %Qubit*, %Qubit* }* }*
  %31 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %30, i32 0, i32 0
  %32 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %30, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__newControls__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 1)
  store %Array* %__qsVar1__newControls__, %Array** %31, align 8
  store { %Qubit*, %Qubit* }* %arg, { %Qubit*, %Qubit* }** %32, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %29, %Tuple* null)
  %33 = sub i64 %numControlPairs, 1
  %34 = sub i64 %33, 0
  %35 = sdiv i64 %34, 1
  %36 = mul i64 1, %35
  %37 = add i64 0, %36
  %38 = load %Range, %Range* @EmptyRange, align 4
  %39 = insertvalue %Range %38, i64 %37, 0
  %40 = insertvalue %Range %39, i64 -1, 1
  %41 = insertvalue %Range %40, i64 0, 2
  %42 = extractvalue %Range %41, 0
  %43 = extractvalue %Range %41, 1
  %44 = extractvalue %Range %41, 2
  br label %preheader__1

preheader__1:                                     ; preds = %condContinue__1
  %45 = icmp sgt i64 %43, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar0____qsVar0__numPair____ = phi i64 [ %42, %preheader__1 ], [ %61, %exiting__2 ]
  %46 = icmp sle i64 %__qsVar0____qsVar0__numPair____, %44
  %47 = icmp sge i64 %__qsVar0____qsVar0__numPair____, %44
  %48 = select i1 %45, i1 %46, i1 %47
  br i1 %48, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %49 = mul i64 2, %__qsVar0____qsVar0__numPair____
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %49)
  %51 = bitcast i8* %50 to %Qubit**
  %52 = load %Qubit*, %Qubit** %51, align 8
  %53 = mul i64 2, %__qsVar0____qsVar0__numPair____
  %54 = add i64 %53, 1
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %54)
  %56 = bitcast i8* %55 to %Qubit**
  %57 = load %Qubit*, %Qubit** %56, align 8
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %temps, i64 %__qsVar0____qsVar0__numPair____)
  %59 = bitcast i8* %58 to %Qubit**
  %60 = load %Qubit*, %Qubit** %59, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____adj(%Qubit* %52, %Qubit* %57, %Qubit* %60)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %61 = add i64 %__qsVar0____qsVar0__numPair____, %43
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %temps, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__newControls__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__newControls__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__newControls__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %temps)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit*, %Qubit* }*
  %1 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Qubit*, %Qubit** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit*, %Qubit* }*
  %1 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Qubit*, %Qubit** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__adj(%Qubit* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Qubit*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Qubit*, %Qubit* }*, { %Qubit*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__ctl(%Array* %3, { %Qubit*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Qubit*, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Qubit*, %Qubit* }*, { %Qubit*, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__ctladj(%Array* %3, { %Qubit*, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__CNOT__ctladj(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 0
  %control = load %Qubit*, %Qubit** %1, align 8
  %2 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %0, i32 0, i32 1
  %target = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Qubit*, %Qubit* }* getelementptr ({ %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Qubit*, %Qubit* }*
  %5 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Qubit*, %Qubit* }, { %Qubit*, %Qubit* }* %4, i32 0, i32 1
  store %Qubit* %control, %Qubit** %5, align 8
  store %Qubit* %target, %Qubit** %6, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__ctl(%Array* %__controlQubits__, { %Qubit*, %Qubit* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__27__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i2, %Qubit* }*
  %1 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 0
  %2 = load i2, i2* %1, align 1
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 1
  %7 = load %Qubit*, %Qubit** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { i2, double, %Qubit* }*
  %10 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 2
  store i2 %2, i2* %10, align 1
  store double %5, double* %11, align 8
  store %Qubit* %7, %Qubit** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__27__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i2, %Qubit* }*
  %1 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 0
  %2 = load i2, i2* %1, align 1
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 1
  %7 = load %Qubit*, %Qubit** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { i2, double, %Qubit* }*
  %10 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 2
  store i2 %2, i2* %10, align 1
  store double %5, double* %11, align 8
  store %Qubit* %7, %Qubit** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__27__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i2, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i2, %Qubit* }*, { i2, %Qubit* }** %2, align 8
  %5 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %4, i32 0, i32 0
  %6 = load i2, i2* %5, align 1
  %7 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %8 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %7, i32 0, i32 1
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %4, i32 0, i32 1
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i2, double, %Qubit* }*
  %14 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %13, i32 0, i32 2
  store i2 %6, i2* %14, align 1
  store double %9, double* %15, align 8
  store %Qubit* %11, %Qubit** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i2, double, %Qubit* }* }* getelementptr ({ %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { i2, double, %Qubit* }* }*
  %19 = getelementptr inbounds { %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { i2, double, %Qubit* }* %13, { i2, double, %Qubit* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %7, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__27__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i2, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i2, %Qubit* }*, { i2, %Qubit* }** %2, align 8
  %5 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %4, i32 0, i32 0
  %6 = load i2, i2* %5, align 1
  %7 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %8 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %7, i32 0, i32 1
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %4, i32 0, i32 1
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i2, double, %Qubit* }*
  %14 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %13, i32 0, i32 2
  store i2 %6, i2* %14, align 1
  store double %9, double* %15, align 8
  store %Qubit* %11, %Qubit** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i2, double, %Qubit* }* }* getelementptr ({ %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { i2, double, %Qubit* }* }*
  %19 = getelementptr inbounds { %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { i2, double, %Qubit* }* %13, { i2, double, %Qubit* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %7, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i2, double, %Qubit* }*
  %1 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 2
  %4 = load i2, i2* %1, align 1
  %5 = load double, double* %2, align 8
  %6 = load %Qubit*, %Qubit** %3, align 8
  call void @Microsoft__Quantum__Intrinsic__R__body(i2 %4, double %5, %Qubit* %6)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i2, double, %Qubit* }*
  %1 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 2
  %4 = load i2, i2* %1, align 1
  %5 = load double, double* %2, align 8
  %6 = load %Qubit*, %Qubit** %3, align 8
  call void @Microsoft__Quantum__Intrinsic__R__adj(i2 %4, double %5, %Qubit* %6)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i2, double, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i2, double, %Qubit* }*, { i2, double, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__R__ctl(%Array* %3, { i2, double, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i2, double, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i2, double, %Qubit* }*, { i2, double, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__R__ctladj(%Array* %3, { i2, double, %Qubit* }* %4)
  ret void
}

define internal void @MemoryManagement__16__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__16__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R__body(i2 %pauli, double %theta, %Qubit* %qubit) {
entry:
  %0 = load i2, i2* @PauliX, align 1
  %1 = icmp eq i2 %pauli, %0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic__Rx__body(double %theta, %Qubit* %qubit)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = load i2, i2* @PauliY, align 1
  %3 = icmp eq i2 %pauli, %2
  br i1 %3, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Intrinsic__Ry__body(double %theta, %Qubit* %qubit)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %4 = load i2, i2* @PauliZ, align 1
  %5 = icmp eq i2 %pauli, %4
  br i1 %5, label %then2__1, label %else__1

then2__1:                                         ; preds = %test2__1
  call void @Microsoft__Quantum__Intrinsic__Rz__body(double %theta, %Qubit* %qubit)
  br label %continue__1

else__1:                                          ; preds = %test2__1
  %6 = fneg double %theta
  %7 = fdiv double %6, 2.000000e+00
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyGlobalPhase____body(double %7)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then2__1, %then1__1, %then0__1
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R__adj(i2 %pauli, double %theta, %Qubit* %qubit) {
entry:
  %0 = load i2, i2* @PauliX, align 1
  %1 = icmp eq i2 %pauli, %0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic__Rx__adj(double %theta, %Qubit* %qubit)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = load i2, i2* @PauliY, align 1
  %3 = icmp eq i2 %pauli, %2
  br i1 %3, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Intrinsic__Ry__adj(double %theta, %Qubit* %qubit)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %4 = load i2, i2* @PauliZ, align 1
  %5 = icmp eq i2 %pauli, %4
  br i1 %5, label %then2__1, label %else__1

then2__1:                                         ; preds = %test2__1
  call void @Microsoft__Quantum__Intrinsic__Rz__adj(double %theta, %Qubit* %qubit)
  br label %continue__1

else__1:                                          ; preds = %test2__1
  %6 = fneg double %theta
  %7 = fdiv double %6, 2.000000e+00
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyGlobalPhase____adj(double %7)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then2__1, %then1__1, %then0__1
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 1
  %theta = load double, double* %2, align 8
  %3 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 2
  %qubit = load %Qubit*, %Qubit** %3, align 8
  %4 = load i2, i2* @PauliX, align 1
  %5 = icmp eq i2 %pauli, %4
  br i1 %5, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Qubit* }*
  %8 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 1
  store double %theta, double* %8, align 8
  store %Qubit* %qubit, %Qubit** %9, align 8
  call void @Microsoft__Quantum__Intrinsic__Rx__ctl(%Array* %__controlQubits__, { double, %Qubit* }* %7)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = load i2, i2* @PauliY, align 1
  %11 = icmp eq i2 %pauli, %10
  br i1 %11, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Qubit* }*
  %14 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %13, i32 0, i32 1
  store double %theta, double* %14, align 8
  store %Qubit* %qubit, %Qubit** %15, align 8
  call void @Microsoft__Quantum__Intrinsic__Ry__ctl(%Array* %__controlQubits__, { double, %Qubit* }* %13)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %16 = load i2, i2* @PauliZ, align 1
  %17 = icmp eq i2 %pauli, %16
  br i1 %17, label %then2__1, label %else__1

then2__1:                                         ; preds = %test2__1
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Qubit* }*
  %20 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %19, i32 0, i32 1
  store double %theta, double* %20, align 8
  store %Qubit* %qubit, %Qubit** %21, align 8
  call void @Microsoft__Quantum__Intrinsic__Rz__ctl(%Array* %__controlQubits__, { double, %Qubit* }* %19)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test2__1
  %22 = fneg double %theta
  %23 = fdiv double %22, 2.000000e+00
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyGlobalPhase____ctl(%Array* %__controlQubits__, double %23)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 1
  %theta = load double, double* %2, align 8
  %3 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %0, i32 0, i32 2
  %qubit = load %Qubit*, %Qubit** %3, align 8
  %4 = load i2, i2* @PauliX, align 1
  %5 = icmp eq i2 %pauli, %4
  br i1 %5, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Qubit* }*
  %8 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %7, i32 0, i32 1
  store double %theta, double* %8, align 8
  store %Qubit* %qubit, %Qubit** %9, align 8
  call void @Microsoft__Quantum__Intrinsic__Rx__ctladj(%Array* %__controlQubits__, { double, %Qubit* }* %7)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = load i2, i2* @PauliY, align 1
  %11 = icmp eq i2 %pauli, %10
  br i1 %11, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, %Qubit* }*
  %14 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %13, i32 0, i32 1
  store double %theta, double* %14, align 8
  store %Qubit* %qubit, %Qubit** %15, align 8
  call void @Microsoft__Quantum__Intrinsic__Ry__ctladj(%Array* %__controlQubits__, { double, %Qubit* }* %13)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %16 = load i2, i2* @PauliZ, align 1
  %17 = icmp eq i2 %pauli, %16
  br i1 %17, label %then2__1, label %else__1

then2__1:                                         ; preds = %test2__1
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Qubit* }*
  %20 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %19, i32 0, i32 1
  store double %theta, double* %20, align 8
  store %Qubit* %qubit, %Qubit** %21, align 8
  call void @Microsoft__Quantum__Intrinsic__Rz__ctladj(%Array* %__controlQubits__, { double, %Qubit* }* %19)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test2__1
  %22 = fneg double %theta
  %23 = fdiv double %22, 2.000000e+00
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyGlobalPhase____ctladj(%Array* %__controlQubits__, double %23)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__28__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i2, %Qubit* }*
  %1 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 0
  %2 = load i2, i2* %1, align 1
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 1
  %7 = load %Qubit*, %Qubit** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { i2, double, %Qubit* }*
  %10 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 2
  store i2 %2, i2* %10, align 1
  store double %5, double* %11, align 8
  store %Qubit* %7, %Qubit** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__28__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i2, %Qubit* }*
  %1 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 0
  %2 = load i2, i2* %1, align 1
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %0, i32 0, i32 1
  %7 = load %Qubit*, %Qubit** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { i2, double, %Qubit* }*
  %10 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %9, i32 0, i32 2
  store i2 %2, i2* %10, align 1
  store double %5, double* %11, align 8
  store %Qubit* %7, %Qubit** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__28__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i2, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i2, %Qubit* }*, { i2, %Qubit* }** %2, align 8
  %5 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %4, i32 0, i32 0
  %6 = load i2, i2* %5, align 1
  %7 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %8 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %7, i32 0, i32 1
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %4, i32 0, i32 1
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i2, double, %Qubit* }*
  %14 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %13, i32 0, i32 2
  store i2 %6, i2* %14, align 1
  store double %9, double* %15, align 8
  store %Qubit* %11, %Qubit** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i2, double, %Qubit* }* }* getelementptr ({ %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { i2, double, %Qubit* }* }*
  %19 = getelementptr inbounds { %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { i2, double, %Qubit* }* %13, { i2, double, %Qubit* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %7, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__28__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i2, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i2, %Qubit* }* }, { %Array*, { i2, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i2, %Qubit* }*, { i2, %Qubit* }** %2, align 8
  %5 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %4, i32 0, i32 0
  %6 = load i2, i2* %5, align 1
  %7 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %8 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %7, i32 0, i32 1
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds { i2, %Qubit* }, { i2, %Qubit* }* %4, i32 0, i32 1
  %11 = load %Qubit*, %Qubit** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i2, double, %Qubit* }*
  %14 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %13, i32 0, i32 2
  store i2 %6, i2* %14, align 1
  store double %9, double* %15, align 8
  store %Qubit* %11, %Qubit** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i2, double, %Qubit* }* }* getelementptr ({ %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { i2, double, %Qubit* }* }*
  %19 = getelementptr inbounds { %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { i2, double, %Qubit* }* }, { %Array*, { i2, double, %Qubit* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { i2, double, %Qubit* }* %13, { i2, double, %Qubit* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %7, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic___d032bd2a9ae646cf9b61adf1f6b1e6c1___QsRef36__ApplyWithLessControlsA____body(%Callable* %op, { %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %controls = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 1)
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %arg = load %Qubit*, %Qubit** %2, align 8
  %numControls = call i64 @__quantum__rt__array_get_size_1d(%Array* %controls)
  %numControlPairs = sdiv i64 %numControls, 2
  %temps = call %Array* @__quantum__rt__qubit_allocate_array(i64 %numControlPairs)
  call void @__quantum__rt__array_update_alias_count(%Array* %temps, i32 1)
  %3 = sub i64 %numControlPairs, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %__qsVar0__numPair__ = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %4 = icmp sle i64 %__qsVar0__numPair__, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = mul i64 2, %__qsVar0__numPair__
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %5)
  %7 = bitcast i8* %6 to %Qubit**
  %8 = load %Qubit*, %Qubit** %7, align 8
  %9 = mul i64 2, %__qsVar0__numPair__
  %10 = add i64 %9, 1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %10)
  %12 = bitcast i8* %11 to %Qubit**
  %13 = load %Qubit*, %Qubit** %12, align 8
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %temps, i64 %__qsVar0__numPair__)
  %15 = bitcast i8* %14 to %Qubit**
  %16 = load %Qubit*, %Qubit** %15, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____body(%Qubit* %8, %Qubit* %13, %Qubit* %16)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %__qsVar0__numPair__, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %18 = srem i64 %numControls, 2
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__1
  call void @__quantum__rt__array_update_reference_count(%Array* %temps, i32 1)
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__1
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 0)
  %22 = bitcast i8* %21 to %Qubit**
  %23 = sub i64 %numControls, 1
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %23)
  %25 = bitcast i8* %24 to %Qubit**
  %26 = load %Qubit*, %Qubit** %25, align 8
  store %Qubit* %26, %Qubit** %22, align 8
  %27 = call %Array* @__quantum__rt__array_concatenate(%Array* %temps, %Array* %20)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %__qsVar1__newControls__ = phi %Array* [ %temps, %condTrue__1 ], [ %27, %condFalse__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__newControls__, i32 1)
  %28 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %29 = bitcast %Tuple* %28 to { %Array*, %Qubit* }*
  %30 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %29, i32 0, i32 0
  %31 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %29, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__newControls__, i32 1)
  store %Array* %__qsVar1__newControls__, %Array** %30, align 8
  store %Qubit* %arg, %Qubit** %31, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %28, %Tuple* null)
  %32 = sub i64 %numControlPairs, 1
  %33 = sub i64 %32, 0
  %34 = sdiv i64 %33, 1
  %35 = mul i64 1, %34
  %36 = add i64 0, %35
  %37 = load %Range, %Range* @EmptyRange, align 4
  %38 = insertvalue %Range %37, i64 %36, 0
  %39 = insertvalue %Range %38, i64 -1, 1
  %40 = insertvalue %Range %39, i64 0, 2
  %41 = extractvalue %Range %40, 0
  %42 = extractvalue %Range %40, 1
  %43 = extractvalue %Range %40, 2
  br label %preheader__1

preheader__1:                                     ; preds = %condContinue__1
  %44 = icmp sgt i64 %42, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar0____qsVar0__numPair____ = phi i64 [ %41, %preheader__1 ], [ %60, %exiting__2 ]
  %45 = icmp sle i64 %__qsVar0____qsVar0__numPair____, %43
  %46 = icmp sge i64 %__qsVar0____qsVar0__numPair____, %43
  %47 = select i1 %44, i1 %45, i1 %46
  br i1 %47, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %48 = mul i64 2, %__qsVar0____qsVar0__numPair____
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %48)
  %50 = bitcast i8* %49 to %Qubit**
  %51 = load %Qubit*, %Qubit** %50, align 8
  %52 = mul i64 2, %__qsVar0____qsVar0__numPair____
  %53 = add i64 %52, 1
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %53)
  %55 = bitcast i8* %54 to %Qubit**
  %56 = load %Qubit*, %Qubit** %55, align 8
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %temps, i64 %__qsVar0____qsVar0__numPair____)
  %58 = bitcast i8* %57 to %Qubit**
  %59 = load %Qubit*, %Qubit** %58, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____adj(%Qubit* %51, %Qubit* %56, %Qubit* %59)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %60 = add i64 %__qsVar0____qsVar0__numPair____, %42
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %temps, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__newControls__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__newControls__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__newControls__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %temps)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 -1)
  ret void
}

define internal %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %qubit) {
entry:
  %result = call %Result* @__quantum__qis__m__body(%Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic____QsRef36__PreparePostM____body(%Result* %result, %Qubit* %qubit)
  ret %Result* %result
}

declare %Result* @__quantum__qis__m__body(%Qubit*)

define internal void @Microsoft__Quantum__Intrinsic__Ry__body(double %theta, %Qubit* %qubit) {
entry:
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledRy____body(double %theta, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rx__adj(double %theta, %Qubit* %qubit) {
entry:
  %0 = fneg double %theta
  call void @Microsoft__Quantum__Intrinsic__Rx__body(double %0, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Ry__adj(double %theta, %Qubit* %qubit) {
entry:
  %0 = fneg double %theta
  call void @Microsoft__Quantum__Intrinsic__Ry__body(double %0, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rz__adj(double %theta, %Qubit* %qubit) {
entry:
  %0 = fneg double %theta
  call void @Microsoft__Quantum__Intrinsic__Rz__body(double %0, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rx__ctl(%Array* %ctls, { double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 1)
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %theta = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledRx____body(double %theta, %Qubit* %qubit)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %6 = icmp eq i64 %5, 1
  br i1 %6, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %7 = load i2, i2* @PauliZ, align 1
  %8 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____body(%Qubit* %qubit, i2 %7, i2 %8)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { double, %Qubit* }*
  %11 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %10, i32 0, i32 1
  store double %theta, double* %11, align 8
  store %Qubit* %qubit, %Qubit** %12, align 8
  call void @Microsoft__Quantum__Intrinsic__Rz__ctl(%Array* %ctls, { double, %Qubit* }* %10)
  %13 = load i2, i2* @PauliZ, align 1
  %14 = load i2, i2* @PauliX, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____adj(%Qubit* %qubit, i2 %13, i2 %14)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__Rx__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Qubit* }* }* getelementptr ({ %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { double, %Qubit* }* }*
  %18 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %17, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Qubit* }*
  %22 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %21, i32 0, i32 1
  store double %theta, double* %22, align 8
  store %Qubit* %qubit, %Qubit** %23, align 8
  store %Array* %ctls, %Array** %18, align 8
  store { double, %Qubit* }* %21, { double, %Qubit* }** %19, align 8
  call void @Microsoft__Quantum__Intrinsic___7ab1b1d6752243cd8c3daf513a84c9cb___QsRef36__ApplyWithLessControlsA____body(%Callable* %15, { %Array*, { double, %Qubit* }* }* %17)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Ry__ctl(%Array* %ctls, { double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 1)
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %theta = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledRy____body(double %theta, %Qubit* %qubit)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %6 = icmp eq i64 %5, 1
  br i1 %6, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %7 = load i2, i2* @PauliZ, align 1
  %8 = load i2, i2* @PauliY, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____body(%Qubit* %qubit, i2 %7, i2 %8)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { double, %Qubit* }*
  %11 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %10, i32 0, i32 0
  %12 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %10, i32 0, i32 1
  store double %theta, double* %11, align 8
  store %Qubit* %qubit, %Qubit** %12, align 8
  call void @Microsoft__Quantum__Intrinsic__Rz__ctl(%Array* %ctls, { double, %Qubit* }* %10)
  %13 = load i2, i2* @PauliZ, align 1
  %14 = load i2, i2* @PauliY, align 1
  call void @Microsoft__Quantum__Intrinsic____QsRef36__MapPauli____adj(%Qubit* %qubit, i2 %13, i2 %14)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__Ry__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Qubit* }* }* getelementptr ({ %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { double, %Qubit* }* }*
  %18 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %17, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Qubit* }*
  %22 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %21, i32 0, i32 1
  store double %theta, double* %22, align 8
  store %Qubit* %qubit, %Qubit** %23, align 8
  store %Array* %ctls, %Array** %18, align 8
  store { double, %Qubit* }* %21, { double, %Qubit* }** %19, align 8
  call void @Microsoft__Quantum__Intrinsic___7ab1b1d6752243cd8c3daf513a84c9cb___QsRef36__ApplyWithLessControlsA____body(%Callable* %15, { %Array*, { double, %Qubit* }* }* %17)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rz__ctl(%Array* %ctls, { double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 1)
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %theta = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic__Rz__body(double %theta, %Qubit* %qubit)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %6 = icmp eq i64 %5, 1
  br i1 %6, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %7 = fdiv double %theta, 2.000000e+00
  call void @Microsoft__Quantum__Intrinsic__Rz__body(double %7, %Qubit* %qubit)
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %9 = bitcast i8* %8 to %Qubit**
  %10 = load %Qubit*, %Qubit** %9, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %10, %Qubit* %qubit)
  %11 = fneg double %theta
  %12 = fdiv double %11, 2.000000e+00
  call void @Microsoft__Quantum__Intrinsic__Rz__body(double %12, %Qubit* %qubit)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %14 = bitcast i8* %13 to %Qubit**
  %15 = load %Qubit*, %Qubit** %14, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %15, %Qubit* %qubit)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %16 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__Rz__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_controlled(%Callable* %16)
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Qubit* }* }* getelementptr ({ %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { double, %Qubit* }* }*
  %19 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %18, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 1)
  %21 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %22 = bitcast %Tuple* %21 to { double, %Qubit* }*
  %23 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %22, i32 0, i32 0
  %24 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %22, i32 0, i32 1
  store double %theta, double* %23, align 8
  store %Qubit* %qubit, %Qubit** %24, align 8
  store %Array* %ctls, %Array** %19, align 8
  store { double, %Qubit* }* %22, { double, %Qubit* }** %20, align 8
  call void @Microsoft__Quantum__Intrinsic___7ab1b1d6752243cd8c3daf513a84c9cb___QsRef36__ApplyWithLessControlsA____body(%Callable* %16, { %Array*, { double, %Qubit* }* }* %18)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rx__ctladj(%Array* %__controlQubits__, { double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %theta = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { double, %Qubit* }*
  %5 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %4, i32 0, i32 1
  %7 = fneg double %theta
  store double %7, double* %5, align 8
  store %Qubit* %qubit, %Qubit** %6, align 8
  call void @Microsoft__Quantum__Intrinsic__Rx__ctl(%Array* %__controlQubits__, { double, %Qubit* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Ry__ctladj(%Array* %__controlQubits__, { double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %theta = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { double, %Qubit* }*
  %5 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %4, i32 0, i32 1
  %7 = fneg double %theta
  store double %7, double* %5, align 8
  store %Qubit* %qubit, %Qubit** %6, align 8
  call void @Microsoft__Quantum__Intrinsic__Ry__ctl(%Array* %__controlQubits__, { double, %Qubit* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rz__ctladj(%Array* %__controlQubits__, { double, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %theta = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %qubit = load %Qubit*, %Qubit** %2, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { double, %Qubit* }*
  %5 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %4, i32 0, i32 1
  %7 = fneg double %theta
  store double %7, double* %5, align 8
  store %Qubit* %qubit, %Qubit** %6, align 8
  call void @Microsoft__Quantum__Intrinsic__Rz__ctl(%Array* %__controlQubits__, { double, %Qubit* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1__body(double %theta, %Qubit* %qubit) {
entry:
  %0 = load i2, i2* @PauliZ, align 1
  call void @Microsoft__Quantum__Intrinsic__R__body(i2 %0, double %theta, %Qubit* %qubit)
  %1 = load i2, i2* @PauliI, align 1
  %2 = fneg double %theta
  call void @Microsoft__Quantum__Intrinsic__R__body(i2 %1, double %2, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1__adj(double %theta, %Qubit* %qubit) {
entry:
  %0 = load i2, i2* @PauliI, align 1
  %1 = fneg double %theta
  call void @Microsoft__Quantum__Intrinsic__R__adj(i2 %0, double %1, %Qubit* %qubit)
  %2 = load i2, i2* @PauliZ, align 1
  call void @Microsoft__Quantum__Intrinsic__R__adj(i2 %2, double %theta, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1Frac__body(i64 %numerator, i64 %power, %Qubit* %qubit) {
entry:
  %0 = load i2, i2* @PauliZ, align 1
  %1 = sub i64 0, %numerator
  %2 = add i64 %power, 1
  call void @Microsoft__Quantum__Intrinsic__RFrac__body(i2 %0, i64 %1, i64 %2, %Qubit* %qubit)
  %3 = load i2, i2* @PauliI, align 1
  %4 = add i64 %power, 1
  call void @Microsoft__Quantum__Intrinsic__RFrac__body(i2 %3, i64 %numerator, i64 %4, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__RFrac__body(i2 %pauli, i64 %numerator, i64 %power, %Qubit* %qubit) {
entry:
  %0 = call double @Microsoft__Quantum__Math__PI__body()
  %1 = fmul double -2.000000e+00, %0
  %2 = sitofp i64 %numerator to double
  %3 = fmul double %1, %2
  %4 = sitofp i64 %power to double
  %5 = call double @llvm.pow.f64(double 2.000000e+00, double %4)
  %angle = fdiv double %3, %5
  call void @Microsoft__Quantum__Intrinsic__R__body(i2 %pauli, double %angle, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1Frac__adj(i64 %numerator, i64 %power, %Qubit* %qubit) {
entry:
  %0 = load i2, i2* @PauliI, align 1
  %1 = add i64 %power, 1
  call void @Microsoft__Quantum__Intrinsic__RFrac__adj(i2 %0, i64 %numerator, i64 %1, %Qubit* %qubit)
  %2 = load i2, i2* @PauliZ, align 1
  %3 = sub i64 0, %numerator
  %4 = add i64 %power, 1
  call void @Microsoft__Quantum__Intrinsic__RFrac__adj(i2 %2, i64 %3, i64 %4, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__RFrac__adj(i2 %pauli, i64 %numerator, i64 %power, %Qubit* %qubit) {
entry:
  %0 = call double @Microsoft__Quantum__Math__PI__body()
  %1 = fmul double -2.000000e+00, %0
  %2 = sitofp i64 %numerator to double
  %3 = fmul double %1, %2
  %4 = sitofp i64 %power to double
  %5 = call double @llvm.pow.f64(double 2.000000e+00, double %4)
  %__qsVar0__angle__ = fdiv double %3, %5
  call void @Microsoft__Quantum__Intrinsic__R__adj(i2 %pauli, double %__qsVar0__angle__, %Qubit* %qubit)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1Frac__ctl(%Array* %__controlQubits__, { i64, i64, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, i64, %Qubit* }, { i64, i64, %Qubit* }* %0, i32 0, i32 0
  %numerator = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, i64, %Qubit* }, { i64, i64, %Qubit* }* %0, i32 0, i32 1
  %power = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { i64, i64, %Qubit* }, { i64, i64, %Qubit* }* %0, i32 0, i32 2
  %qubit = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, i64, i64, %Qubit* }* getelementptr ({ i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { i2, i64, i64, %Qubit* }*
  %6 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %5, i32 0, i32 2
  %9 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %5, i32 0, i32 3
  %10 = load i2, i2* @PauliZ, align 1
  %11 = sub i64 0, %numerator
  %12 = add i64 %power, 1
  store i2 %10, i2* %6, align 1
  store i64 %11, i64* %7, align 4
  store i64 %12, i64* %8, align 4
  store %Qubit* %qubit, %Qubit** %9, align 8
  call void @Microsoft__Quantum__Intrinsic__RFrac__ctl(%Array* %__controlQubits__, { i2, i64, i64, %Qubit* }* %5)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, i64, i64, %Qubit* }* getelementptr ({ i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { i2, i64, i64, %Qubit* }*
  %15 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %14, i32 0, i32 1
  %17 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %14, i32 0, i32 2
  %18 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %14, i32 0, i32 3
  %19 = load i2, i2* @PauliI, align 1
  %20 = add i64 %power, 1
  store i2 %19, i2* %15, align 1
  store i64 %numerator, i64* %16, align 4
  store i64 %20, i64* %17, align 4
  store %Qubit* %qubit, %Qubit** %18, align 8
  call void @Microsoft__Quantum__Intrinsic__RFrac__ctl(%Array* %__controlQubits__, { i2, i64, i64, %Qubit* }* %14)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__RFrac__ctl(%Array* %__controlQubits__, { i2, i64, i64, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 1
  %numerator = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 2
  %power = load i64, i64* %3, align 4
  %4 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 3
  %qubit = load %Qubit*, %Qubit** %4, align 8
  %5 = call double @Microsoft__Quantum__Math__PI__body()
  %6 = fmul double -2.000000e+00, %5
  %7 = sitofp i64 %numerator to double
  %8 = fmul double %6, %7
  %9 = sitofp i64 %power to double
  %10 = call double @llvm.pow.f64(double 2.000000e+00, double %9)
  %angle = fdiv double %8, %10
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i2, double, %Qubit* }*
  %13 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %12, i32 0, i32 2
  store i2 %pauli, i2* %13, align 1
  store double %angle, double* %14, align 8
  store %Qubit* %qubit, %Qubit** %15, align 8
  call void @Microsoft__Quantum__Intrinsic__R__ctl(%Array* %__controlQubits__, { i2, double, %Qubit* }* %12)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__R1Frac__ctladj(%Array* %__controlQubits__, { i64, i64, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i64, i64, %Qubit* }, { i64, i64, %Qubit* }* %0, i32 0, i32 0
  %numerator = load i64, i64* %1, align 4
  %2 = getelementptr inbounds { i64, i64, %Qubit* }, { i64, i64, %Qubit* }* %0, i32 0, i32 1
  %power = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { i64, i64, %Qubit* }, { i64, i64, %Qubit* }* %0, i32 0, i32 2
  %qubit = load %Qubit*, %Qubit** %3, align 8
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, i64, i64, %Qubit* }* getelementptr ({ i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { i2, i64, i64, %Qubit* }*
  %6 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %5, i32 0, i32 2
  %9 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %5, i32 0, i32 3
  %10 = load i2, i2* @PauliI, align 1
  %11 = add i64 %power, 1
  store i2 %10, i2* %6, align 1
  store i64 %numerator, i64* %7, align 4
  store i64 %11, i64* %8, align 4
  store %Qubit* %qubit, %Qubit** %9, align 8
  call void @Microsoft__Quantum__Intrinsic__RFrac__ctladj(%Array* %__controlQubits__, { i2, i64, i64, %Qubit* }* %5)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, i64, i64, %Qubit* }* getelementptr ({ i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i2, i64, i64, %Qubit* }*
  %14 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %13, i32 0, i32 3
  %18 = load i2, i2* @PauliZ, align 1
  %19 = sub i64 0, %numerator
  %20 = add i64 %power, 1
  store i2 %18, i2* %14, align 1
  store i64 %19, i64* %15, align 4
  store i64 %20, i64* %16, align 4
  store %Qubit* %qubit, %Qubit** %17, align 8
  call void @Microsoft__Quantum__Intrinsic__RFrac__ctladj(%Array* %__controlQubits__, { i2, i64, i64, %Qubit* }* %13)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__RFrac__ctladj(%Array* %__controlQubits__, { i2, i64, i64, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 0
  %pauli = load i2, i2* %1, align 1
  %2 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 1
  %numerator = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 2
  %power = load i64, i64* %3, align 4
  %4 = getelementptr inbounds { i2, i64, i64, %Qubit* }, { i2, i64, i64, %Qubit* }* %0, i32 0, i32 3
  %qubit = load %Qubit*, %Qubit** %4, align 8
  %5 = call double @Microsoft__Quantum__Math__PI__body()
  %6 = fmul double -2.000000e+00, %5
  %7 = sitofp i64 %numerator to double
  %8 = fmul double %6, %7
  %9 = sitofp i64 %power to double
  %10 = call double @llvm.pow.f64(double 2.000000e+00, double %9)
  %__qsVar0__angle__ = fdiv double %8, %10
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i2, double, %Qubit* }* getelementptr ({ i2, double, %Qubit* }, { i2, double, %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { i2, double, %Qubit* }*
  %13 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %12, i32 0, i32 1
  %15 = getelementptr inbounds { i2, double, %Qubit* }, { i2, double, %Qubit* }* %12, i32 0, i32 2
  store i2 %pauli, i2* %13, align 1
  store double %__qsVar0__angle__, double* %14, align 8
  store %Qubit* %qubit, %Qubit** %15, align 8
  call void @Microsoft__Quantum__Intrinsic__R__ctladj(%Array* %__controlQubits__, { i2, double, %Qubit* }* %12)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %qubit) {
entry:
  %0 = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %qubit)
  %1 = call %Result* @__quantum__rt__result_get_one()
  %2 = call i1 @__quantum__rt__result_equal(%Result* %0, %Result* %1)
  call void @__quantum__rt__result_update_reference_count(%Result* %0, i32 -1)
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic__X__body(%Qubit* %qubit)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %entry
  ret void
}

declare %Result* @__quantum__rt__result_get_one()

declare i1 @__quantum__rt__result_equal(%Result*, %Result*)

declare void @__quantum__rt__result_update_reference_count(%Result*, i32)

define internal void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %2)
  %5 = bitcast i8* %4 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %qubit)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic___7ab1b1d6752243cd8c3daf513a84c9cb___QsRef36__ApplyWithLessControlsA____body(%Callable* %op, { %Array*, { double, %Qubit* }* }* %0) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %1 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 0
  %controls = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 1)
  %2 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 1
  %arg = load { double, %Qubit* }*, { double, %Qubit* }** %2, align 8
  %3 = bitcast { double, %Qubit* }* %arg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %numControls = call i64 @__quantum__rt__array_get_size_1d(%Array* %controls)
  %numControlPairs = sdiv i64 %numControls, 2
  %temps = call %Array* @__quantum__rt__qubit_allocate_array(i64 %numControlPairs)
  call void @__quantum__rt__array_update_alias_count(%Array* %temps, i32 1)
  %4 = sub i64 %numControlPairs, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %__qsVar0__numPair__ = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %5 = icmp sle i64 %__qsVar0__numPair__, %4
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = mul i64 2, %__qsVar0__numPair__
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %6)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = mul i64 2, %__qsVar0__numPair__
  %11 = add i64 %10, 1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %11)
  %13 = bitcast i8* %12 to %Qubit**
  %14 = load %Qubit*, %Qubit** %13, align 8
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %temps, i64 %__qsVar0__numPair__)
  %16 = bitcast i8* %15 to %Qubit**
  %17 = load %Qubit*, %Qubit** %16, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____body(%Qubit* %9, %Qubit* %14, %Qubit* %17)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %__qsVar0__numPair__, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %19 = srem i64 %numControls, 2
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__1
  call void @__quantum__rt__array_update_reference_count(%Array* %temps, i32 1)
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__1
  %21 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 0)
  %23 = bitcast i8* %22 to %Qubit**
  %24 = sub i64 %numControls, 1
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %24)
  %26 = bitcast i8* %25 to %Qubit**
  %27 = load %Qubit*, %Qubit** %26, align 8
  store %Qubit* %27, %Qubit** %23, align 8
  %28 = call %Array* @__quantum__rt__array_concatenate(%Array* %temps, %Array* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %__qsVar1__newControls__ = phi %Array* [ %temps, %condTrue__1 ], [ %28, %condFalse__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__newControls__, i32 1)
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Qubit* }* }* getelementptr ({ %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { %Array*, { double, %Qubit* }* }*
  %31 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %30, i32 0, i32 0
  %32 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %30, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__newControls__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 1)
  store %Array* %__qsVar1__newControls__, %Array** %31, align 8
  store { double, %Qubit* }* %arg, { double, %Qubit* }** %32, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %op, %Tuple* %29, %Tuple* null)
  %33 = sub i64 %numControlPairs, 1
  %34 = sub i64 %33, 0
  %35 = sdiv i64 %34, 1
  %36 = mul i64 1, %35
  %37 = add i64 0, %36
  %38 = load %Range, %Range* @EmptyRange, align 4
  %39 = insertvalue %Range %38, i64 %37, 0
  %40 = insertvalue %Range %39, i64 -1, 1
  %41 = insertvalue %Range %40, i64 0, 2
  %42 = extractvalue %Range %41, 0
  %43 = extractvalue %Range %41, 1
  %44 = extractvalue %Range %41, 2
  br label %preheader__1

preheader__1:                                     ; preds = %condContinue__1
  %45 = icmp sgt i64 %43, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar0____qsVar0__numPair____ = phi i64 [ %42, %preheader__1 ], [ %61, %exiting__2 ]
  %46 = icmp sle i64 %__qsVar0____qsVar0__numPair____, %44
  %47 = icmp sge i64 %__qsVar0____qsVar0__numPair____, %44
  %48 = select i1 %45, i1 %46, i1 %47
  br i1 %48, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %49 = mul i64 2, %__qsVar0____qsVar0__numPair____
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %49)
  %51 = bitcast i8* %50 to %Qubit**
  %52 = load %Qubit*, %Qubit** %51, align 8
  %53 = mul i64 2, %__qsVar0____qsVar0__numPair____
  %54 = add i64 %53, 1
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %54)
  %56 = bitcast i8* %55 to %Qubit**
  %57 = load %Qubit*, %Qubit** %56, align 8
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %temps, i64 %__qsVar0____qsVar0__numPair____)
  %59 = bitcast i8* %58 to %Qubit**
  %60 = load %Qubit*, %Qubit** %59, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____adj(%Qubit* %52, %Qubit* %57, %Qubit* %60)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %61 = add i64 %__qsVar0____qsVar0__numPair____, %43
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %temps, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__newControls__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__newControls__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__newControls__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %temps)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rx__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Qubit* }*
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Rx__body(double %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rx__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Qubit* }*
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Rx__adj(double %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rx__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Qubit* }*, { double, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Rx__ctl(%Array* %3, { double, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rx__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Qubit* }*, { double, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Rx__ctladj(%Array* %3, { double, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Ry__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Qubit* }*
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Ry__body(double %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Ry__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Qubit* }*
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Ry__adj(double %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Ry__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Qubit* }*, { double, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Ry__ctl(%Array* %3, { double, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Ry__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Qubit* }*, { double, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Ry__ctladj(%Array* %3, { double, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rz__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Qubit* }*
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Rz__body(double %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rz__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Qubit* }*
  %1 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Rz__adj(double %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rz__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Qubit* }*, { double, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Rz__ctl(%Array* %3, { double, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Rz__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Qubit* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Qubit* }*, { double, %Qubit* }** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Rz__ctladj(%Array* %3, { double, %Qubit* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__T__ctl(%Array* %ctls, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledT____body(%Qubit* %qubit)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  %6 = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Intrinsic__R1Frac__body(i64 1, i64 3, %Qubit* %6)
  call void @Microsoft__Quantum__Intrinsic__R1Frac__body(i64 1, i64 3, %Qubit* %qubit)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %9, %Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__R1Frac__adj(i64 1, i64 3, %Qubit* %qubit)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %11 = bitcast i8* %10 to %Qubit**
  %12 = load %Qubit*, %Qubit** %11, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %12, %Qubit* %qubit)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__T__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_controlled(%Callable* %13)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Qubit* }*
  %16 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %15, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 1)
  store %Array* %ctls, %Array** %16, align 8
  store %Qubit* %qubit, %Qubit** %17, align 8
  call void @Microsoft__Quantum__Intrinsic___d032bd2a9ae646cf9b61adf1f6b1e6c1___QsRef36__ApplyWithLessControlsA____body(%Callable* %13, { %Array*, %Qubit* }* %15)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__T__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__T__body(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__T__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__T__adj(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__T__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__T__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__T__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__T__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__T__ctladj(%Array* %ctls, %Qubit* %qubit) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %1 = icmp eq i64 %0, 0
  br i1 %1, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Intrinsic____QsRef36__ApplyUncontrolledTAdj____body(%Qubit* %qubit)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ctls)
  %3 = icmp eq i64 %2, 1
  br i1 %3, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %5 = bitcast i8* %4 to %Qubit**
  %6 = load %Qubit*, %Qubit** %5, align 8
  call void @Microsoft__Quantum__Intrinsic__R1Frac__adj(i64 1, i64 3, %Qubit* %6)
  call void @Microsoft__Quantum__Intrinsic__R1Frac__adj(i64 1, i64 3, %Qubit* %qubit)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %9, %Qubit* %qubit)
  call void @Microsoft__Quantum__Intrinsic__R1Frac__body(i64 1, i64 3, %Qubit* %qubit)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ctls, i64 0)
  %11 = bitcast i8* %10 to %Qubit**
  %12 = load %Qubit*, %Qubit** %11, align 8
  call void @Microsoft__Quantum__Intrinsic__CNOT__body(%Qubit* %12, %Qubit* %qubit)
  br label %continue__1

else__1:                                          ; preds = %test1__1
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__T__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %13)
  call void @__quantum__rt__callable_make_controlled(%Callable* %13)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Array*, %Qubit* }*
  %16 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %15, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 1)
  store %Array* %ctls, %Array** %16, align 8
  store %Qubit* %qubit, %Qubit** %17, align 8
  call void @Microsoft__Quantum__Intrinsic___d032bd2a9ae646cf9b61adf1f6b1e6c1___QsRef36__ApplyWithLessControlsA____body(%Callable* %13, { %Array*, %Qubit* }* %15)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %ctls, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %else__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ctls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__X__body(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__X__adj(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__X__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__X__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__X__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Y__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__Y__body(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Y__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__Y__adj(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Y__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Y__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Y__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Y__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Z__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__Z__body(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Z__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Qubit* }*
  %1 = getelementptr inbounds { %Qubit* }, { %Qubit* }* %0, i32 0, i32 0
  %2 = load %Qubit*, %Qubit** %1, align 8
  call void @Microsoft__Quantum__Intrinsic__Z__adj(%Qubit* %2)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Z__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Z__ctl(%Array* %3, %Qubit* %4)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic__Z__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Qubit* }*
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Qubit*, %Qubit** %2, align 8
  call void @Microsoft__Quantum__Intrinsic__Z__ctladj(%Array* %3, %Qubit* %4)
  ret void
}

declare %Qubit* @__quantum__rt__qubit_allocate()

declare %Array* @__quantum__rt__qubit_allocate_array(i64)

declare void @__quantum__rt__qubit_release_array(%Array*)

define internal void @Microsoft__Quantum__Intrinsic___d032bd2a9ae646cf9b61adf1f6b1e6c1___QsRef36__ApplyWithLessControlsA____adj(%Callable* %op, { %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %1 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 0
  %controls = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 1)
  %2 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %0, i32 0, i32 1
  %arg = load %Qubit*, %Qubit** %2, align 8
  %__qsVar0__numControls__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %controls)
  %__qsVar1__numControlPairs__ = sdiv i64 %__qsVar0__numControls__, 2
  %__qsVar2__temps__ = call %Array* @__quantum__rt__qubit_allocate_array(i64 %__qsVar1__numControlPairs__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__temps__, i32 1)
  %3 = sub i64 %__qsVar1__numControlPairs__, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %__qsVar0____qsVar3__numPair____ = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %4 = icmp sle i64 %__qsVar0____qsVar3__numPair____, %3
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = mul i64 2, %__qsVar0____qsVar3__numPair____
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %5)
  %7 = bitcast i8* %6 to %Qubit**
  %8 = load %Qubit*, %Qubit** %7, align 8
  %9 = mul i64 2, %__qsVar0____qsVar3__numPair____
  %10 = add i64 %9, 1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %10)
  %12 = bitcast i8* %11 to %Qubit**
  %13 = load %Qubit*, %Qubit** %12, align 8
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__temps__, i64 %__qsVar0____qsVar3__numPair____)
  %15 = bitcast i8* %14 to %Qubit**
  %16 = load %Qubit*, %Qubit** %15, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____body(%Qubit* %8, %Qubit* %13, %Qubit* %16)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %__qsVar0____qsVar3__numPair____, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %18 = srem i64 %__qsVar0__numControls__, 2
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__temps__, i32 1)
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__1
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 0)
  %22 = bitcast i8* %21 to %Qubit**
  %23 = sub i64 %__qsVar0__numControls__, 1
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %23)
  %25 = bitcast i8* %24 to %Qubit**
  %26 = load %Qubit*, %Qubit** %25, align 8
  store %Qubit* %26, %Qubit** %22, align 8
  %27 = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar2__temps__, %Array* %20)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %__qsVar1____qsVar4__newControls____ = phi %Array* [ %__qsVar2__temps__, %condTrue__1 ], [ %27, %condFalse__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1____qsVar4__newControls____, i32 1)
  %28 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %28, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %28)
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { %Array*, %Qubit* }*
  %31 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %30, i32 0, i32 0
  %32 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %30, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1____qsVar4__newControls____, i32 1)
  store %Array* %__qsVar1____qsVar4__newControls____, %Array** %31, align 8
  store %Qubit* %arg, %Qubit** %32, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %28, %Tuple* %29, %Tuple* null)
  %33 = sub i64 %__qsVar1__numControlPairs__, 1
  %34 = sub i64 %33, 0
  %35 = sdiv i64 %34, 1
  %36 = mul i64 1, %35
  %37 = add i64 0, %36
  %38 = load %Range, %Range* @EmptyRange, align 4
  %39 = insertvalue %Range %38, i64 %37, 0
  %40 = insertvalue %Range %39, i64 -1, 1
  %41 = insertvalue %Range %40, i64 0, 2
  %42 = extractvalue %Range %41, 0
  %43 = extractvalue %Range %41, 1
  %44 = extractvalue %Range %41, 2
  br label %preheader__1

preheader__1:                                     ; preds = %condContinue__1
  %45 = icmp sgt i64 %43, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar0____qsVar0____qsVar3__numPair______ = phi i64 [ %42, %preheader__1 ], [ %61, %exiting__2 ]
  %46 = icmp sle i64 %__qsVar0____qsVar0____qsVar3__numPair______, %44
  %47 = icmp sge i64 %__qsVar0____qsVar0____qsVar3__numPair______, %44
  %48 = select i1 %45, i1 %46, i1 %47
  br i1 %48, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %49 = mul i64 2, %__qsVar0____qsVar0____qsVar3__numPair______
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %49)
  %51 = bitcast i8* %50 to %Qubit**
  %52 = load %Qubit*, %Qubit** %51, align 8
  %53 = mul i64 2, %__qsVar0____qsVar0____qsVar3__numPair______
  %54 = add i64 %53, 1
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %54)
  %56 = bitcast i8* %55 to %Qubit**
  %57 = load %Qubit*, %Qubit** %56, align 8
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__temps__, i64 %__qsVar0____qsVar0____qsVar3__numPair______)
  %59 = bitcast i8* %58 to %Qubit**
  %60 = load %Qubit*, %Qubit** %59, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____adj(%Qubit* %52, %Qubit* %57, %Qubit* %60)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %61 = add i64 %__qsVar0____qsVar0____qsVar3__numPair______, %43
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__temps__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1____qsVar4__newControls____, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1____qsVar4__newControls____, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %28, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %28, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1____qsVar4__newControls____, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %__qsVar2__temps__)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic___7ab1b1d6752243cd8c3daf513a84c9cb___QsRef36__ApplyWithLessControlsA____adj(%Callable* %op, { %Array*, { double, %Qubit* }* }* %0) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %1 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 0
  %controls = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 1)
  %2 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %0, i32 0, i32 1
  %arg = load { double, %Qubit* }*, { double, %Qubit* }** %2, align 8
  %3 = bitcast { double, %Qubit* }* %arg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %__qsVar0__numControls__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %controls)
  %__qsVar1__numControlPairs__ = sdiv i64 %__qsVar0__numControls__, 2
  %__qsVar2__temps__ = call %Array* @__quantum__rt__qubit_allocate_array(i64 %__qsVar1__numControlPairs__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__temps__, i32 1)
  %4 = sub i64 %__qsVar1__numControlPairs__, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %__qsVar0____qsVar3__numPair____ = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %5 = icmp sle i64 %__qsVar0____qsVar3__numPair____, %4
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = mul i64 2, %__qsVar0____qsVar3__numPair____
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %6)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = mul i64 2, %__qsVar0____qsVar3__numPair____
  %11 = add i64 %10, 1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %11)
  %13 = bitcast i8* %12 to %Qubit**
  %14 = load %Qubit*, %Qubit** %13, align 8
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__temps__, i64 %__qsVar0____qsVar3__numPair____)
  %16 = bitcast i8* %15 to %Qubit**
  %17 = load %Qubit*, %Qubit** %16, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____body(%Qubit* %9, %Qubit* %14, %Qubit* %17)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %__qsVar0____qsVar3__numPair____, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %19 = srem i64 %__qsVar0__numControls__, 2
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__temps__, i32 1)
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__1
  %21 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 0)
  %23 = bitcast i8* %22 to %Qubit**
  %24 = sub i64 %__qsVar0__numControls__, 1
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %24)
  %26 = bitcast i8* %25 to %Qubit**
  %27 = load %Qubit*, %Qubit** %26, align 8
  store %Qubit* %27, %Qubit** %23, align 8
  %28 = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar2__temps__, %Array* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %__qsVar1____qsVar4__newControls____ = phi %Array* [ %__qsVar2__temps__, %condTrue__1 ], [ %28, %condFalse__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1____qsVar4__newControls____, i32 1)
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %29)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Qubit* }* }* getelementptr ({ %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Array*, { double, %Qubit* }* }*
  %32 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { %Array*, { double, %Qubit* }* }, { %Array*, { double, %Qubit* }* }* %31, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1____qsVar4__newControls____, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 1)
  store %Array* %__qsVar1____qsVar4__newControls____, %Array** %32, align 8
  store { double, %Qubit* }* %arg, { double, %Qubit* }** %33, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %30, %Tuple* null)
  %34 = sub i64 %__qsVar1__numControlPairs__, 1
  %35 = sub i64 %34, 0
  %36 = sdiv i64 %35, 1
  %37 = mul i64 1, %36
  %38 = add i64 0, %37
  %39 = load %Range, %Range* @EmptyRange, align 4
  %40 = insertvalue %Range %39, i64 %38, 0
  %41 = insertvalue %Range %40, i64 -1, 1
  %42 = insertvalue %Range %41, i64 0, 2
  %43 = extractvalue %Range %42, 0
  %44 = extractvalue %Range %42, 1
  %45 = extractvalue %Range %42, 2
  br label %preheader__1

preheader__1:                                     ; preds = %condContinue__1
  %46 = icmp sgt i64 %44, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar0____qsVar0____qsVar3__numPair______ = phi i64 [ %43, %preheader__1 ], [ %62, %exiting__2 ]
  %47 = icmp sle i64 %__qsVar0____qsVar0____qsVar3__numPair______, %45
  %48 = icmp sge i64 %__qsVar0____qsVar0____qsVar3__numPair______, %45
  %49 = select i1 %46, i1 %47, i1 %48
  br i1 %49, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %50 = mul i64 2, %__qsVar0____qsVar0____qsVar3__numPair______
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %50)
  %52 = bitcast i8* %51 to %Qubit**
  %53 = load %Qubit*, %Qubit** %52, align 8
  %54 = mul i64 2, %__qsVar0____qsVar0____qsVar3__numPair______
  %55 = add i64 %54, 1
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %55)
  %57 = bitcast i8* %56 to %Qubit**
  %58 = load %Qubit*, %Qubit** %57, align 8
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__temps__, i64 %__qsVar0____qsVar0____qsVar3__numPair______)
  %60 = bitcast i8* %59 to %Qubit**
  %61 = load %Qubit*, %Qubit** %60, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____adj(%Qubit* %53, %Qubit* %58, %Qubit* %61)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %62 = add i64 %__qsVar0____qsVar0____qsVar3__numPair______, %44
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__temps__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1____qsVar4__newControls____, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1____qsVar4__newControls____, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1____qsVar4__newControls____, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %__qsVar2__temps__)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Intrinsic___c58cb28809e843f891697cf044f848da___QsRef36__ApplyWithLessControlsA____adj(%Callable* %op, { %Array*, { %Qubit*, %Qubit* }* }* %0) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %0, i32 0, i32 0
  %controls = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 1)
  %2 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %0, i32 0, i32 1
  %arg = load { %Qubit*, %Qubit* }*, { %Qubit*, %Qubit* }** %2, align 8
  %3 = bitcast { %Qubit*, %Qubit* }* %arg to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %__qsVar0__numControls__ = call i64 @__quantum__rt__array_get_size_1d(%Array* %controls)
  %__qsVar1__numControlPairs__ = sdiv i64 %__qsVar0__numControls__, 2
  %__qsVar2__temps__ = call %Array* @__quantum__rt__qubit_allocate_array(i64 %__qsVar1__numControlPairs__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__temps__, i32 1)
  %4 = sub i64 %__qsVar1__numControlPairs__, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %__qsVar0____qsVar3__numPair____ = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %5 = icmp sle i64 %__qsVar0____qsVar3__numPair____, %4
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = mul i64 2, %__qsVar0____qsVar3__numPair____
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %6)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8, align 8
  %10 = mul i64 2, %__qsVar0____qsVar3__numPair____
  %11 = add i64 %10, 1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %11)
  %13 = bitcast i8* %12 to %Qubit**
  %14 = load %Qubit*, %Qubit** %13, align 8
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__temps__, i64 %__qsVar0____qsVar3__numPair____)
  %16 = bitcast i8* %15 to %Qubit**
  %17 = load %Qubit*, %Qubit** %16, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____body(%Qubit* %9, %Qubit* %14, %Qubit* %17)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %__qsVar0____qsVar3__numPair____, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %19 = srem i64 %__qsVar0__numControls__, 2
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__temps__, i32 1)
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__1
  %21 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 0)
  %23 = bitcast i8* %22 to %Qubit**
  %24 = sub i64 %__qsVar0__numControls__, 1
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %24)
  %26 = bitcast i8* %25 to %Qubit**
  %27 = load %Qubit*, %Qubit** %26, align 8
  store %Qubit* %27, %Qubit** %23, align 8
  %28 = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar2__temps__, %Array* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %__qsVar1____qsVar4__newControls____ = phi %Array* [ %__qsVar2__temps__, %condTrue__1 ], [ %28, %condFalse__1 ]
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1____qsVar4__newControls____, i32 1)
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %op, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %29)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Qubit*, %Qubit* }* }* getelementptr ({ %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Array*, { %Qubit*, %Qubit* }* }*
  %32 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { %Array*, { %Qubit*, %Qubit* }* }, { %Array*, { %Qubit*, %Qubit* }* }* %31, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1____qsVar4__newControls____, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 1)
  store %Array* %__qsVar1____qsVar4__newControls____, %Array** %32, align 8
  store { %Qubit*, %Qubit* }* %arg, { %Qubit*, %Qubit* }** %33, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %30, %Tuple* null)
  %34 = sub i64 %__qsVar1__numControlPairs__, 1
  %35 = sub i64 %34, 0
  %36 = sdiv i64 %35, 1
  %37 = mul i64 1, %36
  %38 = add i64 0, %37
  %39 = load %Range, %Range* @EmptyRange, align 4
  %40 = insertvalue %Range %39, i64 %38, 0
  %41 = insertvalue %Range %40, i64 -1, 1
  %42 = insertvalue %Range %41, i64 0, 2
  %43 = extractvalue %Range %42, 0
  %44 = extractvalue %Range %42, 1
  %45 = extractvalue %Range %42, 2
  br label %preheader__1

preheader__1:                                     ; preds = %condContinue__1
  %46 = icmp sgt i64 %44, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar0____qsVar0____qsVar3__numPair______ = phi i64 [ %43, %preheader__1 ], [ %62, %exiting__2 ]
  %47 = icmp sle i64 %__qsVar0____qsVar0____qsVar3__numPair______, %45
  %48 = icmp sge i64 %__qsVar0____qsVar0____qsVar3__numPair______, %45
  %49 = select i1 %46, i1 %47, i1 %48
  br i1 %49, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %50 = mul i64 2, %__qsVar0____qsVar0____qsVar3__numPair______
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %50)
  %52 = bitcast i8* %51 to %Qubit**
  %53 = load %Qubit*, %Qubit** %52, align 8
  %54 = mul i64 2, %__qsVar0____qsVar0____qsVar3__numPair______
  %55 = add i64 %54, 1
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %controls, i64 %55)
  %57 = bitcast i8* %56 to %Qubit**
  %58 = load %Qubit*, %Qubit** %57, align 8
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__temps__, i64 %__qsVar0____qsVar0____qsVar3__numPair______)
  %60 = bitcast i8* %59 to %Qubit**
  %61 = load %Qubit*, %Qubit** %60, align 8
  call void @Microsoft__Quantum__Intrinsic____QsRef36__PhaseCCX____adj(%Qubit* %53, %Qubit* %58, %Qubit* %61)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %62 = add i64 %__qsVar0____qsVar0____qsVar3__numPair______, %44
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__temps__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1____qsVar4__newControls____, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1____qsVar4__newControls____, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1____qsVar4__newControls____, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %__qsVar2__temps__)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %controls, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Convert__BoolArrayAsPauli__body(i2 %pauli, i1 %bitApply, %Array* %bits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 1)
  %nBits = call i64 @__quantum__rt__array_get_size_1d(%Array* %bits)
  %0 = load i2, i2* @PauliI, align 1
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nBits)
  %2 = sub i64 %nBits, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %6 = bitcast i8* %5 to i2*
  store i2 %0, i2* %6, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %paulis = alloca %Array*, align 8
  store %Array* %1, %Array** %paulis, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %8 = sub i64 %nBits, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idxBit = phi i64 [ 0, %exit__1 ], [ %20, %exiting__2 ]
  %9 = icmp sle i64 %idxBit, %8
  br i1 %9, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %10 = load %Array*, %Array** %paulis, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 -1)
  %11 = call %Array* @__quantum__rt__array_copy(%Array* %10, i1 false)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %bits, i64 %idxBit)
  %13 = bitcast i8* %12 to i1*
  %14 = load i1, i1* %13, align 1
  %15 = icmp eq i1 %14, %bitApply
  %16 = load i2, i2* @PauliI, align 1
  %17 = select i1 %15, i2 %pauli, i2 %16
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %idxBit)
  %19 = bitcast i8* %18 to i2*
  store i2 %17, i2* %19, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  store %Array* %11, %Array** %paulis, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %20 = add i64 %idxBit, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %21 = load %Array*, %Array** %paulis, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %bits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 -1)
  ret %Array* %21
}

define internal %Array* @Microsoft__Quantum__Convert__RangeAsIntArray__body(%Range %range) {
entry:
  %start = extractvalue %Range %range, 0
  %step = extractvalue %Range %range, 1
  %end = extractvalue %Range %range, 2
  %0 = sub i64 %end, %start
  %1 = sitofp i64 %0 to double
  %2 = sitofp i64 %step to double
  %3 = fdiv double %1, %2
  %4 = fcmp oge double %3, 0.000000e+00
  br i1 %4, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %5 = sub i64 %end, %start
  %6 = sdiv i64 %5, %step
  %nTerms = add i64 %6, 1
  %7 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nTerms)
  %8 = sub i64 %nTerms, 1
  br label %header__1

else__1:                                          ; preds = %entry
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  ret %Array* %9

continue__1:                                      ; No predecessors!
  %10 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @15, i32 0, i32 0))
  call void @__quantum__rt__fail(%String* %10)
  unreachable

header__1:                                        ; preds = %exiting__1, %then0__1
  %11 = phi i64 [ 0, %then0__1 ], [ %15, %exiting__1 ]
  %12 = icmp sle i64 %11, %8
  br i1 %12, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 %11)
  %14 = bitcast i8* %13 to i64*
  store i64 0, i64* %14, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %11, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %array = alloca %Array*, align 8
  store %Array* %7, %Array** %array, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %7, i32 1)
  %16 = sub i64 %nTerms, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idx = phi i64 [ 0, %exit__1 ], [ %24, %exiting__2 ]
  %17 = icmp sle i64 %idx, %16
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = load %Array*, %Array** %array, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  %19 = call %Array* @__quantum__rt__array_copy(%Array* %18, i1 false)
  %20 = mul i64 %idx, %step
  %21 = add i64 %start, %20
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %idx)
  %23 = bitcast i8* %22 to i64*
  store i64 %21, i64* %23, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 1)
  store %Array* %19, %Array** %array, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %24 = add i64 %idx, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %25 = load %Array*, %Array** %array, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  ret %Array* %25
}

define internal %Qubit* @Microsoft__Quantum__Core___aaed1fe6c6d94b1da9ad0f4a050d85ba_Default__body() {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %5, %exiting__1 ]
  %2 = icmp sle i64 %1, 0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %1)
  %4 = bitcast i8* %3 to %Qubit**
  store %Qubit* null, %Qubit** %4, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %5 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 0)
  %7 = bitcast i8* %6 to %Qubit**
  %8 = load %Qubit*, %Qubit** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  ret %Qubit* %8
}

define internal { %Array*, double }* @Microsoft__Quantum__Core___4ab62dd0a619401f92e968753201d2d3_Default__body() {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 0)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double }* getelementptr ({ %Array*, double }, { %Array*, double }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { %Array*, double }*
  %3 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %2, i32 0, i32 1
  store %Array* %0, %Array** %3, align 8
  store double 0.000000e+00, double* %4, align 8
  %5 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %6 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %7 = icmp sle i64 %6, 0
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %5, i64 %6)
  %9 = bitcast i8* %8 to { %Array*, double }**
  store { %Array*, double }* %2, { %Array*, double }** %9, align 8
  %10 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %1, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %6, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %5, i64 0)
  %13 = bitcast i8* %12 to { %Array*, double }**
  %14 = load { %Array*, double }*, { %Array*, double }** %13, align 8
  %15 = load %Array*, %Array** %3, align 8
  %16 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %14, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 1)
  %18 = bitcast { %Array*, double }* %14 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %1, i32 -1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %20 = icmp sle i64 %19, 0
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %5, i64 %19)
  %22 = bitcast i8* %21 to { %Array*, double }**
  %23 = load { %Array*, double }*, { %Array*, double }** %22, align 8
  %24 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %23, i32 0, i32 0
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  %26 = bitcast { %Array*, double }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  ret { %Array*, double }* %14
}

define internal { i1, %Qubit* }* @Microsoft__Quantum__Core___0a3b18981fe647c3abac047c9ea87729_Default__body() {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i1, %Qubit* }* getelementptr ({ i1, %Qubit* }, { i1, %Qubit* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i1, %Qubit* }*
  %2 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { i1, %Qubit* }, { i1, %Qubit* }* %1, i32 0, i32 1
  store i1 false, i1* %2, align 1
  store %Qubit* null, %Qubit** %3, align 8
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %6 = icmp sle i64 %5, 0
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %5)
  %8 = bitcast i8* %7 to { i1, %Qubit* }**
  store { i1, %Qubit* }* %1, { i1, %Qubit* }** %8, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 0)
  %11 = bitcast i8* %10 to { i1, %Qubit* }**
  %12 = load { i1, %Qubit* }*, { i1, %Qubit* }** %11, align 8
  %13 = bitcast { i1, %Qubit* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %20, %exiting__2 ]
  %15 = icmp sle i64 %14, 0
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %14)
  %17 = bitcast i8* %16 to { i1, %Qubit* }**
  %18 = load { i1, %Qubit* }*, { i1, %Qubit* }** %17, align 8
  %19 = bitcast { i1, %Qubit* }* %18 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %20 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  ret { i1, %Qubit* }* %12
}

define internal { double, double }* @Microsoft__Quantum__Core___63b788bc63fd4a67ae4942c0fcd8222c_Default__body() {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double, double }*
  %2 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 1
  store double 0.000000e+00, double* %2, align 8
  store double 0.000000e+00, double* %3, align 8
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %6 = icmp sle i64 %5, 0
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %5)
  %8 = bitcast i8* %7 to { double, double }**
  store { double, double }* %1, { double, double }** %8, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 0)
  %11 = bitcast i8* %10 to { double, double }**
  %12 = load { double, double }*, { double, double }** %11, align 8
  %13 = bitcast { double, double }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %20, %exiting__2 ]
  %15 = icmp sle i64 %14, 0
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %14)
  %17 = bitcast i8* %16 to { double, double }**
  %18 = load { double, double }*, { double, double }** %17, align 8
  %19 = bitcast { double, double }* %18 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %20 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  ret { double, double }* %12
}

define internal %Callable* @Microsoft__Quantum__Core___08eb424feaa44510bcea606a85a96b05_Default__body() {
entry:
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @DefaultCallable__NullFunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, 0
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  store %Callable* %0, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 0)
  %8 = bitcast i8* %7 to %Callable**
  %9 = load %Callable*, %Callable** %8, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %11 = icmp sle i64 %10, 0
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %10)
  %13 = bitcast i8* %12 to %Callable**
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  ret %Callable* %9
}

define internal { { double, double }*, %Array* }* @Microsoft__Quantum__Core___56dc0bbae7cb4c059b9a7907f38e5111_Default__body() {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double, double }*
  %2 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 1
  store double 0.000000e+00, double* %2, align 8
  store double 0.000000e+00, double* %3, align 8
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }*, %Array* }* getelementptr ({ { double, double }*, %Array* }, { { double, double }*, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { { double, double }*, %Array* }*
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  store { double, double }* %1, { double, double }** %7, align 8
  store %Array* %4, %Array** %8, align 8
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %10 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %11 = icmp sle i64 %10, 0
  br i1 %11, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %10)
  %13 = bitcast i8* %12 to { { double, double }*, %Array* }**
  store { { double, double }*, %Array* }* %6, { { double, double }*, %Array* }** %13, align 8
  %14 = load { double, double }*, { double, double }** %7, align 8
  %15 = load %Array*, %Array** %8, align 8
  %16 = bitcast { double, double }* %14 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %10, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 0)
  %19 = bitcast i8* %18 to { { double, double }*, %Array* }**
  %20 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %19, align 8
  %21 = load { double, double }*, { double, double }** %7, align 8
  %22 = load %Array*, %Array** %8, align 8
  %23 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %20, i32 0, i32 0
  %24 = load { double, double }*, { double, double }** %23, align 8
  %25 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %20, i32 0, i32 1
  %26 = load %Array*, %Array** %25, align 8
  %27 = bitcast { double, double }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 1)
  %28 = bitcast { { double, double }*, %Array* }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 1)
  %29 = bitcast { double, double }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %30 = phi i64 [ 0, %exit__1 ], [ %41, %exiting__2 ]
  %31 = icmp sle i64 %30, 0
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %30)
  %33 = bitcast i8* %32 to { { double, double }*, %Array* }**
  %34 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %33, align 8
  %35 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %34, i32 0, i32 0
  %36 = load { double, double }*, { double, double }** %35, align 8
  %37 = bitcast { double, double }* %36 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  %38 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %34, i32 0, i32 1
  %39 = load %Array*, %Array** %38, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i32 -1)
  %40 = bitcast { { double, double }*, %Array* }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %41 = add i64 %30, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  ret { { double, double }*, %Array* }* %20
}

define internal { { double, double }*, %Array* }* @Microsoft__Quantum__Core___0aab4b2798864318b174f90c143f7b76_Default__body() {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double, double }*
  %2 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 1
  store double 0.000000e+00, double* %2, align 8
  store double 0.000000e+00, double* %3, align 8
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }*, %Array* }* getelementptr ({ { double, double }*, %Array* }, { { double, double }*, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { { double, double }*, %Array* }*
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  store { double, double }* %1, { double, double }** %7, align 8
  store %Array* %4, %Array** %8, align 8
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %10 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %11 = icmp sle i64 %10, 0
  br i1 %11, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %10)
  %13 = bitcast i8* %12 to { { double, double }*, %Array* }**
  store { { double, double }*, %Array* }* %6, { { double, double }*, %Array* }** %13, align 8
  %14 = load { double, double }*, { double, double }** %7, align 8
  %15 = load %Array*, %Array** %8, align 8
  %16 = bitcast { double, double }* %14 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %10, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 0)
  %19 = bitcast i8* %18 to { { double, double }*, %Array* }**
  %20 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %19, align 8
  %21 = load { double, double }*, { double, double }** %7, align 8
  %22 = load %Array*, %Array** %8, align 8
  %23 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %20, i32 0, i32 0
  %24 = load { double, double }*, { double, double }** %23, align 8
  %25 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %20, i32 0, i32 1
  %26 = load %Array*, %Array** %25, align 8
  %27 = bitcast { double, double }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 1)
  %28 = bitcast { { double, double }*, %Array* }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 1)
  %29 = bitcast { double, double }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %30 = phi i64 [ 0, %exit__1 ], [ %41, %exiting__2 ]
  %31 = icmp sle i64 %30, 0
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %30)
  %33 = bitcast i8* %32 to { { double, double }*, %Array* }**
  %34 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %33, align 8
  %35 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %34, i32 0, i32 0
  %36 = load { double, double }*, { double, double }** %35, align 8
  %37 = bitcast { double, double }* %36 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  %38 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %34, i32 0, i32 1
  %39 = load %Array*, %Array** %38, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %39, i32 -1)
  %40 = bitcast { { double, double }*, %Array* }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %41 = add i64 %30, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  ret { { double, double }*, %Array* }* %20
}

define internal { double, double }* @Microsoft__Quantum__Core___732f127c65c44052905853676c85a345_Default__body() {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { double, double }*
  %2 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { double, double }, { double, double }* %1, i32 0, i32 1
  store double 0.000000e+00, double* %2, align 8
  store double 0.000000e+00, double* %3, align 8
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %6 = icmp sle i64 %5, 0
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %5)
  %8 = bitcast i8* %7 to { double, double }**
  store { double, double }* %1, { double, double }** %8, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 0)
  %11 = bitcast i8* %10 to { double, double }**
  %12 = load { double, double }*, { double, double }** %11, align 8
  %13 = bitcast { double, double }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %20, %exiting__2 ]
  %15 = icmp sle i64 %14, 0
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %14)
  %17 = bitcast i8* %16 to { double, double }**
  %18 = load { double, double }*, { double, double }** %17, align 8
  %19 = bitcast { double, double }* %18 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %20 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  ret { double, double }* %12
}

define internal %Array* @Microsoft__Quantum__Core___97faaa7c6c8f4c7eb3a3881200de5f84_Default__body() {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, 0
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  store %Array* %0, %Array** %5, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 0)
  %8 = bitcast i8* %7 to %Array**
  %9 = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %11 = icmp sle i64 %10, 0
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %10)
  %13 = bitcast i8* %12 to %Array**
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  ret %Array* %9
}

define internal double @Microsoft__Quantum__Core___80e19adf693f4ed596c0fcb14c3258e0_Default__body() {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %5, %exiting__1 ]
  %2 = icmp sle i64 %1, 0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %1)
  %4 = bitcast i8* %3 to double*
  store double 0.000000e+00, double* %4, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %5 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 0)
  %7 = bitcast i8* %6 to double*
  %8 = load double, double* %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  ret double %8
}

define internal %Array* @Microsoft__Quantum__Core___a750c03184594ed79a93193e7849ccc6_Default__body() {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, 0
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  store %Array* %0, %Array** %5, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 0)
  %8 = bitcast i8* %7 to %Array**
  %9 = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %11 = icmp sle i64 %10, 0
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %10)
  %13 = bitcast i8* %12 to %Array**
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  ret %Array* %9
}

define internal i64 @Microsoft__Quantum__Core___cd741cf4aefe4d82bb015841f31c1343_Default__body() {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %5, %exiting__1 ]
  %2 = icmp sle i64 %1, 0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %1)
  %4 = bitcast i8* %3 to i64*
  store i64 0, i64* %4, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %5 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 0)
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  ret i64 %8
}

define internal { %Array*, %Array* }* @Microsoft__Quantum__Core___f6ffe6fa1eec4c679c647abb3d09ac4b_Default__body() {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %3 = bitcast %Tuple* %2 to { %Array*, %Array* }*
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  store %Array* %0, %Array** %4, align 8
  store %Array* %1, %Array** %5, align 8
  %6 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %8 = icmp sle i64 %7, 0
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %7)
  %10 = bitcast i8* %9 to { %Array*, %Array* }**
  store { %Array*, %Array* }* %3, { %Array*, %Array* }** %10, align 8
  %11 = load %Array*, %Array** %4, align 8
  %12 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 0)
  %15 = bitcast i8* %14 to { %Array*, %Array* }**
  %16 = load { %Array*, %Array* }*, { %Array*, %Array* }** %15, align 8
  %17 = load %Array*, %Array** %4, align 8
  %18 = load %Array*, %Array** %5, align 8
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 0
  %20 = load %Array*, %Array** %19, align 8
  %21 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 1
  %22 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 1)
  %23 = bitcast { %Array*, %Array* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %24 = phi i64 [ 0, %exit__1 ], [ %34, %exiting__2 ]
  %25 = icmp sle i64 %24, 0
  br i1 %25, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %24)
  %27 = bitcast i8* %26 to { %Array*, %Array* }**
  %28 = load { %Array*, %Array* }*, { %Array*, %Array* }** %27, align 8
  %29 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %28, i32 0, i32 0
  %30 = load %Array*, %Array** %29, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 -1)
  %31 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %28, i32 0, i32 1
  %32 = load %Array*, %Array** %31, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  %33 = bitcast { %Array*, %Array* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %34 = add i64 %24, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  ret { %Array*, %Array* }* %16
}

define internal { %Array*, %Array* }* @Microsoft__Quantum__Core___65a5babc3087484ca24a1bcfe76d3643_Default__body() {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %2 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %3 = bitcast %Tuple* %2 to { %Array*, %Array* }*
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  store %Array* %0, %Array** %4, align 8
  store %Array* %1, %Array** %5, align 8
  %6 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %8 = icmp sle i64 %7, 0
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %7)
  %10 = bitcast i8* %9 to { %Array*, %Array* }**
  store { %Array*, %Array* }* %3, { %Array*, %Array* }** %10, align 8
  %11 = load %Array*, %Array** %4, align 8
  %12 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 0)
  %15 = bitcast i8* %14 to { %Array*, %Array* }**
  %16 = load { %Array*, %Array* }*, { %Array*, %Array* }** %15, align 8
  %17 = load %Array*, %Array** %4, align 8
  %18 = load %Array*, %Array** %5, align 8
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 0
  %20 = load %Array*, %Array** %19, align 8
  %21 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 1
  %22 = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %22, i32 1)
  %23 = bitcast { %Array*, %Array* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 -1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %24 = phi i64 [ 0, %exit__1 ], [ %34, %exiting__2 ]
  %25 = icmp sle i64 %24, 0
  br i1 %25, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %6, i64 %24)
  %27 = bitcast i8* %26 to { %Array*, %Array* }**
  %28 = load { %Array*, %Array* }*, { %Array*, %Array* }** %27, align 8
  %29 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %28, i32 0, i32 0
  %30 = load %Array*, %Array** %29, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 -1)
  %31 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %28, i32 0, i32 1
  %32 = load %Array*, %Array** %31, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  %33 = bitcast { %Array*, %Array* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %34 = add i64 %24, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 -1)
  ret { %Array*, %Array* }* %16
}

define internal %Array* @Microsoft__Quantum__Arrays__SequenceI__body(i64 %from, i64 %to) {
entry:
  %0 = icmp sge i64 %to, %from
  %1 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @37, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %0, %String* %1)
  %2 = sub i64 %to, %from
  %n = add i64 %2, 1
  %3 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %n)
  %4 = sub i64 %n, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %3, i64 %5)
  %8 = bitcast i8* %7 to i64*
  store i64 0, i64* %8, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %array = alloca %Array*, align 8
  store %Array* %3, %Array** %array, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %10 = sub i64 %n, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %i = phi i64 [ 0, %exit__1 ], [ %17, %exiting__2 ]
  %11 = icmp sle i64 %i, %10
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = load %Array*, %Array** %array, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 -1)
  %13 = call %Array* @__quantum__rt__array_copy(%Array* %12, i1 false)
  %14 = add i64 %from, %i
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %i)
  %16 = bitcast i8* %15 to i64*
  store i64 %14, i64* %16, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  store %Array* %13, %Array** %array, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %17 = add i64 %i, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %18 = load %Array*, %Array** %array, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %1, i32 -1)
  ret %Array* %18
}

define internal %Array* @Microsoft__Quantum__Arrays___0326935c2ca54c919d380dbd1cd701f2_Excluding__body(%Array* %remove, %Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %remove, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %nSliced = call i64 @__quantum__rt__array_get_size_1d(%Array* %remove)
  %nElements = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %1 = sub i64 %nElements, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to i64*
  store i64 0, i64* %5, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %arrayKeep = alloca %Array*, align 8
  store %Array* %0, %Array** %arrayKeep, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 1)
  %7 = call %Qubit* @Microsoft__Quantum__Core___aaed1fe6c6d94b1da9ad0f4a050d85ba_Default__body()
  %8 = sub i64 %nElements, %nSliced
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %8)
  %10 = sub i64 %8, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %11 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %11)
  %14 = bitcast i8* %13 to %Qubit**
  store %Qubit* %7, %Qubit** %14, align 8
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %11, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %sliced = alloca %Array*, align 8
  store %Array* %9, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  %counter = alloca i64, align 8
  store i64 0, i64* %counter, align 4
  %16 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %idx = phi i64 [ 0, %exit__2 ], [ %22, %exiting__3 ]
  %17 = icmp sle i64 %idx, %16
  br i1 %17, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %18 = load %Array*, %Array** %arrayKeep, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  %19 = call %Array* @__quantum__rt__array_copy(%Array* %18, i1 false)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 %idx)
  %21 = bitcast i8* %20 to i64*
  store i64 %idx, i64* %21, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 1)
  store %Array* %19, %Array** %arrayKeep, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %22 = add i64 %idx, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %23 = sub i64 %nSliced, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %idx__1 = phi i64 [ 0, %exit__3 ], [ %32, %exiting__4 ]
  %24 = icmp sle i64 %idx__1, %23
  br i1 %24, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %25 = load %Array*, %Array** %arrayKeep, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  %26 = call %Array* @__quantum__rt__array_copy(%Array* %25, i1 false)
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %remove, i64 %idx__1)
  %28 = bitcast i8* %27 to i64*
  %29 = load i64, i64* %28, align 4
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %26, i64 %29)
  %31 = bitcast i8* %30 to i64*
  store i64 -1, i64* %31, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 1)
  store %Array* %26, %Array** %arrayKeep, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %32 = add i64 %idx__1, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %33 = sub i64 %nElements, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %idx__2 = phi i64 [ 0, %exit__4 ], [ %52, %exiting__5 ]
  %34 = icmp sle i64 %idx__2, %33
  br i1 %34, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %35 = load %Array*, %Array** %arrayKeep, align 8
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 %idx__2)
  %37 = bitcast i8* %36 to i64*
  %38 = load i64, i64* %37, align 4
  %39 = icmp sge i64 %38, 0
  br i1 %39, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__5
  %40 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i32 -1)
  %41 = call %Array* @__quantum__rt__array_copy(%Array* %40, i1 false)
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %35, i64 %idx__2)
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 4
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %44)
  %46 = bitcast i8* %45 to %Qubit**
  %47 = load %Qubit*, %Qubit** %46, align 8
  %48 = load i64, i64* %counter, align 4
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %48)
  %50 = bitcast i8* %49 to %Qubit**
  store %Qubit* %47, %Qubit** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 1)
  store %Array* %41, %Array** %sliced, align 8
  %51 = add i64 %48, 1
  store i64 %51, i64* %counter, align 4
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__5
  br label %exiting__5

exiting__5:                                       ; preds = %continue__1
  %52 = add i64 %idx__2, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %53 = load %Array*, %Array** %sliced, align 8
  %54 = load %Array*, %Array** %arrayKeep, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %remove, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %54, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i32 -1)
  ret %Array* %53
}

define internal %Range @Microsoft__Quantum__Arrays___d97671faf3a340c9a8ceb3810bc7cfac_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { %Array*, %Array* }**
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %13 = sub i64 %0, 1
  %14 = load %Range, %Range* @EmptyRange, align 4
  %15 = insertvalue %Range %14, i64 0, 0
  %16 = insertvalue %Range %15, i64 1, 1
  %17 = insertvalue %Range %16, i64 %13, 2
  %18 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %29, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %19)
  %22 = bitcast i8* %21 to { %Array*, %Array* }**
  %23 = load { %Array*, %Array* }*, { %Array*, %Array* }** %22, align 8
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 0
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 1
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  %28 = bitcast { %Array*, %Array* }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %29 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %17
}

define internal %Range @Microsoft__Quantum__Arrays___a39719eaf9314332afb345cf0f7465a7_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %14 = sub i64 %0, 1
  %15 = load %Range, %Range* @EmptyRange, align 4
  %16 = insertvalue %Range %15, i64 0, 0
  %17 = insertvalue %Range %16, i64 1, 1
  %18 = insertvalue %Range %17, i64 %14, 2
  %19 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %31, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %20)
  %23 = bitcast i8* %22 to { { double, double }*, %Array* }**
  %24 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %23, align 8
  %25 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %24, i32 0, i32 0
  %26 = load { double, double }*, { double, double }** %25, align 8
  %27 = bitcast { double, double }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i32 -1)
  %28 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %24, i32 0, i32 1
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 -1)
  %30 = bitcast { { double, double }*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %30, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %31 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %18
}

define internal %Array* @Microsoft__Quantum__Arrays___6c811943f2a44a079ede392478715169_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = call %Callable* @Microsoft__Quantum__Core___08eb424feaa44510bcea606a85a96b05_Default__body()
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %0)
  %10 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %11 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %11)
  %14 = bitcast i8* %13 to %Callable**
  store %Callable* %8, %Callable** %14, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %11, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %resultArray = alloca %Array*, align 8
  store %Array* %9, %Array** %resultArray, align 8
  %16 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %17 = phi i64 [ 0, %exit__2 ], [ %22, %exiting__3 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 %17)
  %20 = bitcast i8* %19 to %Callable**
  %21 = load %Callable*, %Callable** %20, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %21, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %22 = add i64 %17, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  %23 = call %Range @Microsoft__Quantum__Arrays___21aea7a09ff54a6d825e960474ce670e_IndexRange__body(%Array* %array)
  %24 = extractvalue %Range %23, 0
  %25 = extractvalue %Range %23, 1
  %26 = extractvalue %Range %23, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__3
  %27 = icmp sgt i64 %25, 0
  br label %header__4

header__4:                                        ; preds = %exiting__4, %preheader__1
  %idxElement = phi i64 [ %24, %preheader__1 ], [ %46, %exiting__4 ]
  %28 = icmp sle i64 %idxElement, %26
  %29 = icmp sge i64 %idxElement, %26
  %30 = select i1 %27, i1 %28, i1 %29
  br i1 %30, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %31 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 -1)
  %32 = call %Array* @__quantum__rt__array_copy(%Array* %31, i1 false)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %34 = bitcast i8* %33 to %Array**
  %35 = load %Array*, %Array** %34, align 8
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { %Array* }*
  %38 = getelementptr inbounds { %Array* }, { %Array* }* %37, i32 0, i32 0
  store %Array* %35, %Array** %38, align 8
  %39 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %36, %Tuple* %39)
  %40 = bitcast %Tuple* %39 to { %Callable* }*
  %41 = getelementptr inbounds { %Callable* }, { %Callable* }* %40, i32 0, i32 0
  %42 = load %Callable*, %Callable** %41, align 8
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 %idxElement)
  %44 = bitcast i8* %43 to %Callable**
  call void @__quantum__rt__capture_update_alias_count(%Callable* %42, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %42, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %42, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %42, i32 1)
  %45 = load %Callable*, %Callable** %44, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %45, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %45, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %45, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %45, i32 -1)
  store %Callable* %42, %Callable** %44, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 1)
  store %Array* %32, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %42, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %42, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %39, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %46 = add i64 %idxElement, %25
  br label %header__4

exit__4:                                          ; preds = %header__4
  %47 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  %48 = sub i64 %0, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %49 = phi i64 [ 0, %exit__4 ], [ %54, %exiting__5 ]
  %50 = icmp sle i64 %49, %48
  br i1 %50, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %49)
  %52 = bitcast i8* %51 to %Array**
  %53 = load %Array*, %Array** %52, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %54 = add i64 %49, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %55 = call i64 @__quantum__rt__array_get_size_1d(%Array* %47)
  %56 = sub i64 %55, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %57 = phi i64 [ 0, %exit__5 ], [ %62, %exiting__6 ]
  %58 = icmp sle i64 %57, %56
  br i1 %58, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %47, i64 %57)
  %60 = bitcast i8* %59 to %Callable**
  %61 = load %Callable*, %Callable** %60, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %61, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %61, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %62 = add i64 %57, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  ret %Array* %47
}

define internal %Range @Microsoft__Quantum__Arrays___21aea7a09ff54a6d825e960474ce670e_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = sub i64 %0, 1
  %9 = load %Range, %Range* @EmptyRange, align 4
  %10 = insertvalue %Range %9, i64 0, 0
  %11 = insertvalue %Range %10, i64 1, 1
  %12 = insertvalue %Range %11, i64 %8, 2
  %13 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %17 = bitcast i8* %16 to %Array**
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %12
}

define internal %Array* @Microsoft__Quantum__Arrays___877cada1f4394738a1d50841ca74b746_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call { double, double }* @Microsoft__Quantum__Core___63b788bc63fd4a67ae4942c0fcd8222c_Default__body()
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %2 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %1)
  %3 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %4)
  %7 = bitcast i8* %6 to { double, double }**
  store { double, double }* %0, { double, double }** %7, align 8
  %8 = bitcast { double, double }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %resultArray = alloca %Array*, align 8
  store %Array* %2, %Array** %resultArray, align 8
  %10 = sub i64 %1, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %11 = phi i64 [ 0, %exit__1 ], [ %17, %exiting__2 ]
  %12 = icmp sle i64 %11, %10
  br i1 %12, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %11)
  %14 = bitcast i8* %13 to { double, double }**
  %15 = load { double, double }*, { double, double }** %14, align 8
  %16 = bitcast { double, double }* %15 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %17 = add i64 %11, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %18 = call %Range @Microsoft__Quantum__Arrays___33b1ea493b26474e8d70a3826af06c42_IndexRange__body(%Array* %array)
  %19 = extractvalue %Range %18, 0
  %20 = extractvalue %Range %18, 1
  %21 = extractvalue %Range %18, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__2
  %22 = icmp sgt i64 %20, 0
  br label %header__3

header__3:                                        ; preds = %exiting__3, %preheader__1
  %idxElement = phi i64 [ %19, %preheader__1 ], [ %43, %exiting__3 ]
  %23 = icmp sle i64 %idxElement, %21
  %24 = icmp sge i64 %idxElement, %21
  %25 = select i1 %22, i1 %23, i1 %24
  br i1 %25, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %26 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 -1)
  %27 = call %Array* @__quantum__rt__array_copy(%Array* %26, i1 false)
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %29 = bitcast i8* %28 to double*
  %30 = load double, double* %29, align 8
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { double }*
  %33 = getelementptr inbounds { double }, { double }* %32, i32 0, i32 0
  store double %30, double* %33, align 8
  %34 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }* }* getelementptr ({ { double, double }* }, { { double, double }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %31, %Tuple* %34)
  %35 = bitcast %Tuple* %34 to { { double, double }* }*
  %36 = getelementptr inbounds { { double, double }* }, { { double, double }* }* %35, i32 0, i32 0
  %37 = load { double, double }*, { double, double }** %36, align 8
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %idxElement)
  %39 = bitcast i8* %38 to { double, double }**
  %40 = bitcast { double, double }* %37 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 1)
  %41 = load { double, double }*, { double, double }** %39, align 8
  %42 = bitcast { double, double }* %41 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  store { double, double }* %37, { double, double }** %39, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  store %Array* %27, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %40, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %43 = add i64 %idxElement, %20
  br label %header__3

exit__3:                                          ; preds = %header__3
  %44 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %45 = call i64 @__quantum__rt__array_get_size_1d(%Array* %44)
  %46 = sub i64 %45, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %47 = phi i64 [ 0, %exit__3 ], [ %53, %exiting__4 ]
  %48 = icmp sle i64 %47, %46
  br i1 %48, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 %47)
  %50 = bitcast i8* %49 to { double, double }**
  %51 = load { double, double }*, { double, double }** %50, align 8
  %52 = bitcast { double, double }* %51 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %52, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %53 = add i64 %47, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 -1)
  %54 = bitcast { double, double }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %54, i32 -1)
  ret %Array* %44
}

define internal %Range @Microsoft__Quantum__Arrays___33b1ea493b26474e8d70a3826af06c42_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = load %Range, %Range* @EmptyRange, align 4
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %5
}

define internal %Array* @Microsoft__Quantum__Arrays___8351c56a87cb466aa6173570c7555f0f_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call %Array* @Microsoft__Quantum__Core___a750c03184594ed79a93193e7849ccc6_Default__body()
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %2 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %1)
  %3 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %4)
  %7 = bitcast i8* %6 to %Array**
  store %Array* %0, %Array** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %resultArray = alloca %Array*, align 8
  store %Array* %2, %Array** %resultArray, align 8
  %9 = sub i64 %1, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %10)
  %13 = bitcast i8* %12 to %Array**
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %16 = call %Range @Microsoft__Quantum__Arrays___640ad8af9f2c4eb5858e60c13aac7d35_IndexRange__body(%Array* %array)
  %17 = extractvalue %Range %16, 0
  %18 = extractvalue %Range %16, 1
  %19 = extractvalue %Range %16, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__2
  %20 = icmp sgt i64 %18, 0
  br label %header__3

header__3:                                        ; preds = %exiting__3, %preheader__1
  %idxElement = phi i64 [ %17, %preheader__1 ], [ %39, %exiting__3 ]
  %21 = icmp sle i64 %idxElement, %19
  %22 = icmp sge i64 %idxElement, %19
  %23 = select i1 %20, i1 %21, i1 %22
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %24, i32 -1)
  %25 = call %Array* @__quantum__rt__array_copy(%Array* %24, i1 false)
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 4
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i64 }*
  %31 = getelementptr inbounds { i64 }, { i64 }* %30, i32 0, i32 0
  store i64 %28, i64* %31, align 4
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %29, %Tuple* %32)
  %33 = bitcast %Tuple* %32 to { %Array* }*
  %34 = getelementptr inbounds { %Array* }, { %Array* }* %33, i32 0, i32 0
  %35 = load %Array*, %Array** %34, align 8
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 %idxElement)
  %37 = bitcast i8* %36 to %Array**
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %35, i32 1)
  %38 = load %Array*, %Array** %37, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %38, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 -1)
  store %Array* %35, %Array** %37, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  store %Array* %25, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %39 = add i64 %idxElement, %18
  br label %header__3

exit__3:                                          ; preds = %header__3
  %40 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %41 = call i64 @__quantum__rt__array_get_size_1d(%Array* %40)
  %42 = sub i64 %41, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %43 = phi i64 [ 0, %exit__3 ], [ %48, %exiting__4 ]
  %44 = icmp sle i64 %43, %42
  br i1 %44, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 %43)
  %46 = bitcast i8* %45 to %Array**
  %47 = load %Array*, %Array** %46, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %48 = add i64 %43, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  ret %Array* %40
}

define internal %Range @Microsoft__Quantum__Arrays___640ad8af9f2c4eb5858e60c13aac7d35_IndexRange__body(%Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  %2 = load %Range, %Range* @EmptyRange, align 4
  %3 = insertvalue %Range %2, i64 0, 0
  %4 = insertvalue %Range %3, i64 1, 1
  %5 = insertvalue %Range %4, i64 %1, 2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %5
}

define internal %Array* @Microsoft__Quantum__Arrays___f68b936fa6734792837828cfe0cedc1a_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call double @Microsoft__Quantum__Core___80e19adf693f4ed596c0fcb14c3258e0_Default__body()
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %2 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %1)
  %3 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %4)
  %7 = bitcast i8* %6 to double*
  store double %0, double* %7, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %resultArray = alloca %Array*, align 8
  store %Array* %2, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %9 = call %Range @Microsoft__Quantum__Arrays___640ad8af9f2c4eb5858e60c13aac7d35_IndexRange__body(%Array* %array)
  %10 = extractvalue %Range %9, 0
  %11 = extractvalue %Range %9, 1
  %12 = extractvalue %Range %9, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %13 = icmp sgt i64 %11, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxElement = phi i64 [ %10, %preheader__1 ], [ %31, %exiting__2 ]
  %14 = icmp sle i64 %idxElement, %12
  %15 = icmp sge i64 %idxElement, %12
  %16 = select i1 %13, i1 %14, i1 %15
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %18 = call %Array* @__quantum__rt__array_copy(%Array* %17, i1 false)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 4
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { i64 }*
  %24 = getelementptr inbounds { i64 }, { i64 }* %23, i32 0, i32 0
  store i64 %21, i64* %24, align 4
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %22, %Tuple* %25)
  %26 = bitcast %Tuple* %25 to { double }*
  %27 = getelementptr inbounds { double }, { double }* %26, i32 0, i32 0
  %28 = load double, double* %27, align 8
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %idxElement)
  %30 = bitcast i8* %29 to double*
  store double %28, double* %30, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  store %Array* %18, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %31 = add i64 %idxElement, %11
  br label %header__2

exit__2:                                          ; preds = %header__2
  %32 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  ret %Array* %32
}

define internal %Array* @Microsoft__Quantum__Arrays___940558cbed1c4edd9f6f2f3091fed9bb_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call %Array* @Microsoft__Quantum__Core___97faaa7c6c8f4c7eb3a3881200de5f84_Default__body()
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %2 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %1)
  %3 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %4)
  %7 = bitcast i8* %6 to %Array**
  store %Array* %0, %Array** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %resultArray = alloca %Array*, align 8
  store %Array* %2, %Array** %resultArray, align 8
  %9 = sub i64 %1, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %10 = phi i64 [ 0, %exit__1 ], [ %15, %exiting__2 ]
  %11 = icmp sle i64 %10, %9
  br i1 %11, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %10)
  %13 = bitcast i8* %12 to %Array**
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %15 = add i64 %10, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %16 = call %Range @Microsoft__Quantum__Arrays___640ad8af9f2c4eb5858e60c13aac7d35_IndexRange__body(%Array* %array)
  %17 = extractvalue %Range %16, 0
  %18 = extractvalue %Range %16, 1
  %19 = extractvalue %Range %16, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__2
  %20 = icmp sgt i64 %18, 0
  br label %header__3

header__3:                                        ; preds = %exiting__3, %preheader__1
  %idxElement = phi i64 [ %17, %preheader__1 ], [ %39, %exiting__3 ]
  %21 = icmp sle i64 %idxElement, %19
  %22 = icmp sge i64 %idxElement, %19
  %23 = select i1 %20, i1 %21, i1 %22
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %24, i32 -1)
  %25 = call %Array* @__quantum__rt__array_copy(%Array* %24, i1 false)
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 4
  %29 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %30 = bitcast %Tuple* %29 to { i64 }*
  %31 = getelementptr inbounds { i64 }, { i64 }* %30, i32 0, i32 0
  store i64 %28, i64* %31, align 4
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %29, %Tuple* %32)
  %33 = bitcast %Tuple* %32 to { %Array* }*
  %34 = getelementptr inbounds { %Array* }, { %Array* }* %33, i32 0, i32 0
  %35 = load %Array*, %Array** %34, align 8
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 %idxElement)
  %37 = bitcast i8* %36 to %Array**
  call void @__quantum__rt__array_update_alias_count(%Array* %35, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %35, i32 1)
  %38 = load %Array*, %Array** %37, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %38, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %38, i32 -1)
  store %Array* %35, %Array** %37, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  store %Array* %25, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %39 = add i64 %idxElement, %18
  br label %header__3

exit__3:                                          ; preds = %header__3
  %40 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %41 = call i64 @__quantum__rt__array_get_size_1d(%Array* %40)
  %42 = sub i64 %41, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %43 = phi i64 [ 0, %exit__3 ], [ %48, %exiting__4 ]
  %44 = icmp sle i64 %43, %42
  br i1 %44, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 %43)
  %46 = bitcast i8* %45 to %Array**
  %47 = load %Array*, %Array** %46, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %48 = add i64 %43, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  ret %Array* %40
}

define internal %Array* @Microsoft__Quantum__Arrays___acbdd3c13fea476596d98468e7da26fe_Mapped__body(%Callable* %mapper, %Array* %array) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = call i64 @Microsoft__Quantum__Core___cd741cf4aefe4d82bb015841f31c1343_Default__body()
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %2 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %1)
  %3 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %2, i64 %4)
  %7 = bitcast i8* %6 to i64*
  store i64 %0, i64* %7, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %resultArray = alloca %Array*, align 8
  store %Array* %2, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %2, i32 1)
  %9 = call %Range @Microsoft__Quantum__Arrays___640ad8af9f2c4eb5858e60c13aac7d35_IndexRange__body(%Array* %array)
  %10 = extractvalue %Range %9, 0
  %11 = extractvalue %Range %9, 1
  %12 = extractvalue %Range %9, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %13 = icmp sgt i64 %11, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxElement = phi i64 [ %10, %preheader__1 ], [ %31, %exiting__2 ]
  %14 = icmp sle i64 %idxElement, %12
  %15 = icmp sge i64 %idxElement, %12
  %16 = select i1 %13, i1 %14, i1 %15
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %17, i32 -1)
  %18 = call %Array* @__quantum__rt__array_copy(%Array* %17, i1 false)
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 4
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { i64 }*
  %24 = getelementptr inbounds { i64 }, { i64 }* %23, i32 0, i32 0
  store i64 %21, i64* %24, align 4
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %mapper, %Tuple* %22, %Tuple* %25)
  %26 = bitcast %Tuple* %25 to { i64 }*
  %27 = getelementptr inbounds { i64 }, { i64 }* %26, i32 0, i32 0
  %28 = load i64, i64* %27, align 4
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %idxElement)
  %30 = bitcast i8* %29 to i64*
  store i64 %28, i64* %30, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  store %Array* %18, %Array** %resultArray, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %31 = add i64 %idxElement, %11
  br label %header__2

exit__2:                                          ; preds = %header__2
  %32 = load %Array*, %Array** %resultArray, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %mapper, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %32, i32 -1)
  ret %Array* %32
}

define internal void @Microsoft__Quantum__Arrays___a6a86c9b424445d0ad84bc5b79eee666_RectangularArrayFact__body(%Array* %array, %String* %message) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %then0__1, label %else__1

then0__1:                                         ; preds = %exit__1
  %9 = sub i64 %0, 1
  br label %header__2

else__1:                                          ; preds = %exit__1
  %10 = call %Array* @Microsoft__Quantum__Arrays___e3ad95d105f04e26bbbde536b99ee0d9_Head__body(%Array* %array)
  %numColumns = call i64 @__quantum__rt__array_get_size_1d(%Array* %10)
  %11 = call %Array* @Microsoft__Quantum__Arrays___03f4b37cc2764e4897c490452750cc66_Rest__body(%Array* %array)
  %12 = call %Range @Microsoft__Quantum__Arrays___daf4e2a81cd64f86958d8ac71d9bde79_IndexRange__body(%Array* %11)
  %13 = extractvalue %Range %12, 0
  %14 = extractvalue %Range %12, 1
  %15 = extractvalue %Range %12, 2
  br label %preheader__1

continue__1:                                      ; preds = %exit__6
  %16 = sub i64 %0, 1
  br label %header__7

header__2:                                        ; preds = %exiting__2, %then0__1
  %17 = phi i64 [ 0, %then0__1 ], [ %22, %exiting__2 ]
  %18 = icmp sle i64 %17, %9
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %17)
  %20 = bitcast i8* %19 to %Array**
  %21 = load %Array*, %Array** %20, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret void

preheader__1:                                     ; preds = %else__1
  %23 = icmp sgt i64 %14, 0
  br label %header__3

header__3:                                        ; preds = %exiting__3, %preheader__1
  %i = phi i64 [ %13, %preheader__1 ], [ %34, %exiting__3 ]
  %24 = icmp sle i64 %i, %15
  %25 = icmp sge i64 %i, %15
  %26 = select i1 %23, i1 %24, i1 %25
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = add i64 %i, 1
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %27)
  %29 = bitcast i8* %28 to %Array**
  %30 = load %Array*, %Array** %29, align 8
  %31 = call i64 @__quantum__rt__array_get_size_1d(%Array* %30)
  %32 = icmp ne i64 %31, %numColumns
  br i1 %32, label %then0__2, label %continue__2

then0__2:                                         ; preds = %body__3
  call void @__quantum__rt__string_update_reference_count(%String* %message, i32 1)
  %33 = sub i64 %0, 1
  br label %header__4

continue__2:                                      ; preds = %body__3
  br label %exiting__3

exiting__3:                                       ; preds = %continue__2
  %34 = add i64 %i, %14
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  %35 = call i64 @__quantum__rt__array_get_size_1d(%Array* %11)
  %36 = sub i64 %35, 1
  br label %header__6

header__4:                                        ; preds = %exiting__4, %then0__2
  %37 = phi i64 [ 0, %then0__2 ], [ %42, %exiting__4 ]
  %38 = icmp sle i64 %37, %33
  br i1 %38, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %37)
  %40 = bitcast i8* %39 to %Array**
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %42 = add i64 %37, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  %43 = call i64 @__quantum__rt__array_get_size_1d(%Array* %11)
  %44 = sub i64 %43, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %45 = phi i64 [ 0, %exit__4 ], [ %50, %exiting__5 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %45)
  %48 = bitcast i8* %47 to %Array**
  %49 = load %Array*, %Array** %48, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %50 = add i64 %45, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__fail(%String* %message)
  unreachable

header__6:                                        ; preds = %exiting__6, %exit__3
  %51 = phi i64 [ 0, %exit__3 ], [ %56, %exiting__6 ]
  %52 = icmp sle i64 %51, %36
  br i1 %52, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %51)
  %54 = bitcast i8* %53 to %Array**
  %55 = load %Array*, %Array** %54, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %55, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %56 = add i64 %51, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  br label %continue__1

header__7:                                        ; preds = %exiting__7, %continue__1
  %57 = phi i64 [ 0, %continue__1 ], [ %62, %exiting__7 ]
  %58 = icmp sle i64 %57, %16
  br i1 %58, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %57)
  %60 = bitcast i8* %59 to %Array**
  %61 = load %Array*, %Array** %60, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %61, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %62 = add i64 %57, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___e3ad95d105f04e26bbbde536b99ee0d9_Head__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp sgt i64 %0, 0
  %9 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @42, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %8, i1 true, %String* %9)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %11 = bitcast i8* %10 to %Array**
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 1)
  %13 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %17 = bitcast i8* %16 to %Array**
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %9, i32 -1)
  ret %Array* %12
}

define internal %Range @Microsoft__Quantum__Arrays___daf4e2a81cd64f86958d8ac71d9bde79_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = sub i64 %0, 1
  %9 = load %Range, %Range* @EmptyRange, align 4
  %10 = insertvalue %Range %9, i64 0, 0
  %11 = insertvalue %Range %10, i64 1, 1
  %12 = insertvalue %Range %11, i64 %8, 2
  %13 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %17 = bitcast i8* %16 to %Array**
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %12
}

define internal %Array* @Microsoft__Quantum__Arrays___03f4b37cc2764e4897c490452750cc66_Rest__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = sub i64 %0, 1
  %9 = load %Range, %Range* @EmptyRange, align 4
  %10 = insertvalue %Range %9, i64 1, 0
  %11 = insertvalue %Range %10, i64 1, 1
  %12 = insertvalue %Range %11, i64 %8, 2
  %13 = call %Array* @__quantum__rt__array_slice_1d(%Array* %array, %Range %12, i1 true)
  %14 = call i64 @__quantum__rt__array_get_size_1d(%Array* %13)
  %15 = sub i64 %14, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %16)
  %19 = bitcast i8* %18 to %Array**
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 1)
  %22 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %23 = phi i64 [ 0, %exit__2 ], [ %28, %exiting__3 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %23)
  %26 = bitcast i8* %25 to %Array**
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %28 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  ret %Array* %13
}

define internal void @Microsoft__Quantum__Arrays___1845b59d14e84c01b452fc64ad9ec56a_RectangularArrayFact__body(%Array* %array, %String* %message) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %then0__1, label %else__1

then0__1:                                         ; preds = %exit__1
  %9 = sub i64 %0, 1
  br label %header__2

else__1:                                          ; preds = %exit__1
  %10 = call %Array* @Microsoft__Quantum__Arrays___ced3baed58494097ae31e21a99eaf694_Head__body(%Array* %array)
  %numColumns = call i64 @__quantum__rt__array_get_size_1d(%Array* %10)
  %11 = call %Array* @Microsoft__Quantum__Arrays___bbb3eca07bf44429b7b93ea7cf04326d_Rest__body(%Array* %array)
  %12 = call %Range @Microsoft__Quantum__Arrays___21aea7a09ff54a6d825e960474ce670e_IndexRange__body(%Array* %11)
  %13 = extractvalue %Range %12, 0
  %14 = extractvalue %Range %12, 1
  %15 = extractvalue %Range %12, 2
  br label %preheader__1

continue__1:                                      ; preds = %exit__6
  %16 = sub i64 %0, 1
  br label %header__7

header__2:                                        ; preds = %exiting__2, %then0__1
  %17 = phi i64 [ 0, %then0__1 ], [ %22, %exiting__2 ]
  %18 = icmp sle i64 %17, %9
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %17)
  %20 = bitcast i8* %19 to %Array**
  %21 = load %Array*, %Array** %20, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret void

preheader__1:                                     ; preds = %else__1
  %23 = icmp sgt i64 %14, 0
  br label %header__3

header__3:                                        ; preds = %exiting__3, %preheader__1
  %i = phi i64 [ %13, %preheader__1 ], [ %34, %exiting__3 ]
  %24 = icmp sle i64 %i, %15
  %25 = icmp sge i64 %i, %15
  %26 = select i1 %23, i1 %24, i1 %25
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = add i64 %i, 1
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %27)
  %29 = bitcast i8* %28 to %Array**
  %30 = load %Array*, %Array** %29, align 8
  %31 = call i64 @__quantum__rt__array_get_size_1d(%Array* %30)
  %32 = icmp ne i64 %31, %numColumns
  br i1 %32, label %then0__2, label %continue__2

then0__2:                                         ; preds = %body__3
  call void @__quantum__rt__string_update_reference_count(%String* %message, i32 1)
  %33 = sub i64 %0, 1
  br label %header__4

continue__2:                                      ; preds = %body__3
  br label %exiting__3

exiting__3:                                       ; preds = %continue__2
  %34 = add i64 %i, %14
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  %35 = call i64 @__quantum__rt__array_get_size_1d(%Array* %11)
  %36 = sub i64 %35, 1
  br label %header__6

header__4:                                        ; preds = %exiting__4, %then0__2
  %37 = phi i64 [ 0, %then0__2 ], [ %42, %exiting__4 ]
  %38 = icmp sle i64 %37, %33
  br i1 %38, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %37)
  %40 = bitcast i8* %39 to %Array**
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %42 = add i64 %37, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  %43 = call i64 @__quantum__rt__array_get_size_1d(%Array* %11)
  %44 = sub i64 %43, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %45 = phi i64 [ 0, %exit__4 ], [ %50, %exiting__5 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %45)
  %48 = bitcast i8* %47 to %Array**
  %49 = load %Array*, %Array** %48, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %50 = add i64 %45, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__fail(%String* %message)
  unreachable

header__6:                                        ; preds = %exiting__6, %exit__3
  %51 = phi i64 [ 0, %exit__3 ], [ %56, %exiting__6 ]
  %52 = icmp sle i64 %51, %36
  br i1 %52, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %51)
  %54 = bitcast i8* %53 to %Array**
  %55 = load %Array*, %Array** %54, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %55, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %56 = add i64 %51, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  br label %continue__1

header__7:                                        ; preds = %exiting__7, %continue__1
  %57 = phi i64 [ 0, %continue__1 ], [ %62, %exiting__7 ]
  %58 = icmp sle i64 %57, %16
  br i1 %58, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %57)
  %60 = bitcast i8* %59 to %Array**
  %61 = load %Array*, %Array** %60, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %61, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %62 = add i64 %57, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Arrays___ced3baed58494097ae31e21a99eaf694_Head__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp sgt i64 %0, 0
  %9 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @42, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %8, i1 true, %String* %9)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 0)
  %11 = bitcast i8* %10 to %Array**
  %12 = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 1)
  %13 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %17 = bitcast i8* %16 to %Array**
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %9, i32 -1)
  ret %Array* %12
}

define internal %Array* @Microsoft__Quantum__Arrays___bbb3eca07bf44429b7b93ea7cf04326d_Rest__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = sub i64 %0, 1
  %9 = load %Range, %Range* @EmptyRange, align 4
  %10 = insertvalue %Range %9, i64 1, 0
  %11 = insertvalue %Range %10, i64 1, 1
  %12 = insertvalue %Range %11, i64 %8, 2
  %13 = call %Array* @__quantum__rt__array_slice_1d(%Array* %array, %Range %12, i1 true)
  %14 = call i64 @__quantum__rt__array_get_size_1d(%Array* %13)
  %15 = sub i64 %14, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %16)
  %19 = bitcast i8* %18 to %Array**
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 1)
  %22 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %23 = phi i64 [ 0, %exit__2 ], [ %28, %exiting__3 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %23)
  %26 = bitcast i8* %25 to %Array**
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %28 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  ret %Array* %13
}

define internal %Array* @Microsoft__Quantum__Arrays___de292543ed1b402cbbe87ae86caabb95___QsRef1__ColumnAtUnchecked____body(i64 %column, %Array* %matrix) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %matrix)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %matrix, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %matrix, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64 }* getelementptr ({ %Callable*, i64 }, { %Callable*, i64 }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, i64 }*
  %10 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %9, i32 0, i32 1
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___68c15fee7a6746968076b9d2945f8128_ElementAt__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  store %Callable* %12, %Callable** %10, align 8
  store i64 %column, i64* %11, align 4
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__29__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__17__FunctionTable, %Tuple* %8)
  %14 = call %Callable* @Microsoft__Quantum__Arrays___0acc218971d84017923a687ac5bc721b_LookupFunction__body(%Array* %matrix)
  %15 = call %Callable* @Microsoft__Quantum__Canon___b2c3788ae8024c4c81804222891f5019_Compose__body(%Callable* %13, %Callable* %14)
  %16 = call %Range @Microsoft__Quantum__Arrays___daf4e2a81cd64f86958d8ac71d9bde79_IndexRange__body(%Array* %matrix)
  %17 = call %Array* @Microsoft__Quantum__Convert__RangeAsIntArray__body(%Range %16)
  %18 = call %Array* @Microsoft__Quantum__Arrays___f68b936fa6734792837828cfe0cedc1a_Mapped__body(%Callable* %15, %Array* %17)
  %19 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %matrix, i64 %20)
  %23 = bitcast i8* %22 to %Array**
  %24 = load %Array*, %Array** %23, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %24, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %matrix, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  ret %Array* %18
}

define internal void @Lifted__PartialApplication__29__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Array* }*
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 1
  store i64 %2, i64* %8, align 4
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___68c15fee7a6746968076b9d2945f8128_ElementAt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %1 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load %Array*, %Array** %2, align 8
  %5 = call double @Microsoft__Quantum__Arrays___68c15fee7a6746968076b9d2945f8128_ElementAt__body(i64 %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { double }*
  %7 = getelementptr inbounds { double }, { double }* %6, i32 0, i32 0
  store double %5, double* %7, align 8
  ret void
}

define internal void @MemoryManagement__17__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__17__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Arrays___0acc218971d84017923a687ac5bc721b_LookupFunction__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___569eafce500a433aa6cf29fb05e20e5c_ElementAt__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %13 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %17 = bitcast i8* %16 to %Array**
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %array, i32 1)
  store %Callable* %12, %Callable** %10, align 8
  store %Array* %array, %Array** %11, align 8
  %20 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__34__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__19__FunctionTable, %Tuple* %8)
  %21 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %22 = phi i64 [ 0, %exit__2 ], [ %27, %exiting__3 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %22)
  %25 = bitcast i8* %24 to %Array**
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %27 = add i64 %22, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Callable* %20
}

define internal double @Microsoft__Quantum__Arrays___68c15fee7a6746968076b9d2945f8128_ElementAt__body(i64 %index, %Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = icmp sge i64 %index, 0
  br i1 %0, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %entry
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %2 = icmp slt i64 %index, %1
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %entry
  %3 = phi i1 [ %2, %condTrue__1 ], [ %0, %entry ]
  %4 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @41, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %3, %String* %4)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %index)
  %6 = bitcast i8* %5 to double*
  %7 = load double, double* %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %4, i32 -1)
  ret double %7
}

define internal %Array* @Microsoft__Quantum__Arrays___23e0decc63d94dd8b19a5b57b39e10f2___QsRef1__ColumnAtUnchecked____body(i64 %column, %Array* %matrix) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %matrix)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %matrix, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %matrix, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64 }* getelementptr ({ %Callable*, i64 }, { %Callable*, i64 }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, i64 }*
  %10 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %9, i32 0, i32 1
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___fce9026400844d708a24c4f7b72d6524_ElementAt__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  store %Callable* %12, %Callable** %10, align 8
  store i64 %column, i64* %11, align 4
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__30__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__18__FunctionTable, %Tuple* %8)
  %14 = call %Callable* @Microsoft__Quantum__Arrays___ab69b37649d6444cb1ebecd1c363bb06_LookupFunction__body(%Array* %matrix)
  %15 = call %Callable* @Microsoft__Quantum__Canon___8ef78cf708ed4088adeed7b7fd342f5b_Compose__body(%Callable* %13, %Callable* %14)
  %16 = call %Range @Microsoft__Quantum__Arrays___21aea7a09ff54a6d825e960474ce670e_IndexRange__body(%Array* %matrix)
  %17 = call %Array* @Microsoft__Quantum__Convert__RangeAsIntArray__body(%Range %16)
  %18 = call %Array* @Microsoft__Quantum__Arrays___acbdd3c13fea476596d98468e7da26fe_Mapped__body(%Callable* %15, %Array* %17)
  %19 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %matrix, i64 %20)
  %23 = bitcast i8* %22 to %Array**
  %24 = load %Array*, %Array** %23, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %24, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %matrix, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %17, i32 -1)
  ret %Array* %18
}

define internal void @Lifted__PartialApplication__30__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Array* }*
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 1
  store i64 %2, i64* %8, align 4
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___fce9026400844d708a24c4f7b72d6524_ElementAt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %1 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load %Array*, %Array** %2, align 8
  %5 = call i64 @Microsoft__Quantum__Arrays___fce9026400844d708a24c4f7b72d6524_ElementAt__body(i64 %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { i64 }*
  %7 = getelementptr inbounds { i64 }, { i64 }* %6, i32 0, i32 0
  store i64 %5, i64* %7, align 4
  ret void
}

define internal void @MemoryManagement__18__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__18__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64 }*
  %1 = getelementptr inbounds { %Callable*, i64 }, { %Callable*, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Arrays___ab69b37649d6444cb1ebecd1c363bb06_LookupFunction__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___9fb198328a4543008a10ebf164a18ba2_ElementAt__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %13 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %17 = bitcast i8* %16 to %Array**
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %array, i32 1)
  store %Callable* %12, %Callable** %10, align 8
  store %Array* %array, %Array** %11, align 8
  %20 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__35__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__20__FunctionTable, %Tuple* %8)
  %21 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %22 = phi i64 [ 0, %exit__2 ], [ %27, %exiting__3 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %22)
  %25 = bitcast i8* %24 to %Array**
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %27 = add i64 %22, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Callable* %20
}

define internal i64 @Microsoft__Quantum__Arrays___fce9026400844d708a24c4f7b72d6524_ElementAt__body(i64 %index, %Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %0 = icmp sge i64 %index, 0
  br i1 %0, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %entry
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %2 = icmp slt i64 %index, %1
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %entry
  %3 = phi i1 [ %2, %condTrue__1 ], [ %0, %entry ]
  %4 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @41, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %3, %String* %4)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %index)
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %4, i32 -1)
  ret i64 %7
}

define internal void @Lifted__PartialApplication__31__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr inbounds { i64 }, { i64 }* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %4 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 1
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Array* }*
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 1
  store i64 %2, i64* %8, align 4
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___de292543ed1b402cbbe87ae86caabb95___QsRef1__ColumnAtUnchecked____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %1 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load %Array*, %Array** %2, align 8
  %5 = call %Array* @Microsoft__Quantum__Arrays___de292543ed1b402cbbe87ae86caabb95___QsRef1__ColumnAtUnchecked____body(i64 %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { %Array* }*
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  store %Array* %5, %Array** %7, align 8
  ret void
}

define internal void @MemoryManagement__19__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Array**
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__19__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Array**
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__32__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr inbounds { i64 }, { i64 }* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %4 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 1
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Array* }*
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 1
  store i64 %2, i64* %8, align 4
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___23e0decc63d94dd8b19a5b57b39e10f2___QsRef1__ColumnAtUnchecked____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %1 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load %Array*, %Array** %2, align 8
  %5 = call %Array* @Microsoft__Quantum__Arrays___23e0decc63d94dd8b19a5b57b39e10f2___QsRef1__ColumnAtUnchecked____body(i64 %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { %Array* }*
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  store %Array* %5, %Array** %7, align 8
  ret void
}

define internal void @MemoryManagement__20__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Array**
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__20__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Array**
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal %Range @Microsoft__Quantum__Arrays___d736693988d5429891cc61a8095b8ce7_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = sub i64 %0, 1
  %9 = load %Range, %Range* @EmptyRange, align 4
  %10 = insertvalue %Range %9, i64 0, 0
  %11 = insertvalue %Range %10, i64 1, 1
  %12 = insertvalue %Range %11, i64 %8, 2
  %13 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %17 = bitcast i8* %16 to %Array**
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %12
}

define internal %Range @Microsoft__Quantum__Arrays___a91d0b86942c4b87a64397dc05414824_IndexRange__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { i64, %Callable* }**
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %5, align 8
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  %9 = bitcast { i64, %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %11 = sub i64 %0, 1
  %12 = load %Range, %Range* @EmptyRange, align 4
  %13 = insertvalue %Range %12, i64 0, 0
  %14 = insertvalue %Range %13, i64 1, 1
  %15 = insertvalue %Range %14, i64 %11, 2
  %16 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %17)
  %20 = bitcast i8* %19 to { i64, %Callable* }**
  %21 = load { i64, %Callable* }*, { i64, %Callable* }** %20, align 8
  %22 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %21, i32 0, i32 1
  %23 = load %Callable*, %Callable** %22, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %23, i32 -1)
  %24 = bitcast { i64, %Callable* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Range %15
}

define internal %Callable* @Microsoft__Quantum__Arrays___62ca31d0fdf948018a1a74a6d4c67398_ElementAt__body(i64 %index, %Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp sge i64 %index, 0
  br i1 %8, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %exit__1
  %9 = icmp slt i64 %index, %0
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %exit__1
  %10 = phi i1 [ %9, %condTrue__1 ], [ %8, %exit__1 ]
  %11 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @41, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %10, %String* %11)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %index)
  %13 = bitcast i8* %12 to %Callable**
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 1)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %condContinue__1
  %16 = phi i64 [ 0, %condContinue__1 ], [ %21, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %16)
  %19 = bitcast i8* %18 to %Callable**
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %20, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %20, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %11, i32 -1)
  ret %Callable* %14
}

define internal %Array* @Microsoft__Quantum__Arrays___569eafce500a433aa6cf29fb05e20e5c_ElementAt__body(i64 %index, %Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp sge i64 %index, 0
  br i1 %8, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %exit__1
  %9 = icmp slt i64 %index, %0
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %exit__1
  %10 = phi i1 [ %9, %condTrue__1 ], [ %8, %exit__1 ]
  %11 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @41, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %10, %String* %11)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %index)
  %13 = bitcast i8* %12 to %Array**
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 1)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %condContinue__1
  %16 = phi i64 [ 0, %condContinue__1 ], [ %21, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %16)
  %19 = bitcast i8* %18 to %Array**
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %11, i32 -1)
  ret %Array* %14
}

define internal %Array* @Microsoft__Quantum__Arrays___9fb198328a4543008a10ebf164a18ba2_ElementAt__body(i64 %index, %Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = icmp sge i64 %index, 0
  br i1 %8, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %exit__1
  %9 = icmp slt i64 %index, %0
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %exit__1
  %10 = phi i1 [ %9, %condTrue__1 ], [ %8, %exit__1 ]
  %11 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @41, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__Fact__body(i1 %10, %String* %11)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %index)
  %13 = bitcast i8* %12 to %Array**
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 1)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %condContinue__1
  %16 = phi i64 [ 0, %condContinue__1 ], [ %21, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %16)
  %19 = bitcast i8* %18 to %Array**
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %11, i32 -1)
  ret %Array* %14
}

define internal %Callable* @Microsoft__Quantum__Arrays___185dd1358b4341c98f17b9bb52b1162f_LookupFunction__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to %Callable**
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, %Array* }*
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %9, i32 0, i32 1
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Arrays___62ca31d0fdf948018a1a74a6d4c67398_ElementAt__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %13 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %14 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %15 = icmp sle i64 %14, %13
  br i1 %15, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %17 = bitcast i8* %16 to %Callable**
  %18 = load %Callable*, %Callable** %17, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %14, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %array, i32 1)
  store %Callable* %12, %Callable** %10, align 8
  store %Array* %array, %Array** %11, align 8
  %20 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__33__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__21__FunctionTable, %Tuple* %8)
  %21 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %22 = phi i64 [ 0, %exit__2 ], [ %27, %exiting__3 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %22)
  %25 = bitcast i8* %24 to %Callable**
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %27 = add i64 %22, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret %Callable* %20
}

define internal void @Lifted__PartialApplication__33__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr inbounds { i64 }, { i64 }* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %4 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 1
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Array* }*
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 1
  store i64 %2, i64* %8, align 4
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___62ca31d0fdf948018a1a74a6d4c67398_ElementAt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %1 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load %Array*, %Array** %2, align 8
  %5 = call %Callable* @Microsoft__Quantum__Arrays___62ca31d0fdf948018a1a74a6d4c67398_ElementAt__body(i64 %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { %Callable* }*
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  store %Callable* %5, %Callable** %7, align 8
  ret void
}

define internal void @MemoryManagement__21__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__21__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to %Callable**
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %11, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %11, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__34__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr inbounds { i64 }, { i64 }* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %4 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 1
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Array* }*
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 1
  store i64 %2, i64* %8, align 4
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___569eafce500a433aa6cf29fb05e20e5c_ElementAt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %1 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load %Array*, %Array** %2, align 8
  %5 = call %Array* @Microsoft__Quantum__Arrays___569eafce500a433aa6cf29fb05e20e5c_ElementAt__body(i64 %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { %Array* }*
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  store %Array* %5, %Array** %7, align 8
  ret void
}

define internal void @Lifted__PartialApplication__35__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr inbounds { i64 }, { i64 }* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %4 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 1
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { i64, %Array* }*
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %7, i32 0, i32 1
  store i64 %2, i64* %8, align 4
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Arrays___9fb198328a4543008a10ebf164a18ba2_ElementAt__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %1 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %0, i32 0, i32 1
  %3 = load i64, i64* %1, align 4
  %4 = load %Array*, %Array** %2, align 8
  %5 = call %Array* @Microsoft__Quantum__Arrays___9fb198328a4543008a10ebf164a18ba2_ElementAt__body(i64 %3, %Array* %4)
  %6 = bitcast %Tuple* %result-tuple to { %Array* }*
  %7 = getelementptr inbounds { %Array* }, { %Array* }* %6, i32 0, i32 0
  store %Array* %5, %Array** %7, align 8
  ret void
}

define internal i1 @Microsoft__Quantum__Arrays___877ada3ecf9545a4a953eed2bb32f638_IsEmpty__body(%Array* %array) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %14 = icmp eq i64 %0, 0
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %16)
  %19 = bitcast i8* %18 to { { double, double }*, %Array* }**
  %20 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %19, align 8
  %21 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %20, i32 0, i32 0
  %22 = load { double, double }*, { double, double }** %21, align 8
  %23 = bitcast { double, double }* %22 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %23, i32 -1)
  %24 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %20, i32 0, i32 1
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  %26 = bitcast { { double, double }*, %Array* }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  ret i1 %14
}

define internal %Array* @Microsoft__Quantum__Arrays___bc6513e6a11c42d1a57534e72ebbc64c_Padded__body(i64 %nElementsTotal, { double, double }* %defaultElement, %Array* %inputArray) {
entry:
  %0 = bitcast { double, double }* %defaultElement to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %nElementsInitial = call i64 @__quantum__rt__array_get_size_1d(%Array* %inputArray)
  %1 = sub i64 %nElementsInitial, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputArray, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i32 1)
  %nAbsElementsTotal = call i64 @Microsoft__Quantum__Math__AbsI__body(i64 %nElementsTotal)
  %9 = icmp sge i64 %nAbsElementsTotal, %nElementsInitial
  %10 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @43, i32 0, i32 0))
  call void @Microsoft__Quantum__Diagnostics__EqualityFactB__body(i1 %9, i1 true, %String* %10)
  %nElementsPad = sub i64 %nAbsElementsTotal, %nElementsInitial
  %padArray = call %Array* @Microsoft__Quantum__Arrays___611fdc2393c64508a1bfb60d0330921c_ConstantArray__body(i64 %nElementsPad, { double, double }* %defaultElement)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %padArray)
  %12 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16, align 8
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i32 1)
  %20 = icmp sge i64 %nElementsTotal, 0
  br i1 %20, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__2
  %21 = call %Array* @__quantum__rt__array_concatenate(%Array* %padArray, %Array* %inputArray)
  %22 = call i64 @__quantum__rt__array_get_size_1d(%Array* %21)
  %23 = sub i64 %22, 1
  br label %header__3

condFalse__1:                                     ; preds = %exit__2
  %24 = call %Array* @__quantum__rt__array_concatenate(%Array* %inputArray, %Array* %padArray)
  %25 = call i64 @__quantum__rt__array_get_size_1d(%Array* %24)
  %26 = sub i64 %25, 1
  br label %header__4

condContinue__1:                                  ; preds = %exit__4, %exit__3
  %27 = phi %Array* [ %21, %exit__3 ], [ %24, %exit__4 ]
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  %28 = sub i64 %nElementsInitial, 1
  br label %header__5

header__3:                                        ; preds = %exiting__3, %condTrue__1
  %29 = phi i64 [ 0, %condTrue__1 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %23
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32, align 8
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %21, i32 -1)
  br label %condContinue__1

header__4:                                        ; preds = %exiting__4, %condFalse__1
  %36 = phi i64 [ 0, %condFalse__1 ], [ %42, %exiting__4 ]
  %37 = icmp sle i64 %36, %26
  br i1 %37, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 %36)
  %39 = bitcast i8* %38 to { double, double }**
  %40 = load { double, double }*, { double, double }** %39, align 8
  %41 = bitcast { double, double }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %42 = add i64 %36, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 -1)
  br label %condContinue__1

header__5:                                        ; preds = %exiting__5, %condContinue__1
  %43 = phi i64 [ 0, %condContinue__1 ], [ %49, %exiting__5 ]
  %44 = icmp sle i64 %43, %28
  br i1 %44, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %inputArray, i64 %43)
  %46 = bitcast i8* %45 to { double, double }**
  %47 = load { double, double }*, { double, double }** %46, align 8
  %48 = bitcast { double, double }* %47 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %48, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %49 = add i64 %43, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %inputArray, i32 -1)
  %50 = sub i64 %11, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %51 = phi i64 [ 0, %exit__5 ], [ %57, %exiting__6 ]
  %52 = icmp sle i64 %51, %50
  br i1 %52, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %51)
  %54 = bitcast i8* %53 to { double, double }**
  %55 = load { double, double }*, { double, double }** %54, align 8
  %56 = bitcast { double, double }* %55 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %57 = add i64 %51, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %padArray, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %10, i32 -1)
  %58 = sub i64 %11, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %59 = phi i64 [ 0, %exit__6 ], [ %65, %exiting__7 ]
  %60 = icmp sle i64 %59, %58
  br i1 %60, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %padArray, i64 %59)
  %62 = bitcast i8* %61 to { double, double }**
  %63 = load { double, double }*, { double, double }** %62, align 8
  %64 = bitcast { double, double }* %63 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %64, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %65 = add i64 %59, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %padArray, i32 -1)
  ret %Array* %27
}

define internal %Array* @Microsoft__Quantum__Arrays___611fdc2393c64508a1bfb60d0330921c_ConstantArray__body(i64 %length, { double, double }* %value) {
entry:
  %0 = bitcast { double, double }* %value to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %2 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %6 = bitcast i8* %5 to { double, double }**
  store { double, double }* %value, { double, double }** %6, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  ret %Array* %1
}

define internal %Array* @Microsoft__Quantum__Arrays___33d7e864a59c4c46a65094ee950d2915_ConstantArray__body(i64 %length, double %value) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %length)
  %1 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to double*
  store double %value, double* %5, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  ret %Array* %0
}

define internal %Array* @Microsoft__Quantum__Arrays___357bd2ab33e34755b61f70266c5f5077_Zipped__body(%Array* %left, %Array* %right) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %left)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %2)
  %5 = bitcast i8* %4 to %Array**
  %6 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %6, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 1)
  %8 = call i64 @__quantum__rt__array_get_size_1d(%Array* %right)
  %9 = icmp slt i64 %0, %8
  br i1 %9, label %condTrue__1, label %condFalse__1

condTrue__1:                                      ; preds = %exit__1
  br label %condContinue__1

condFalse__1:                                     ; preds = %exit__1
  br label %condContinue__1

condContinue__1:                                  ; preds = %condFalse__1, %condTrue__1
  %nElements = phi i64 [ %0, %condTrue__1 ], [ %8, %condFalse__1 ]
  %10 = call { %Array*, double }* @Microsoft__Quantum__Core___4ab62dd0a619401f92e968753201d2d3_Default__body()
  %11 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nElements)
  %12 = sub i64 %nElements, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %condContinue__1
  %13 = phi i64 [ 0, %condContinue__1 ], [ %20, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %13)
  %16 = bitcast i8* %15 to { %Array*, double }**
  store { %Array*, double }* %10, { %Array*, double }** %16, align 8
  %17 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %10, i32 0, i32 0
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 1)
  %19 = bitcast { %Array*, double }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %20 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %output = alloca %Array*, align 8
  store %Array* %11, %Array** %output, align 8
  %21 = sub i64 %nElements, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %22 = phi i64 [ 0, %exit__2 ], [ %30, %exiting__3 ]
  %23 = icmp sle i64 %22, %21
  br i1 %23, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %22)
  %25 = bitcast i8* %24 to { %Array*, double }**
  %26 = load { %Array*, double }*, { %Array*, double }** %25, align 8
  %27 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %26, i32 0, i32 0
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  %29 = bitcast { %Array*, double }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %30 = add i64 %22, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %31 = sub i64 %nElements, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %idxElement = phi i64 [ 0, %exit__3 ], [ %51, %exiting__4 ]
  %32 = icmp sle i64 %idxElement, %31
  br i1 %32, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %33 = load %Array*, %Array** %output, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %33, i32 -1)
  %34 = call %Array* @__quantum__rt__array_copy(%Array* %33, i1 false)
  %35 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double }* getelementptr ({ %Array*, double }, { %Array*, double }* null, i32 1) to i64))
  %36 = bitcast %Tuple* %35 to { %Array*, double }*
  %37 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %36, i32 0, i32 0
  %38 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %36, i32 0, i32 1
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %idxElement)
  %40 = bitcast i8* %39 to %Array**
  %41 = load %Array*, %Array** %40, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 1)
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %right, i64 %idxElement)
  %43 = bitcast i8* %42 to double*
  %44 = load double, double* %43, align 8
  store %Array* %41, %Array** %37, align 8
  store double %44, double* %38, align 8
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %34, i64 %idxElement)
  %46 = bitcast i8* %45 to { %Array*, double }**
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 1)
  %47 = load { %Array*, double }*, { %Array*, double }** %46, align 8
  %48 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %47, i32 0, i32 0
  %49 = load %Array*, %Array** %48, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %49, i32 -1)
  %50 = bitcast { %Array*, double }* %47 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %50, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %50, i32 -1)
  store { %Array*, double }* %36, { %Array*, double }** %46, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 1)
  store %Array* %34, %Array** %output, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %33, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %51 = add i64 %idxElement, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %52 = load %Array*, %Array** %output, align 8
  %53 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %10, i32 0, i32 0
  %54 = load %Array*, %Array** %53, align 8
  %55 = sub i64 %0, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %56 = phi i64 [ 0, %exit__4 ], [ %61, %exiting__5 ]
  %57 = icmp sle i64 %56, %55
  br i1 %57, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %left, i64 %56)
  %59 = bitcast i8* %58 to %Array**
  %60 = load %Array*, %Array** %59, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %61 = add i64 %56, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %left, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %right, i32 -1)
  %62 = call i64 @__quantum__rt__array_get_size_1d(%Array* %52)
  %63 = sub i64 %62, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %64 = phi i64 [ 0, %exit__5 ], [ %72, %exiting__6 ]
  %65 = icmp sle i64 %64, %63
  br i1 %65, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 %64)
  %67 = bitcast i8* %66 to { %Array*, double }**
  %68 = load { %Array*, double }*, { %Array*, double }** %67, align 8
  %69 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %68, i32 0, i32 0
  %70 = load %Array*, %Array** %69, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %70, i32 -1)
  %71 = bitcast { %Array*, double }* %68 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %71, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %72 = add i64 %64, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %52, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i32 -1)
  %73 = bitcast { %Array*, double }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %73, i32 -1)
  ret %Array* %52
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Arrays___720c2e0ba071457cbb57cb509a02e447_Fold__body(%Callable* %folder, { i64, %Callable* }* %state, %Array* %array) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %folder, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %folder, i32 1)
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %state, i32 0, i32 1
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { i64, %Callable* }* %state to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %array)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %5)
  %8 = bitcast i8* %7 to { i64, %Callable* }**
  %9 = load { i64, %Callable* }*, { i64, %Callable* }** %8, align 8
  %10 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %9, i32 0, i32 1
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %11, i32 1)
  %12 = bitcast { i64, %Callable* }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %current = alloca { i64, %Callable* }*, align 8
  store { i64, %Callable* }* %state, { i64, %Callable* }** %current, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %1, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %2, i32 1)
  %14 = call %Range @Microsoft__Quantum__Arrays___a91d0b86942c4b87a64397dc05414824_IndexRange__body(%Array* %array)
  %15 = extractvalue %Range %14, 0
  %16 = extractvalue %Range %14, 1
  %17 = extractvalue %Range %14, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %18 = icmp sgt i64 %16, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxElement = phi i64 [ %15, %preheader__1 ], [ %43, %exiting__2 ]
  %19 = icmp sle i64 %idxElement, %17
  %20 = icmp sge i64 %idxElement, %17
  %21 = select i1 %18, i1 %19, i1 %20
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }*, { i64, %Callable* }* }* getelementptr ({ { i64, %Callable* }*, { i64, %Callable* }* }, { { i64, %Callable* }*, { i64, %Callable* }* }* null, i32 1) to i64))
  %23 = bitcast %Tuple* %22 to { { i64, %Callable* }*, { i64, %Callable* }* }*
  %24 = getelementptr inbounds { { i64, %Callable* }*, { i64, %Callable* }* }, { { i64, %Callable* }*, { i64, %Callable* }* }* %23, i32 0, i32 0
  %25 = getelementptr inbounds { { i64, %Callable* }*, { i64, %Callable* }* }, { { i64, %Callable* }*, { i64, %Callable* }* }* %23, i32 0, i32 1
  %26 = load { i64, %Callable* }*, { i64, %Callable* }** %current, align 8
  %27 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %26, i32 0, i32 1
  %28 = load %Callable*, %Callable** %27, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %28, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %28, i32 1)
  %29 = bitcast { i64, %Callable* }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 1)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %idxElement)
  %31 = bitcast i8* %30 to { i64, %Callable* }**
  %32 = load { i64, %Callable* }*, { i64, %Callable* }** %31, align 8
  %33 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %32, i32 0, i32 1
  %34 = load %Callable*, %Callable** %33, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %34, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %34, i32 1)
  %35 = bitcast { i64, %Callable* }* %32 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 1)
  store { i64, %Callable* }* %26, { i64, %Callable* }** %24, align 8
  store { i64, %Callable* }* %32, { i64, %Callable* }** %25, align 8
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Callable* }* }* getelementptr ({ { i64, %Callable* }* }, { { i64, %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %folder, %Tuple* %22, %Tuple* %36)
  %37 = bitcast %Tuple* %36 to { { i64, %Callable* }* }*
  %38 = getelementptr inbounds { { i64, %Callable* }* }, { { i64, %Callable* }* }* %37, i32 0, i32 0
  %39 = load { i64, %Callable* }*, { i64, %Callable* }** %38, align 8
  %40 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %39, i32 0, i32 1
  %41 = load %Callable*, %Callable** %40, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %41, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %41, i32 1)
  %42 = bitcast { i64, %Callable* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %41, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %41, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %28, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %28, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %28, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %28, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  store { i64, %Callable* }* %39, { i64, %Callable* }** %current, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %28, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %28, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %34, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %41, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %41, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %43 = add i64 %idxElement, %16
  br label %header__2

exit__2:                                          ; preds = %header__2
  %44 = load { i64, %Callable* }*, { i64, %Callable* }** %current, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %folder, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %folder, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  %45 = sub i64 %3, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %46 = phi i64 [ 0, %exit__2 ], [ %54, %exiting__3 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %46)
  %49 = bitcast i8* %48 to { i64, %Callable* }**
  %50 = load { i64, %Callable* }*, { i64, %Callable* }** %49, align 8
  %51 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %50, i32 0, i32 1
  %52 = load %Callable*, %Callable** %51, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %52, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %52, i32 -1)
  %53 = bitcast { i64, %Callable* }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %53, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %54 = add i64 %46, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  %55 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %44, i32 0, i32 1
  %56 = load %Callable*, %Callable** %55, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %56, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %56, i32 -1)
  %57 = bitcast { i64, %Callable* }* %44 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 -1)
  ret { i64, %Callable* }* %44
}

define internal %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %indices, %Array* %array) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 1)
  %nSliced = call i64 @__quantum__rt__array_get_size_1d(%Array* %indices)
  %0 = call %Qubit* @Microsoft__Quantum__Core___aaed1fe6c6d94b1da9ad0f4a050d85ba_Default__body()
  %1 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nSliced)
  %2 = sub i64 %nSliced, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %7, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %1, i64 %3)
  %6 = bitcast i8* %5 to %Qubit**
  store %Qubit* %0, %Qubit** %6, align 8
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %7 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %sliced = alloca %Array*, align 8
  store %Array* %1, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %8 = sub i64 %nSliced, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %idx = phi i64 [ 0, %exit__1 ], [ %20, %exiting__2 ]
  %9 = icmp sle i64 %idx, %8
  br i1 %9, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %10 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 -1)
  %11 = call %Array* @__quantum__rt__array_copy(%Array* %10, i1 false)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 %idx)
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 4
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %array, i64 %14)
  %16 = bitcast i8* %15 to %Qubit**
  %17 = load %Qubit*, %Qubit** %16, align 8
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %11, i64 %idx)
  %19 = bitcast i8* %18 to %Qubit**
  store %Qubit* %17, %Qubit** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  store %Array* %11, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %20 = add i64 %idx, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %21 = load %Array*, %Array** %sliced, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %array, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 -1)
  ret %Array* %21
}

define internal %Array* @Microsoft__Quantum__Arrays___adb2a296981c4a2d96406d8c86526db8_ConstantArray__body(i64 %length, i2 %value) {
entry:
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %length)
  %1 = sub i64 %length, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %6, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 %2)
  %5 = bitcast i8* %4 to i2*
  store i2 %value, i2* %5, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %6 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  ret %Array* %0
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWigner0123Term_____body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %v0123 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = load %Range, %Range* @EmptyRange, align 4
  %8 = insertvalue %Range %7, i64 0, 0
  %9 = insertvalue %Range %8, i64 1, 1
  %10 = insertvalue %Range %9, i64 1, 2
  %11 = call %Array* @__quantum__rt__array_slice_1d(%Array* %idxFermions, %Range %10, i1 true)
  %qubitsPQ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %11, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 1)
  %12 = load %Range, %Range* @EmptyRange, align 4
  %13 = insertvalue %Range %12, i64 2, 0
  %14 = insertvalue %Range %13, i64 1, 1
  %15 = insertvalue %Range %14, i64 3, 2
  %16 = call %Array* @__quantum__rt__array_slice_1d(%Array* %idxFermions, %Range %15, i1 true)
  %qubitsRS = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %16, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRS, i32 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %18, align 4
  %20 = add i64 %19, 1
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 4
  %24 = sub i64 %23, 1
  %25 = load %Range, %Range* @EmptyRange, align 4
  %26 = insertvalue %Range %25, i64 %20, 0
  %27 = insertvalue %Range %26, i64 1, 1
  %28 = insertvalue %Range %27, i64 %24, 2
  %qubitsPQJW = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %28, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQJW, i32 1)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 4
  %32 = add i64 %31, 1
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 4
  %36 = sub i64 %35, 1
  %37 = load %Range, %Range* @EmptyRange, align 4
  %38 = insertvalue %Range %37, i64 %32, 0
  %39 = insertvalue %Range %38, i64 1, 1
  %40 = insertvalue %Range %39, i64 %36, 2
  %qubitsRSJW = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %40, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRSJW, i32 1)
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %42 = bitcast i8* %41 to %Array**
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %44 = bitcast i8* %43 to %Array**
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 2)
  %46 = bitcast i8* %45 to %Array**
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 3)
  %48 = bitcast i8* %47 to %Array**
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 4)
  %50 = bitcast i8* %49 to %Array**
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 5)
  %52 = bitcast i8* %51 to %Array**
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 6)
  %54 = bitcast i8* %53 to %Array**
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 7)
  %56 = bitcast i8* %55 to %Array**
  %57 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 0)
  %59 = bitcast i8* %58 to i2*
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 1)
  %61 = bitcast i8* %60 to i2*
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 2)
  %63 = bitcast i8* %62 to i2*
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 3)
  %65 = bitcast i8* %64 to i2*
  %66 = load i2, i2* @PauliX, align 1
  %67 = load i2, i2* @PauliX, align 1
  %68 = load i2, i2* @PauliX, align 1
  %69 = load i2, i2* @PauliX, align 1
  store i2 %66, i2* %59, align 1
  store i2 %67, i2* %61, align 1
  store i2 %68, i2* %63, align 1
  store i2 %69, i2* %65, align 1
  %70 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %70, i64 0)
  %72 = bitcast i8* %71 to i2*
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %70, i64 1)
  %74 = bitcast i8* %73 to i2*
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %70, i64 2)
  %76 = bitcast i8* %75 to i2*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %70, i64 3)
  %78 = bitcast i8* %77 to i2*
  %79 = load i2, i2* @PauliX, align 1
  %80 = load i2, i2* @PauliX, align 1
  %81 = load i2, i2* @PauliY, align 1
  %82 = load i2, i2* @PauliY, align 1
  store i2 %79, i2* %72, align 1
  store i2 %80, i2* %74, align 1
  store i2 %81, i2* %76, align 1
  store i2 %82, i2* %78, align 1
  %83 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 0)
  %85 = bitcast i8* %84 to i2*
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 1)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 2)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 3)
  %91 = bitcast i8* %90 to i2*
  %92 = load i2, i2* @PauliX, align 1
  %93 = load i2, i2* @PauliY, align 1
  %94 = load i2, i2* @PauliX, align 1
  %95 = load i2, i2* @PauliY, align 1
  store i2 %92, i2* %85, align 1
  store i2 %93, i2* %87, align 1
  store i2 %94, i2* %89, align 1
  store i2 %95, i2* %91, align 1
  %96 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 0)
  %98 = bitcast i8* %97 to i2*
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 1)
  %100 = bitcast i8* %99 to i2*
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 2)
  %102 = bitcast i8* %101 to i2*
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 3)
  %104 = bitcast i8* %103 to i2*
  %105 = load i2, i2* @PauliY, align 1
  %106 = load i2, i2* @PauliX, align 1
  %107 = load i2, i2* @PauliX, align 1
  %108 = load i2, i2* @PauliY, align 1
  store i2 %105, i2* %98, align 1
  store i2 %106, i2* %100, align 1
  store i2 %107, i2* %102, align 1
  store i2 %108, i2* %104, align 1
  %109 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 0)
  %111 = bitcast i8* %110 to i2*
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 1)
  %113 = bitcast i8* %112 to i2*
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 2)
  %115 = bitcast i8* %114 to i2*
  %116 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 3)
  %117 = bitcast i8* %116 to i2*
  %118 = load i2, i2* @PauliY, align 1
  %119 = load i2, i2* @PauliY, align 1
  %120 = load i2, i2* @PauliY, align 1
  %121 = load i2, i2* @PauliY, align 1
  store i2 %118, i2* %111, align 1
  store i2 %119, i2* %113, align 1
  store i2 %120, i2* %115, align 1
  store i2 %121, i2* %117, align 1
  %122 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 0)
  %124 = bitcast i8* %123 to i2*
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 1)
  %126 = bitcast i8* %125 to i2*
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 2)
  %128 = bitcast i8* %127 to i2*
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 3)
  %130 = bitcast i8* %129 to i2*
  %131 = load i2, i2* @PauliY, align 1
  %132 = load i2, i2* @PauliY, align 1
  %133 = load i2, i2* @PauliX, align 1
  %134 = load i2, i2* @PauliX, align 1
  store i2 %131, i2* %124, align 1
  store i2 %132, i2* %126, align 1
  store i2 %133, i2* %128, align 1
  store i2 %134, i2* %130, align 1
  %135 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %136 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 0)
  %137 = bitcast i8* %136 to i2*
  %138 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 1)
  %139 = bitcast i8* %138 to i2*
  %140 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 2)
  %141 = bitcast i8* %140 to i2*
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 3)
  %143 = bitcast i8* %142 to i2*
  %144 = load i2, i2* @PauliY, align 1
  %145 = load i2, i2* @PauliX, align 1
  %146 = load i2, i2* @PauliY, align 1
  %147 = load i2, i2* @PauliX, align 1
  store i2 %144, i2* %137, align 1
  store i2 %145, i2* %139, align 1
  store i2 %146, i2* %141, align 1
  store i2 %147, i2* %143, align 1
  %148 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %149 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %148, i64 0)
  %150 = bitcast i8* %149 to i2*
  %151 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %148, i64 1)
  %152 = bitcast i8* %151 to i2*
  %153 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %148, i64 2)
  %154 = bitcast i8* %153 to i2*
  %155 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %148, i64 3)
  %156 = bitcast i8* %155 to i2*
  %157 = load i2, i2* @PauliX, align 1
  %158 = load i2, i2* @PauliY, align 1
  %159 = load i2, i2* @PauliY, align 1
  %160 = load i2, i2* @PauliX, align 1
  store i2 %157, i2* %150, align 1
  store i2 %158, i2* %152, align 1
  store i2 %159, i2* %154, align 1
  store i2 %160, i2* %156, align 1
  store %Array* %57, %Array** %42, align 8
  store %Array* %70, %Array** %44, align 8
  store %Array* %83, %Array** %46, align 8
  store %Array* %96, %Array** %48, align 8
  store %Array* %109, %Array** %50, align 8
  store %Array* %122, %Array** %52, align 8
  store %Array* %135, %Array** %54, align 8
  store %Array* %148, %Array** %56, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %161 = phi i64 [ 0, %entry ], [ %166, %exiting__1 ]
  %162 = icmp sle i64 %161, 7
  br i1 %162, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %163 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %161)
  %164 = bitcast i8* %163 to %Array**
  %165 = load %Array*, %Array** %164, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %165, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %166 = add i64 %161, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %167 = call %Range @Microsoft__Quantum__Arrays___d736693988d5429891cc61a8095b8ce7_IndexRange__body(%Array* %ops)
  %168 = extractvalue %Range %167, 0
  %169 = extractvalue %Range %167, 1
  %170 = extractvalue %Range %167, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %171 = icmp sgt i64 %169, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxOp = phi i64 [ %168, %preheader__1 ], [ %197, %exiting__2 ]
  %172 = icmp sle i64 %idxOp, %170
  %173 = icmp sge i64 %idxOp, %170
  %174 = select i1 %171, i1 %172, i1 %173
  br i1 %174, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %175 = srem i64 %idxOp, 4
  %176 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %v0123, i64 %175)
  %177 = bitcast i8* %176 to double*
  %178 = load double, double* %177, align 8
  %179 = call i1 @Microsoft__Quantum__Chemistry__IsNotZero__body(double %178)
  br i1 %179, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  %180 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %idxOp)
  %181 = bitcast i8* %180 to %Array**
  %182 = load %Array*, %Array** %181, align 8
  %183 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsPQJW)
  %184 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsRSJW)
  %185 = add i64 %183, %184
  %186 = load i2, i2* @PauliZ, align 1
  %187 = call %Array* @Microsoft__Quantum__Arrays___adb2a296981c4a2d96406d8c86526db8_ConstantArray__body(i64 %185, i2 %186)
  %188 = call %Array* @__quantum__rt__array_concatenate(%Array* %182, %Array* %187)
  call void @__quantum__rt__array_update_reference_count(%Array* %188, i32 1)
  %189 = srem i64 %idxOp, 4
  %190 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %v0123, i64 %189)
  %191 = bitcast i8* %190 to double*
  %192 = load double, double* %191, align 8
  %193 = fmul double %stepSize, %192
  %194 = call %Array* @__quantum__rt__array_concatenate(%Array* %qubitsPQ, %Array* %qubitsRS)
  call void @__quantum__rt__array_update_reference_count(%Array* %194, i32 1)
  %195 = call %Array* @__quantum__rt__array_concatenate(%Array* %194, %Array* %qubitsPQJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %195, i32 1)
  %196 = call %Array* @__quantum__rt__array_concatenate(%Array* %195, %Array* %qubitsRSJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %196, i32 1)
  call void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %188, double %193, %Array* %196)
  call void @__quantum__rt__array_update_reference_count(%Array* %187, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %188, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %188, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %194, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %194, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %195, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %195, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %196, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %196, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__2
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %197 = add i64 %idxOp, %169
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRS, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQJW, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRSJW, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %198 = phi i64 [ 0, %exit__2 ], [ %203, %exiting__3 ]
  %199 = icmp sle i64 %198, 7
  br i1 %199, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %200 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %198)
  %201 = bitcast i8* %200 to %Array**
  %202 = load %Array*, %Array** %201, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %202, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %203 = add i64 %198, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsRS, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQJW, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsRSJW, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %204 = phi i64 [ 0, %exit__3 ], [ %209, %exiting__4 ]
  %205 = icmp sle i64 %204, 7
  br i1 %205, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %206 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %204)
  %207 = bitcast i8* %206 to %Array**
  %208 = load %Array*, %Array** %207, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %208, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %209 = add i64 %204, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  ret void
}

define internal i1 @Microsoft__Quantum__Chemistry__IsNotZero__body(double %number) {
entry:
  %0 = call double @Microsoft__Quantum__Math__AbsD__body(double %number)
  %1 = call double @Microsoft__Quantum__Math__PowD__body(double 1.000000e+01, double -1.500000e+01)
  %2 = fcmp ogt double %0, %1
  ret i1 %2
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWigner0123Term_____adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__v0123__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = load %Range, %Range* @EmptyRange, align 4
  %8 = insertvalue %Range %7, i64 0, 0
  %9 = insertvalue %Range %8, i64 1, 1
  %10 = insertvalue %Range %9, i64 1, 2
  %11 = call %Array* @__quantum__rt__array_slice_1d(%Array* %__qsVar2__idxFermions__, %Range %10, i1 true)
  %__qsVar4__qubitsPQ__ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %11, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 1)
  %12 = load %Range, %Range* @EmptyRange, align 4
  %13 = insertvalue %Range %12, i64 2, 0
  %14 = insertvalue %Range %13, i64 1, 1
  %15 = insertvalue %Range %14, i64 3, 2
  %16 = call %Array* @__quantum__rt__array_slice_1d(%Array* %__qsVar2__idxFermions__, %Range %15, i1 true)
  %__qsVar5__qubitsRS__ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %16, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsRS__, i32 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %18, align 4
  %20 = add i64 %19, 1
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 4
  %24 = sub i64 %23, 1
  %25 = load %Range, %Range* @EmptyRange, align 4
  %26 = insertvalue %Range %25, i64 %20, 0
  %27 = insertvalue %Range %26, i64 1, 1
  %28 = insertvalue %Range %27, i64 %24, 2
  %__qsVar6__qubitsPQJW__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %28, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__qubitsPQJW__, i32 1)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 4
  %32 = add i64 %31, 1
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 4
  %36 = sub i64 %35, 1
  %37 = load %Range, %Range* @EmptyRange, align 4
  %38 = insertvalue %Range %37, i64 %32, 0
  %39 = insertvalue %Range %38, i64 1, 1
  %40 = insertvalue %Range %39, i64 %36, 2
  %__qsVar7__qubitsRSJW__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %40, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__qubitsRSJW__, i32 1)
  %__qsVar8__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 0)
  %42 = bitcast i8* %41 to %Array**
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 1)
  %44 = bitcast i8* %43 to %Array**
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 2)
  %46 = bitcast i8* %45 to %Array**
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 3)
  %48 = bitcast i8* %47 to %Array**
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 4)
  %50 = bitcast i8* %49 to %Array**
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 5)
  %52 = bitcast i8* %51 to %Array**
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 6)
  %54 = bitcast i8* %53 to %Array**
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 7)
  %56 = bitcast i8* %55 to %Array**
  %57 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 0)
  %59 = bitcast i8* %58 to i2*
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 1)
  %61 = bitcast i8* %60 to i2*
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 2)
  %63 = bitcast i8* %62 to i2*
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 3)
  %65 = bitcast i8* %64 to i2*
  %66 = load i2, i2* @PauliX, align 1
  %67 = load i2, i2* @PauliX, align 1
  %68 = load i2, i2* @PauliX, align 1
  %69 = load i2, i2* @PauliX, align 1
  store i2 %66, i2* %59, align 1
  store i2 %67, i2* %61, align 1
  store i2 %68, i2* %63, align 1
  store i2 %69, i2* %65, align 1
  %70 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %70, i64 0)
  %72 = bitcast i8* %71 to i2*
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %70, i64 1)
  %74 = bitcast i8* %73 to i2*
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %70, i64 2)
  %76 = bitcast i8* %75 to i2*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %70, i64 3)
  %78 = bitcast i8* %77 to i2*
  %79 = load i2, i2* @PauliX, align 1
  %80 = load i2, i2* @PauliX, align 1
  %81 = load i2, i2* @PauliY, align 1
  %82 = load i2, i2* @PauliY, align 1
  store i2 %79, i2* %72, align 1
  store i2 %80, i2* %74, align 1
  store i2 %81, i2* %76, align 1
  store i2 %82, i2* %78, align 1
  %83 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 0)
  %85 = bitcast i8* %84 to i2*
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 1)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 2)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 3)
  %91 = bitcast i8* %90 to i2*
  %92 = load i2, i2* @PauliX, align 1
  %93 = load i2, i2* @PauliY, align 1
  %94 = load i2, i2* @PauliX, align 1
  %95 = load i2, i2* @PauliY, align 1
  store i2 %92, i2* %85, align 1
  store i2 %93, i2* %87, align 1
  store i2 %94, i2* %89, align 1
  store i2 %95, i2* %91, align 1
  %96 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 0)
  %98 = bitcast i8* %97 to i2*
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 1)
  %100 = bitcast i8* %99 to i2*
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 2)
  %102 = bitcast i8* %101 to i2*
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 3)
  %104 = bitcast i8* %103 to i2*
  %105 = load i2, i2* @PauliY, align 1
  %106 = load i2, i2* @PauliX, align 1
  %107 = load i2, i2* @PauliX, align 1
  %108 = load i2, i2* @PauliY, align 1
  store i2 %105, i2* %98, align 1
  store i2 %106, i2* %100, align 1
  store i2 %107, i2* %102, align 1
  store i2 %108, i2* %104, align 1
  %109 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %110 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 0)
  %111 = bitcast i8* %110 to i2*
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 1)
  %113 = bitcast i8* %112 to i2*
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 2)
  %115 = bitcast i8* %114 to i2*
  %116 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %109, i64 3)
  %117 = bitcast i8* %116 to i2*
  %118 = load i2, i2* @PauliY, align 1
  %119 = load i2, i2* @PauliY, align 1
  %120 = load i2, i2* @PauliY, align 1
  %121 = load i2, i2* @PauliY, align 1
  store i2 %118, i2* %111, align 1
  store i2 %119, i2* %113, align 1
  store i2 %120, i2* %115, align 1
  store i2 %121, i2* %117, align 1
  %122 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 0)
  %124 = bitcast i8* %123 to i2*
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 1)
  %126 = bitcast i8* %125 to i2*
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 2)
  %128 = bitcast i8* %127 to i2*
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 3)
  %130 = bitcast i8* %129 to i2*
  %131 = load i2, i2* @PauliY, align 1
  %132 = load i2, i2* @PauliY, align 1
  %133 = load i2, i2* @PauliX, align 1
  %134 = load i2, i2* @PauliX, align 1
  store i2 %131, i2* %124, align 1
  store i2 %132, i2* %126, align 1
  store i2 %133, i2* %128, align 1
  store i2 %134, i2* %130, align 1
  %135 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %136 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 0)
  %137 = bitcast i8* %136 to i2*
  %138 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 1)
  %139 = bitcast i8* %138 to i2*
  %140 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 2)
  %141 = bitcast i8* %140 to i2*
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 3)
  %143 = bitcast i8* %142 to i2*
  %144 = load i2, i2* @PauliY, align 1
  %145 = load i2, i2* @PauliX, align 1
  %146 = load i2, i2* @PauliY, align 1
  %147 = load i2, i2* @PauliX, align 1
  store i2 %144, i2* %137, align 1
  store i2 %145, i2* %139, align 1
  store i2 %146, i2* %141, align 1
  store i2 %147, i2* %143, align 1
  %148 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %149 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %148, i64 0)
  %150 = bitcast i8* %149 to i2*
  %151 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %148, i64 1)
  %152 = bitcast i8* %151 to i2*
  %153 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %148, i64 2)
  %154 = bitcast i8* %153 to i2*
  %155 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %148, i64 3)
  %156 = bitcast i8* %155 to i2*
  %157 = load i2, i2* @PauliX, align 1
  %158 = load i2, i2* @PauliY, align 1
  %159 = load i2, i2* @PauliY, align 1
  %160 = load i2, i2* @PauliX, align 1
  store i2 %157, i2* %150, align 1
  store i2 %158, i2* %152, align 1
  store i2 %159, i2* %154, align 1
  store i2 %160, i2* %156, align 1
  store %Array* %57, %Array** %42, align 8
  store %Array* %70, %Array** %44, align 8
  store %Array* %83, %Array** %46, align 8
  store %Array* %96, %Array** %48, align 8
  store %Array* %109, %Array** %50, align 8
  store %Array* %122, %Array** %52, align 8
  store %Array* %135, %Array** %54, align 8
  store %Array* %148, %Array** %56, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %161 = phi i64 [ 0, %entry ], [ %166, %exiting__1 ]
  %162 = icmp sle i64 %161, 7
  br i1 %162, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %163 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %161)
  %164 = bitcast i8* %163 to %Array**
  %165 = load %Array*, %Array** %164, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %165, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %166 = add i64 %161, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__ops__, i32 1)
  %167 = call %Range @Microsoft__Quantum__Arrays___d736693988d5429891cc61a8095b8ce7_IndexRange__body(%Array* %__qsVar8__ops__)
  %168 = extractvalue %Range %167, 0
  %169 = extractvalue %Range %167, 1
  %170 = extractvalue %Range %167, 2
  %171 = sub i64 %170, %168
  %172 = sdiv i64 %171, %169
  %173 = mul i64 %169, %172
  %174 = add i64 %168, %173
  %175 = sub i64 0, %169
  %176 = load %Range, %Range* @EmptyRange, align 4
  %177 = insertvalue %Range %176, i64 %174, 0
  %178 = insertvalue %Range %177, i64 %175, 1
  %179 = insertvalue %Range %178, i64 %168, 2
  %180 = extractvalue %Range %179, 0
  %181 = extractvalue %Range %179, 1
  %182 = extractvalue %Range %179, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %183 = icmp sgt i64 %181, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar9__idxOp__ = phi i64 [ %180, %preheader__1 ], [ %209, %exiting__2 ]
  %184 = icmp sle i64 %__qsVar9__idxOp__, %182
  %185 = icmp sge i64 %__qsVar9__idxOp__, %182
  %186 = select i1 %183, i1 %184, i1 %185
  br i1 %186, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %187 = srem i64 %__qsVar9__idxOp__, 4
  %188 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__v0123__, i64 %187)
  %189 = bitcast i8* %188 to double*
  %190 = load double, double* %189, align 8
  %191 = call i1 @Microsoft__Quantum__Chemistry__IsNotZero__body(double %190)
  br i1 %191, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %__qsVar9__idxOp__)
  %193 = bitcast i8* %192 to %Array**
  %194 = load %Array*, %Array** %193, align 8
  %195 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar6__qubitsPQJW__)
  %196 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar7__qubitsRSJW__)
  %197 = add i64 %195, %196
  %198 = load i2, i2* @PauliZ, align 1
  %199 = call %Array* @Microsoft__Quantum__Arrays___adb2a296981c4a2d96406d8c86526db8_ConstantArray__body(i64 %197, i2 %198)
  %200 = call %Array* @__quantum__rt__array_concatenate(%Array* %194, %Array* %199)
  call void @__quantum__rt__array_update_reference_count(%Array* %200, i32 1)
  %201 = srem i64 %__qsVar9__idxOp__, 4
  %202 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__v0123__, i64 %201)
  %203 = bitcast i8* %202 to double*
  %204 = load double, double* %203, align 8
  %205 = fmul double %stepSize, %204
  %206 = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar4__qubitsPQ__, %Array* %__qsVar5__qubitsRS__)
  call void @__quantum__rt__array_update_reference_count(%Array* %206, i32 1)
  %207 = call %Array* @__quantum__rt__array_concatenate(%Array* %206, %Array* %__qsVar6__qubitsPQJW__)
  call void @__quantum__rt__array_update_reference_count(%Array* %207, i32 1)
  %208 = call %Array* @__quantum__rt__array_concatenate(%Array* %207, %Array* %__qsVar7__qubitsRSJW__)
  call void @__quantum__rt__array_update_reference_count(%Array* %208, i32 1)
  call void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %200, double %205, %Array* %208)
  call void @__quantum__rt__array_update_reference_count(%Array* %199, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %200, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %200, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %206, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %206, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %207, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %207, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %208, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %208, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__2
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %209 = add i64 %__qsVar9__idxOp__, %181
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsRS__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__qubitsPQJW__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__qubitsRSJW__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %210 = phi i64 [ 0, %exit__2 ], [ %215, %exiting__3 ]
  %211 = icmp sle i64 %210, 7
  br i1 %211, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %212 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %210)
  %213 = bitcast i8* %212 to %Array**
  %214 = load %Array*, %Array** %213, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %214, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %215 = add i64 %210, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar5__qubitsRS__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__qubitsPQJW__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__qubitsRSJW__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %216 = phi i64 [ 0, %exit__3 ], [ %221, %exiting__4 ]
  %217 = icmp sle i64 %216, 7
  br i1 %217, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %218 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %216)
  %219 = bitcast i8* %218 to %Array**
  %220 = load %Array*, %Array** %219, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %220, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %221 = add i64 %216, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar8__ops__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWigner0123Term_____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %v0123 = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = load %Range, %Range* @EmptyRange, align 4
  %12 = insertvalue %Range %11, i64 0, 0
  %13 = insertvalue %Range %12, i64 1, 1
  %14 = insertvalue %Range %13, i64 1, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %idxFermions, %Range %14, i1 true)
  %qubitsPQ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %15, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 1)
  %16 = load %Range, %Range* @EmptyRange, align 4
  %17 = insertvalue %Range %16, i64 2, 0
  %18 = insertvalue %Range %17, i64 1, 1
  %19 = insertvalue %Range %18, i64 3, 2
  %20 = call %Array* @__quantum__rt__array_slice_1d(%Array* %idxFermions, %Range %19, i1 true)
  %qubitsRS = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %20, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRS, i32 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 4
  %24 = add i64 %23, 1
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 4
  %28 = sub i64 %27, 1
  %29 = load %Range, %Range* @EmptyRange, align 4
  %30 = insertvalue %Range %29, i64 %24, 0
  %31 = insertvalue %Range %30, i64 1, 1
  %32 = insertvalue %Range %31, i64 %28, 2
  %qubitsPQJW = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %32, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQJW, i32 1)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 4
  %36 = add i64 %35, 1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 4
  %40 = sub i64 %39, 1
  %41 = load %Range, %Range* @EmptyRange, align 4
  %42 = insertvalue %Range %41, i64 %36, 0
  %43 = insertvalue %Range %42, i64 1, 1
  %44 = insertvalue %Range %43, i64 %40, 2
  %qubitsRSJW = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %44, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRSJW, i32 1)
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %46 = bitcast i8* %45 to %Array**
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %48 = bitcast i8* %47 to %Array**
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 2)
  %50 = bitcast i8* %49 to %Array**
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 3)
  %52 = bitcast i8* %51 to %Array**
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 4)
  %54 = bitcast i8* %53 to %Array**
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 5)
  %56 = bitcast i8* %55 to %Array**
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 6)
  %58 = bitcast i8* %57 to %Array**
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 7)
  %60 = bitcast i8* %59 to %Array**
  %61 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 0)
  %63 = bitcast i8* %62 to i2*
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 1)
  %65 = bitcast i8* %64 to i2*
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 2)
  %67 = bitcast i8* %66 to i2*
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 3)
  %69 = bitcast i8* %68 to i2*
  %70 = load i2, i2* @PauliX, align 1
  %71 = load i2, i2* @PauliX, align 1
  %72 = load i2, i2* @PauliX, align 1
  %73 = load i2, i2* @PauliX, align 1
  store i2 %70, i2* %63, align 1
  store i2 %71, i2* %65, align 1
  store i2 %72, i2* %67, align 1
  store i2 %73, i2* %69, align 1
  %74 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 0)
  %76 = bitcast i8* %75 to i2*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 1)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 2)
  %80 = bitcast i8* %79 to i2*
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 3)
  %82 = bitcast i8* %81 to i2*
  %83 = load i2, i2* @PauliX, align 1
  %84 = load i2, i2* @PauliX, align 1
  %85 = load i2, i2* @PauliY, align 1
  %86 = load i2, i2* @PauliY, align 1
  store i2 %83, i2* %76, align 1
  store i2 %84, i2* %78, align 1
  store i2 %85, i2* %80, align 1
  store i2 %86, i2* %82, align 1
  %87 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 0)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 1)
  %91 = bitcast i8* %90 to i2*
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 2)
  %93 = bitcast i8* %92 to i2*
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 3)
  %95 = bitcast i8* %94 to i2*
  %96 = load i2, i2* @PauliX, align 1
  %97 = load i2, i2* @PauliY, align 1
  %98 = load i2, i2* @PauliX, align 1
  %99 = load i2, i2* @PauliY, align 1
  store i2 %96, i2* %89, align 1
  store i2 %97, i2* %91, align 1
  store i2 %98, i2* %93, align 1
  store i2 %99, i2* %95, align 1
  %100 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 0)
  %102 = bitcast i8* %101 to i2*
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 1)
  %104 = bitcast i8* %103 to i2*
  %105 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 2)
  %106 = bitcast i8* %105 to i2*
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 3)
  %108 = bitcast i8* %107 to i2*
  %109 = load i2, i2* @PauliY, align 1
  %110 = load i2, i2* @PauliX, align 1
  %111 = load i2, i2* @PauliX, align 1
  %112 = load i2, i2* @PauliY, align 1
  store i2 %109, i2* %102, align 1
  store i2 %110, i2* %104, align 1
  store i2 %111, i2* %106, align 1
  store i2 %112, i2* %108, align 1
  %113 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 0)
  %115 = bitcast i8* %114 to i2*
  %116 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 1)
  %117 = bitcast i8* %116 to i2*
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 2)
  %119 = bitcast i8* %118 to i2*
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 3)
  %121 = bitcast i8* %120 to i2*
  %122 = load i2, i2* @PauliY, align 1
  %123 = load i2, i2* @PauliY, align 1
  %124 = load i2, i2* @PauliY, align 1
  %125 = load i2, i2* @PauliY, align 1
  store i2 %122, i2* %115, align 1
  store i2 %123, i2* %117, align 1
  store i2 %124, i2* %119, align 1
  store i2 %125, i2* %121, align 1
  %126 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 0)
  %128 = bitcast i8* %127 to i2*
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 1)
  %130 = bitcast i8* %129 to i2*
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 2)
  %132 = bitcast i8* %131 to i2*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 3)
  %134 = bitcast i8* %133 to i2*
  %135 = load i2, i2* @PauliY, align 1
  %136 = load i2, i2* @PauliY, align 1
  %137 = load i2, i2* @PauliX, align 1
  %138 = load i2, i2* @PauliX, align 1
  store i2 %135, i2* %128, align 1
  store i2 %136, i2* %130, align 1
  store i2 %137, i2* %132, align 1
  store i2 %138, i2* %134, align 1
  %139 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %140 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 0)
  %141 = bitcast i8* %140 to i2*
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 1)
  %143 = bitcast i8* %142 to i2*
  %144 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 2)
  %145 = bitcast i8* %144 to i2*
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 3)
  %147 = bitcast i8* %146 to i2*
  %148 = load i2, i2* @PauliY, align 1
  %149 = load i2, i2* @PauliX, align 1
  %150 = load i2, i2* @PauliY, align 1
  %151 = load i2, i2* @PauliX, align 1
  store i2 %148, i2* %141, align 1
  store i2 %149, i2* %143, align 1
  store i2 %150, i2* %145, align 1
  store i2 %151, i2* %147, align 1
  %152 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %153 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %152, i64 0)
  %154 = bitcast i8* %153 to i2*
  %155 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %152, i64 1)
  %156 = bitcast i8* %155 to i2*
  %157 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %152, i64 2)
  %158 = bitcast i8* %157 to i2*
  %159 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %152, i64 3)
  %160 = bitcast i8* %159 to i2*
  %161 = load i2, i2* @PauliX, align 1
  %162 = load i2, i2* @PauliY, align 1
  %163 = load i2, i2* @PauliY, align 1
  %164 = load i2, i2* @PauliX, align 1
  store i2 %161, i2* %154, align 1
  store i2 %162, i2* %156, align 1
  store i2 %163, i2* %158, align 1
  store i2 %164, i2* %160, align 1
  store %Array* %61, %Array** %46, align 8
  store %Array* %74, %Array** %48, align 8
  store %Array* %87, %Array** %50, align 8
  store %Array* %100, %Array** %52, align 8
  store %Array* %113, %Array** %54, align 8
  store %Array* %126, %Array** %56, align 8
  store %Array* %139, %Array** %58, align 8
  store %Array* %152, %Array** %60, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %165 = phi i64 [ 0, %entry ], [ %170, %exiting__1 ]
  %166 = icmp sle i64 %165, 7
  br i1 %166, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %167 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %165)
  %168 = bitcast i8* %167 to %Array**
  %169 = load %Array*, %Array** %168, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %169, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %170 = add i64 %165, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %171 = call %Range @Microsoft__Quantum__Arrays___d736693988d5429891cc61a8095b8ce7_IndexRange__body(%Array* %ops)
  %172 = extractvalue %Range %171, 0
  %173 = extractvalue %Range %171, 1
  %174 = extractvalue %Range %171, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %175 = icmp sgt i64 %173, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %idxOp = phi i64 [ %172, %preheader__1 ], [ %206, %exiting__2 ]
  %176 = icmp sle i64 %idxOp, %174
  %177 = icmp sge i64 %idxOp, %174
  %178 = select i1 %175, i1 %176, i1 %177
  br i1 %178, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %179 = srem i64 %idxOp, 4
  %180 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %v0123, i64 %179)
  %181 = bitcast i8* %180 to double*
  %182 = load double, double* %181, align 8
  %183 = call i1 @Microsoft__Quantum__Chemistry__IsNotZero__body(double %182)
  br i1 %183, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  %184 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %185 = bitcast %Tuple* %184 to { %Array*, double, %Array* }*
  %186 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %185, i32 0, i32 0
  %187 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %185, i32 0, i32 1
  %188 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %185, i32 0, i32 2
  %189 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %idxOp)
  %190 = bitcast i8* %189 to %Array**
  %191 = load %Array*, %Array** %190, align 8
  %192 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsPQJW)
  %193 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsRSJW)
  %194 = add i64 %192, %193
  %195 = load i2, i2* @PauliZ, align 1
  %196 = call %Array* @Microsoft__Quantum__Arrays___adb2a296981c4a2d96406d8c86526db8_ConstantArray__body(i64 %194, i2 %195)
  %197 = call %Array* @__quantum__rt__array_concatenate(%Array* %191, %Array* %196)
  call void @__quantum__rt__array_update_reference_count(%Array* %197, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %196, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %197, i32 -1)
  %198 = srem i64 %idxOp, 4
  %199 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %v0123, i64 %198)
  %200 = bitcast i8* %199 to double*
  %201 = load double, double* %200, align 8
  %202 = fmul double %stepSize, %201
  %203 = call %Array* @__quantum__rt__array_concatenate(%Array* %qubitsPQ, %Array* %qubitsRS)
  call void @__quantum__rt__array_update_reference_count(%Array* %203, i32 1)
  %204 = call %Array* @__quantum__rt__array_concatenate(%Array* %203, %Array* %qubitsPQJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %204, i32 1)
  %205 = call %Array* @__quantum__rt__array_concatenate(%Array* %204, %Array* %qubitsRSJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %205, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %203, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %203, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %204, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %204, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %205, i32 -1)
  store %Array* %197, %Array** %186, align 8
  store double %202, double* %187, align 8
  store %Array* %205, %Array** %188, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %185)
  call void @__quantum__rt__array_update_reference_count(%Array* %197, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %205, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %184, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__2
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %206 = add i64 %idxOp, %173
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %v0123, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRS, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQJW, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsRSJW, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %207 = phi i64 [ 0, %exit__2 ], [ %212, %exiting__3 ]
  %208 = icmp sle i64 %207, 7
  br i1 %208, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %209 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %207)
  %210 = bitcast i8* %209 to %Array**
  %211 = load %Array*, %Array** %210, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %211, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %212 = add i64 %207, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsRS, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQJW, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsRSJW, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %213 = phi i64 [ 0, %exit__3 ], [ %218, %exiting__4 ]
  %214 = icmp sle i64 %213, 7
  br i1 %214, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %215 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %213)
  %216 = bitcast i8* %215 to %Array**
  %217 = load %Array*, %Array** %216, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %217, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %218 = add i64 %213, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWigner0123Term_____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__v0123__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = load %Range, %Range* @EmptyRange, align 4
  %12 = insertvalue %Range %11, i64 0, 0
  %13 = insertvalue %Range %12, i64 1, 1
  %14 = insertvalue %Range %13, i64 1, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %__qsVar2__idxFermions__, %Range %14, i1 true)
  %__qsVar4__qubitsPQ__ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %15, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 1)
  %16 = load %Range, %Range* @EmptyRange, align 4
  %17 = insertvalue %Range %16, i64 2, 0
  %18 = insertvalue %Range %17, i64 1, 1
  %19 = insertvalue %Range %18, i64 3, 2
  %20 = call %Array* @__quantum__rt__array_slice_1d(%Array* %__qsVar2__idxFermions__, %Range %19, i1 true)
  %__qsVar5__qubitsRS__ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %20, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsRS__, i32 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 4
  %24 = add i64 %23, 1
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 4
  %28 = sub i64 %27, 1
  %29 = load %Range, %Range* @EmptyRange, align 4
  %30 = insertvalue %Range %29, i64 %24, 0
  %31 = insertvalue %Range %30, i64 1, 1
  %32 = insertvalue %Range %31, i64 %28, 2
  %__qsVar6__qubitsPQJW__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %32, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__qubitsPQJW__, i32 1)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 4
  %36 = add i64 %35, 1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 4
  %40 = sub i64 %39, 1
  %41 = load %Range, %Range* @EmptyRange, align 4
  %42 = insertvalue %Range %41, i64 %36, 0
  %43 = insertvalue %Range %42, i64 1, 1
  %44 = insertvalue %Range %43, i64 %40, 2
  %__qsVar7__qubitsRSJW__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %44, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__qubitsRSJW__, i32 1)
  %__qsVar8__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 0)
  %46 = bitcast i8* %45 to %Array**
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 1)
  %48 = bitcast i8* %47 to %Array**
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 2)
  %50 = bitcast i8* %49 to %Array**
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 3)
  %52 = bitcast i8* %51 to %Array**
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 4)
  %54 = bitcast i8* %53 to %Array**
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 5)
  %56 = bitcast i8* %55 to %Array**
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 6)
  %58 = bitcast i8* %57 to %Array**
  %59 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 7)
  %60 = bitcast i8* %59 to %Array**
  %61 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 0)
  %63 = bitcast i8* %62 to i2*
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 1)
  %65 = bitcast i8* %64 to i2*
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 2)
  %67 = bitcast i8* %66 to i2*
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 3)
  %69 = bitcast i8* %68 to i2*
  %70 = load i2, i2* @PauliX, align 1
  %71 = load i2, i2* @PauliX, align 1
  %72 = load i2, i2* @PauliX, align 1
  %73 = load i2, i2* @PauliX, align 1
  store i2 %70, i2* %63, align 1
  store i2 %71, i2* %65, align 1
  store i2 %72, i2* %67, align 1
  store i2 %73, i2* %69, align 1
  %74 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 0)
  %76 = bitcast i8* %75 to i2*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 1)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 2)
  %80 = bitcast i8* %79 to i2*
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 3)
  %82 = bitcast i8* %81 to i2*
  %83 = load i2, i2* @PauliX, align 1
  %84 = load i2, i2* @PauliX, align 1
  %85 = load i2, i2* @PauliY, align 1
  %86 = load i2, i2* @PauliY, align 1
  store i2 %83, i2* %76, align 1
  store i2 %84, i2* %78, align 1
  store i2 %85, i2* %80, align 1
  store i2 %86, i2* %82, align 1
  %87 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 0)
  %89 = bitcast i8* %88 to i2*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 1)
  %91 = bitcast i8* %90 to i2*
  %92 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 2)
  %93 = bitcast i8* %92 to i2*
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 3)
  %95 = bitcast i8* %94 to i2*
  %96 = load i2, i2* @PauliX, align 1
  %97 = load i2, i2* @PauliY, align 1
  %98 = load i2, i2* @PauliX, align 1
  %99 = load i2, i2* @PauliY, align 1
  store i2 %96, i2* %89, align 1
  store i2 %97, i2* %91, align 1
  store i2 %98, i2* %93, align 1
  store i2 %99, i2* %95, align 1
  %100 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 0)
  %102 = bitcast i8* %101 to i2*
  %103 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 1)
  %104 = bitcast i8* %103 to i2*
  %105 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 2)
  %106 = bitcast i8* %105 to i2*
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 3)
  %108 = bitcast i8* %107 to i2*
  %109 = load i2, i2* @PauliY, align 1
  %110 = load i2, i2* @PauliX, align 1
  %111 = load i2, i2* @PauliX, align 1
  %112 = load i2, i2* @PauliY, align 1
  store i2 %109, i2* %102, align 1
  store i2 %110, i2* %104, align 1
  store i2 %111, i2* %106, align 1
  store i2 %112, i2* %108, align 1
  %113 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 0)
  %115 = bitcast i8* %114 to i2*
  %116 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 1)
  %117 = bitcast i8* %116 to i2*
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 2)
  %119 = bitcast i8* %118 to i2*
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 3)
  %121 = bitcast i8* %120 to i2*
  %122 = load i2, i2* @PauliY, align 1
  %123 = load i2, i2* @PauliY, align 1
  %124 = load i2, i2* @PauliY, align 1
  %125 = load i2, i2* @PauliY, align 1
  store i2 %122, i2* %115, align 1
  store i2 %123, i2* %117, align 1
  store i2 %124, i2* %119, align 1
  store i2 %125, i2* %121, align 1
  %126 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 0)
  %128 = bitcast i8* %127 to i2*
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 1)
  %130 = bitcast i8* %129 to i2*
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 2)
  %132 = bitcast i8* %131 to i2*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 3)
  %134 = bitcast i8* %133 to i2*
  %135 = load i2, i2* @PauliY, align 1
  %136 = load i2, i2* @PauliY, align 1
  %137 = load i2, i2* @PauliX, align 1
  %138 = load i2, i2* @PauliX, align 1
  store i2 %135, i2* %128, align 1
  store i2 %136, i2* %130, align 1
  store i2 %137, i2* %132, align 1
  store i2 %138, i2* %134, align 1
  %139 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %140 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 0)
  %141 = bitcast i8* %140 to i2*
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 1)
  %143 = bitcast i8* %142 to i2*
  %144 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 2)
  %145 = bitcast i8* %144 to i2*
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %139, i64 3)
  %147 = bitcast i8* %146 to i2*
  %148 = load i2, i2* @PauliY, align 1
  %149 = load i2, i2* @PauliX, align 1
  %150 = load i2, i2* @PauliY, align 1
  %151 = load i2, i2* @PauliX, align 1
  store i2 %148, i2* %141, align 1
  store i2 %149, i2* %143, align 1
  store i2 %150, i2* %145, align 1
  store i2 %151, i2* %147, align 1
  %152 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %153 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %152, i64 0)
  %154 = bitcast i8* %153 to i2*
  %155 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %152, i64 1)
  %156 = bitcast i8* %155 to i2*
  %157 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %152, i64 2)
  %158 = bitcast i8* %157 to i2*
  %159 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %152, i64 3)
  %160 = bitcast i8* %159 to i2*
  %161 = load i2, i2* @PauliX, align 1
  %162 = load i2, i2* @PauliY, align 1
  %163 = load i2, i2* @PauliY, align 1
  %164 = load i2, i2* @PauliX, align 1
  store i2 %161, i2* %154, align 1
  store i2 %162, i2* %156, align 1
  store i2 %163, i2* %158, align 1
  store i2 %164, i2* %160, align 1
  store %Array* %61, %Array** %46, align 8
  store %Array* %74, %Array** %48, align 8
  store %Array* %87, %Array** %50, align 8
  store %Array* %100, %Array** %52, align 8
  store %Array* %113, %Array** %54, align 8
  store %Array* %126, %Array** %56, align 8
  store %Array* %139, %Array** %58, align 8
  store %Array* %152, %Array** %60, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %165 = phi i64 [ 0, %entry ], [ %170, %exiting__1 ]
  %166 = icmp sle i64 %165, 7
  br i1 %166, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %167 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %165)
  %168 = bitcast i8* %167 to %Array**
  %169 = load %Array*, %Array** %168, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %169, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %170 = add i64 %165, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__ops__, i32 1)
  %171 = call %Range @Microsoft__Quantum__Arrays___d736693988d5429891cc61a8095b8ce7_IndexRange__body(%Array* %__qsVar8__ops__)
  %172 = extractvalue %Range %171, 0
  %173 = extractvalue %Range %171, 1
  %174 = extractvalue %Range %171, 2
  %175 = sub i64 %174, %172
  %176 = sdiv i64 %175, %173
  %177 = mul i64 %173, %176
  %178 = add i64 %172, %177
  %179 = sub i64 0, %173
  %180 = load %Range, %Range* @EmptyRange, align 4
  %181 = insertvalue %Range %180, i64 %178, 0
  %182 = insertvalue %Range %181, i64 %179, 1
  %183 = insertvalue %Range %182, i64 %172, 2
  %184 = extractvalue %Range %183, 0
  %185 = extractvalue %Range %183, 1
  %186 = extractvalue %Range %183, 2
  br label %preheader__1

preheader__1:                                     ; preds = %exit__1
  %187 = icmp sgt i64 %185, 0
  br label %header__2

header__2:                                        ; preds = %exiting__2, %preheader__1
  %__qsVar9__idxOp__ = phi i64 [ %184, %preheader__1 ], [ %218, %exiting__2 ]
  %188 = icmp sle i64 %__qsVar9__idxOp__, %186
  %189 = icmp sge i64 %__qsVar9__idxOp__, %186
  %190 = select i1 %187, i1 %188, i1 %189
  br i1 %190, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %191 = srem i64 %__qsVar9__idxOp__, 4
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__v0123__, i64 %191)
  %193 = bitcast i8* %192 to double*
  %194 = load double, double* %193, align 8
  %195 = call i1 @Microsoft__Quantum__Chemistry__IsNotZero__body(double %194)
  br i1 %195, label %then0__1, label %continue__1

then0__1:                                         ; preds = %body__2
  %196 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %197 = bitcast %Tuple* %196 to { %Array*, double, %Array* }*
  %198 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %197, i32 0, i32 0
  %199 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %197, i32 0, i32 1
  %200 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %197, i32 0, i32 2
  %201 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %__qsVar9__idxOp__)
  %202 = bitcast i8* %201 to %Array**
  %203 = load %Array*, %Array** %202, align 8
  %204 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar6__qubitsPQJW__)
  %205 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar7__qubitsRSJW__)
  %206 = add i64 %204, %205
  %207 = load i2, i2* @PauliZ, align 1
  %208 = call %Array* @Microsoft__Quantum__Arrays___adb2a296981c4a2d96406d8c86526db8_ConstantArray__body(i64 %206, i2 %207)
  %209 = call %Array* @__quantum__rt__array_concatenate(%Array* %203, %Array* %208)
  call void @__quantum__rt__array_update_reference_count(%Array* %209, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %208, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %209, i32 -1)
  %210 = srem i64 %__qsVar9__idxOp__, 4
  %211 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__v0123__, i64 %210)
  %212 = bitcast i8* %211 to double*
  %213 = load double, double* %212, align 8
  %214 = fmul double %stepSize, %213
  %215 = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar4__qubitsPQ__, %Array* %__qsVar5__qubitsRS__)
  call void @__quantum__rt__array_update_reference_count(%Array* %215, i32 1)
  %216 = call %Array* @__quantum__rt__array_concatenate(%Array* %215, %Array* %__qsVar6__qubitsPQJW__)
  call void @__quantum__rt__array_update_reference_count(%Array* %216, i32 1)
  %217 = call %Array* @__quantum__rt__array_concatenate(%Array* %216, %Array* %__qsVar7__qubitsRSJW__)
  call void @__quantum__rt__array_update_reference_count(%Array* %217, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %215, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %215, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %216, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %216, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %217, i32 -1)
  store %Array* %209, %Array** %198, align 8
  store double %214, double* %199, align 8
  store %Array* %217, %Array** %200, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %197)
  call void @__quantum__rt__array_update_reference_count(%Array* %209, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %217, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %196, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %body__2
  br label %exiting__2

exiting__2:                                       ; preds = %continue__1
  %218 = add i64 %__qsVar9__idxOp__, %185
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__v0123__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsRS__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__qubitsPQJW__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__qubitsRSJW__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %219 = phi i64 [ 0, %exit__2 ], [ %224, %exiting__3 ]
  %220 = icmp sle i64 %219, 7
  br i1 %220, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %221 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %219)
  %222 = bitcast i8* %221 to %Array**
  %223 = load %Array*, %Array** %222, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %223, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %224 = add i64 %219, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar5__qubitsRS__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__qubitsPQJW__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__qubitsRSJW__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %225 = phi i64 [ 0, %exit__3 ], [ %230, %exiting__4 ]
  %226 = icmp sle i64 %225, 7
  br i1 %226, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %227 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar8__ops__, i64 %225)
  %228 = bitcast i8* %227 to %Array**
  %229 = load %Array*, %Array** %228, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %229, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %230 = add i64 %225, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar8__ops__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQRSTerm____body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %8 = bitcast i8* %7 to i64*
  %p = load i64, i64* %8, align 4
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %10 = bitcast i8* %9 to i64*
  %q = load i64, i64* %10, align 4
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %12 = bitcast i8* %11 to i64*
  %r = load i64, i64* %12, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %14 = bitcast i8* %13 to i64*
  %s = load i64, i64* %14, align 4
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %16 = bitcast i8* %15 to double*
  %17 = load double, double* %16, align 8
  %18 = fmul double 1.250000e-01, %17
  %angle = fmul double %18, %stepSize
  %19 = icmp eq i64 %p, %q
  %20 = xor i1 %19, true
  br i1 %20, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %entry
  %21 = icmp eq i64 %p, %r
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %entry
  %22 = phi i1 [ %21, %condTrue__1 ], [ %19, %entry ]
  %23 = xor i1 %22, true
  br i1 %23, label %condTrue__2, label %condContinue__2

condTrue__2:                                      ; preds = %condContinue__1
  %24 = icmp eq i64 %p, %s
  br label %condContinue__2

condContinue__2:                                  ; preds = %condTrue__2, %condContinue__1
  %25 = phi i1 [ %24, %condTrue__2 ], [ %22, %condContinue__1 ]
  %26 = xor i1 %25, true
  br i1 %26, label %condTrue__3, label %condContinue__3

condTrue__3:                                      ; preds = %condContinue__2
  %27 = icmp eq i64 %q, %r
  br label %condContinue__3

condContinue__3:                                  ; preds = %condTrue__3, %condContinue__2
  %28 = phi i1 [ %27, %condTrue__3 ], [ %25, %condContinue__2 ]
  %29 = xor i1 %28, true
  br i1 %29, label %condTrue__4, label %condContinue__4

condTrue__4:                                      ; preds = %condContinue__3
  %30 = icmp eq i64 %q, %s
  br label %condContinue__4

condContinue__4:                                  ; preds = %condTrue__4, %condContinue__3
  %31 = phi i1 [ %30, %condTrue__4 ], [ %28, %condContinue__3 ]
  %32 = xor i1 %31, true
  br i1 %32, label %condTrue__5, label %condContinue__5

condTrue__5:                                      ; preds = %condContinue__4
  %33 = icmp eq i64 %r, %s
  br label %condContinue__5

condContinue__5:                                  ; preds = %condTrue__5, %condContinue__4
  %34 = phi i1 [ %33, %condTrue__5 ], [ %31, %condContinue__4 ]
  br i1 %34, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__5
  %35 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @46, i32 0, i32 0))
  %36 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %37 = call %String* @__quantum__rt__string_concatenate(%String* %35, %String* %36)
  call void @__quantum__rt__string_update_reference_count(%String* %35, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %36, i32 -1)
  %38 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %39 = call %String* @__quantum__rt__string_concatenate(%String* %37, %String* %38)
  call void @__quantum__rt__string_update_reference_count(%String* %37, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %38, i32 -1)
  %40 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %41 = call %String* @__quantum__rt__string_concatenate(%String* %39, %String* %40)
  call void @__quantum__rt__string_update_reference_count(%String* %39, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %40, i32 -1)
  %42 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %43 = call %String* @__quantum__rt__string_concatenate(%String* %41, %String* %42)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i32 -1)
  %44 = call %String* @__quantum__rt__int_to_string(i64 %r)
  %45 = call %String* @__quantum__rt__string_concatenate(%String* %43, %String* %44)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i32 -1)
  %46 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %47 = call %String* @__quantum__rt__string_concatenate(%String* %45, %String* %46)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %46, i32 -1)
  %48 = call %String* @__quantum__rt__int_to_string(i64 %s)
  %49 = call %String* @__quantum__rt__string_concatenate(%String* %47, %String* %48)
  call void @__quantum__rt__string_update_reference_count(%String* %47, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %48, i32 -1)
  %50 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @48, i32 0, i32 0))
  %51 = call %String* @__quantum__rt__string_concatenate(%String* %49, %String* %50)
  call void @__quantum__rt__string_update_reference_count(%String* %49, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %50, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__fail(%String* %51)
  unreachable

continue__1:                                      ; preds = %condContinue__5
  %x = load i2, i2* @PauliX, align 1
  %y = load i2, i2* @PauliY, align 1
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %53 = bitcast i8* %52 to %Array**
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %55 = bitcast i8* %54 to %Array**
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 2)
  %57 = bitcast i8* %56 to %Array**
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 3)
  %59 = bitcast i8* %58 to %Array**
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 4)
  %61 = bitcast i8* %60 to %Array**
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 5)
  %63 = bitcast i8* %62 to %Array**
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 6)
  %65 = bitcast i8* %64 to %Array**
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 7)
  %67 = bitcast i8* %66 to %Array**
  %68 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 0)
  %70 = bitcast i8* %69 to i2*
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 1)
  %72 = bitcast i8* %71 to i2*
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 2)
  %74 = bitcast i8* %73 to i2*
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 3)
  %76 = bitcast i8* %75 to i2*
  store i2 %y, i2* %70, align 1
  store i2 %y, i2* %72, align 1
  store i2 %x, i2* %74, align 1
  store i2 %y, i2* %76, align 1
  %77 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 0)
  %79 = bitcast i8* %78 to i2*
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 1)
  %81 = bitcast i8* %80 to i2*
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 2)
  %83 = bitcast i8* %82 to i2*
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 3)
  %85 = bitcast i8* %84 to i2*
  store i2 %x, i2* %79, align 1
  store i2 %x, i2* %81, align 1
  store i2 %x, i2* %83, align 1
  store i2 %y, i2* %85, align 1
  %86 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 0)
  %88 = bitcast i8* %87 to i2*
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 1)
  %90 = bitcast i8* %89 to i2*
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 2)
  %92 = bitcast i8* %91 to i2*
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 3)
  %94 = bitcast i8* %93 to i2*
  store i2 %x, i2* %88, align 1
  store i2 %y, i2* %90, align 1
  store i2 %y, i2* %92, align 1
  store i2 %y, i2* %94, align 1
  %95 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %95, i64 0)
  %97 = bitcast i8* %96 to i2*
  %98 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %95, i64 1)
  %99 = bitcast i8* %98 to i2*
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %95, i64 2)
  %101 = bitcast i8* %100 to i2*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %95, i64 3)
  %103 = bitcast i8* %102 to i2*
  store i2 %y, i2* %97, align 1
  store i2 %x, i2* %99, align 1
  store i2 %y, i2* %101, align 1
  store i2 %y, i2* %103, align 1
  %104 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %105 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 0)
  %106 = bitcast i8* %105 to i2*
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 1)
  %108 = bitcast i8* %107 to i2*
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 2)
  %110 = bitcast i8* %109 to i2*
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 3)
  %112 = bitcast i8* %111 to i2*
  store i2 %x, i2* %106, align 1
  store i2 %y, i2* %108, align 1
  store i2 %x, i2* %110, align 1
  store i2 %x, i2* %112, align 1
  %113 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 0)
  %115 = bitcast i8* %114 to i2*
  %116 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 1)
  %117 = bitcast i8* %116 to i2*
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 2)
  %119 = bitcast i8* %118 to i2*
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 3)
  %121 = bitcast i8* %120 to i2*
  store i2 %y, i2* %115, align 1
  store i2 %x, i2* %117, align 1
  store i2 %x, i2* %119, align 1
  store i2 %x, i2* %121, align 1
  %122 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 0)
  %124 = bitcast i8* %123 to i2*
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 1)
  %126 = bitcast i8* %125 to i2*
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 2)
  %128 = bitcast i8* %127 to i2*
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 3)
  %130 = bitcast i8* %129 to i2*
  store i2 %y, i2* %124, align 1
  store i2 %y, i2* %126, align 1
  store i2 %y, i2* %128, align 1
  store i2 %x, i2* %130, align 1
  %131 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %132 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %131, i64 0)
  %133 = bitcast i8* %132 to i2*
  %134 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %131, i64 1)
  %135 = bitcast i8* %134 to i2*
  %136 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %131, i64 2)
  %137 = bitcast i8* %136 to i2*
  %138 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %131, i64 3)
  %139 = bitcast i8* %138 to i2*
  store i2 %x, i2* %133, align 1
  store i2 %x, i2* %135, align 1
  store i2 %y, i2* %137, align 1
  store i2 %x, i2* %139, align 1
  store %Array* %68, %Array** %53, align 8
  store %Array* %77, %Array** %55, align 8
  store %Array* %86, %Array** %57, align 8
  store %Array* %95, %Array** %59, align 8
  store %Array* %104, %Array** %61, align 8
  store %Array* %113, %Array** %63, align 8
  store %Array* %122, %Array** %65, align 8
  store %Array* %131, %Array** %67, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %140 = phi i64 [ 0, %continue__1 ], [ %145, %exiting__1 ]
  %141 = icmp sle i64 %140, 7
  br i1 %141, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %140)
  %143 = bitcast i8* %142 to %Array**
  %144 = load %Array*, %Array** %143, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %144, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %145 = add i64 %140, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %146 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %147 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %146, i64 0)
  %148 = bitcast i8* %147 to i64*
  %149 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %146, i64 1)
  %150 = bitcast i8* %149 to i64*
  %151 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %146, i64 2)
  %152 = bitcast i8* %151 to i64*
  %153 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %146, i64 3)
  %154 = bitcast i8* %153 to i64*
  store i64 %p, i64* %148, align 4
  store i64 %q, i64* %150, align 4
  store i64 %r, i64* %152, align 4
  store i64 %s, i64* %154, align 4
  %155 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %146)
  %156 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %155, i32 0, i32 0
  %sortedIndices = load %Array*, %Array** %156, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %sortedIndices, i32 1)
  %157 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %155, i32 0, i32 1
  %signs = load %Array*, %Array** %157, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 1)
  %158 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %155, i32 0, i32 2
  %globalSign = load double, double* %158, align 8
  %159 = call %Array* @Microsoft__Quantum__Arrays___357bd2ab33e34755b61f70266c5f5077_Zipped__body(%Array* %ops, %Array* %signs)
  %160 = call i64 @__quantum__rt__array_get_size_1d(%Array* %159)
  %161 = sub i64 %160, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %162 = phi i64 [ 0, %exit__1 ], [ %172, %exiting__2 ]
  %163 = icmp sle i64 %162, %161
  br i1 %163, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %164 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %159, i64 %162)
  %165 = bitcast i8* %164 to { %Array*, double }**
  %166 = load { %Array*, double }*, { %Array*, double }** %165, align 8
  %167 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %166, i32 0, i32 0
  %op = load %Array*, %Array** %167, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 1)
  %168 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %166, i32 0, i32 1
  %sign = load double, double* %168, align 8
  %169 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %169, %Array* %sortedIndices, %Array* %op)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  %170 = fmul double %globalSign, %sign
  %171 = fmul double %170, %angle
  call void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %pauliString, double %171, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %172 = add i64 %162, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %173 = phi i64 [ 0, %exit__2 ], [ %178, %exiting__3 ]
  %174 = icmp sle i64 %173, 7
  br i1 %174, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %175 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %173)
  %176 = bitcast i8* %175 to %Array**
  %177 = load %Array*, %Array** %176, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %177, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %178 = add i64 %173, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %sortedIndices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %179 = phi i64 [ 0, %exit__3 ], [ %184, %exiting__4 ]
  %180 = icmp sle i64 %179, 7
  br i1 %180, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %181 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %179)
  %182 = bitcast i8* %181 to %Array**
  %183 = load %Array*, %Array** %182, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %183, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %184 = add i64 %179, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %146, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %sortedIndices, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %signs, i32 -1)
  %185 = bitcast { %Array*, %Array*, double }* %155 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %185, i32 -1)
  %186 = sub i64 %160, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %187 = phi i64 [ 0, %exit__4 ], [ %195, %exiting__5 ]
  %188 = icmp sle i64 %187, %186
  br i1 %188, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %189 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %159, i64 %187)
  %190 = bitcast i8* %189 to { %Array*, double }**
  %191 = load { %Array*, double }*, { %Array*, double }** %190, align 8
  %192 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %191, i32 0, i32 0
  %193 = load %Array*, %Array** %192, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %193, i32 -1)
  %194 = bitcast { %Array*, double }* %191 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %194, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %195 = add i64 %187, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %159, i32 -1)
  ret void
}

define internal { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %indices) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 1)
  %0 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 0)
  %1 = bitcast i8* %0 to i64*
  %p = load i64, i64* %1, align 4
  %2 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 1)
  %3 = bitcast i8* %2 to i64*
  %q = load i64, i64* %3, align 4
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 2)
  %5 = bitcast i8* %4 to i64*
  %r = load i64, i64* %5, align 4
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %indices, i64 3)
  %7 = bitcast i8* %6 to i64*
  %s = load i64, i64* %7, align 4
  %8 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %9 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %10 = icmp sle i64 %9, 3
  br i1 %10, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %8, i64 %9)
  %12 = bitcast i8* %11 to i64*
  store i64 0, i64* %12, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %9, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %sorted = alloca %Array*, align 8
  store %Array* %8, %Array** %sorted, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %14 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %16 = icmp sle i64 %15, 7
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %15)
  %18 = bitcast i8* %17 to double*
  store double 0.000000e+00, double* %18, align 8
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %signs = alloca %Array*, align 8
  store %Array* %14, %Array** %signs, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %sign = alloca double, align 8
  store double 1.000000e+00, double* %sign, align 8
  %20 = icmp sgt i64 %p, %q
  br i1 %20, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__2
  store double -1.000000e+00, double* %sign, align 8
  br label %continue__1

continue__1:                                      ; preds = %then0__1, %exit__2
  %21 = icmp sgt i64 %r, %s
  br i1 %21, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %22 = load double, double* %sign, align 8
  %23 = fmul double %22, -1.000000e+00
  store double %23, double* %sign, align 8
  br label %continue__2

continue__2:                                      ; preds = %then0__2, %continue__1
  %24 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 0)
  %26 = bitcast i8* %25 to i64*
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 1)
  %28 = bitcast i8* %27 to i64*
  store i64 %p, i64* %26, align 4
  store i64 %q, i64* %28, align 4
  %29 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %24)
  %30 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 0)
  %32 = bitcast i8* %31 to i64*
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %30, i64 1)
  %34 = bitcast i8* %33 to i64*
  store i64 %r, i64* %32, align 4
  store i64 %s, i64* %34, align 4
  %35 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %30)
  %36 = icmp sgt i64 %29, %35
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 -1)
  br i1 %36, label %then0__3, label %else__1

then0__3:                                         ; preds = %continue__2
  %37 = load double, double* %sign, align 8
  %38 = fmul double %37, -1.000000e+00
  store double %38, double* %sign, align 8
  %39 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 0)
  %41 = bitcast i8* %40 to i64*
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 1)
  %43 = bitcast i8* %42 to i64*
  %44 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 2)
  %45 = bitcast i8* %44 to i64*
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 3)
  %47 = bitcast i8* %46 to i64*
  %48 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %48, i64 0)
  %50 = bitcast i8* %49 to i64*
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %48, i64 1)
  %52 = bitcast i8* %51 to i64*
  store i64 %r, i64* %50, align 4
  store i64 %s, i64* %52, align 4
  %53 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %48)
  call void @__quantum__rt__array_update_reference_count(%Array* %48, i32 -1)
  %54 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %54, i64 0)
  %56 = bitcast i8* %55 to i64*
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %54, i64 1)
  %58 = bitcast i8* %57 to i64*
  store i64 %r, i64* %56, align 4
  store i64 %s, i64* %58, align 4
  %59 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %54)
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i32 -1)
  %60 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 0)
  %62 = bitcast i8* %61 to i64*
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 1)
  %64 = bitcast i8* %63 to i64*
  store i64 %p, i64* %62, align 4
  store i64 %q, i64* %64, align 4
  %65 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %60)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  %66 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %66, i64 0)
  %68 = bitcast i8* %67 to i64*
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %66, i64 1)
  %70 = bitcast i8* %69 to i64*
  store i64 %p, i64* %68, align 4
  store i64 %q, i64* %70, align 4
  %71 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %66)
  call void @__quantum__rt__array_update_reference_count(%Array* %66, i32 -1)
  store i64 %53, i64* %41, align 4
  store i64 %59, i64* %43, align 4
  store i64 %65, i64* %45, align 4
  store i64 %71, i64* %47, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 -1)
  store %Array* %39, %Array** %sorted, align 8
  br label %continue__3

else__1:                                          ; preds = %continue__2
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to i64*
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 1)
  %76 = bitcast i8* %75 to i64*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 2)
  %78 = bitcast i8* %77 to i64*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 3)
  %80 = bitcast i8* %79 to i64*
  %81 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 0)
  %83 = bitcast i8* %82 to i64*
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 1)
  %85 = bitcast i8* %84 to i64*
  store i64 %p, i64* %83, align 4
  store i64 %q, i64* %85, align 4
  %86 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %81)
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 -1)
  %87 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 0)
  %89 = bitcast i8* %88 to i64*
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %87, i64 1)
  %91 = bitcast i8* %90 to i64*
  store i64 %p, i64* %89, align 4
  store i64 %q, i64* %91, align 4
  %92 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %87)
  call void @__quantum__rt__array_update_reference_count(%Array* %87, i32 -1)
  %93 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %94 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %93, i64 0)
  %95 = bitcast i8* %94 to i64*
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %93, i64 1)
  %97 = bitcast i8* %96 to i64*
  store i64 %r, i64* %95, align 4
  store i64 %s, i64* %97, align 4
  %98 = call i64 @Microsoft__Quantum__Math__Min__body(%Array* %93)
  call void @__quantum__rt__array_update_reference_count(%Array* %93, i32 -1)
  %99 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 0)
  %101 = bitcast i8* %100 to i64*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 1)
  %103 = bitcast i8* %102 to i64*
  store i64 %r, i64* %101, align 4
  store i64 %s, i64* %103, align 4
  %104 = call i64 @Microsoft__Quantum__Math__Max__body(%Array* %99)
  call void @__quantum__rt__array_update_reference_count(%Array* %99, i32 -1)
  store i64 %86, i64* %74, align 4
  store i64 %92, i64* %76, align 4
  store i64 %98, i64* %78, align 4
  store i64 %104, i64* %80, align 4
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i32 1)
  %105 = load %Array*, %Array** %sorted, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %105, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %105, i32 -1)
  store %Array* %72, %Array** %sorted, align 8
  br label %continue__3

continue__3:                                      ; preds = %else__1, %then0__3
  %106 = load %Array*, %Array** %sorted, align 8
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 0)
  %108 = bitcast i8* %107 to i64*
  %p1 = load i64, i64* %108, align 4
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 1)
  %110 = bitcast i8* %109 to i64*
  %q1 = load i64, i64* %110, align 4
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 2)
  %112 = bitcast i8* %111 to i64*
  %r1 = load i64, i64* %112, align 4
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %106, i64 3)
  %114 = bitcast i8* %113 to i64*
  %s1 = load i64, i64* %114, align 4
  %115 = icmp slt i64 %q1, %r1
  br i1 %115, label %then0__4, label %test1__1

then0__4:                                         ; preds = %continue__3
  %116 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %117 = bitcast %Tuple* %116 to { %Array*, %Array*, double }*
  %118 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %117, i32 0, i32 0
  %119 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %117, i32 0, i32 1
  %120 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %117, i32 0, i32 2
  %121 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 0)
  %123 = bitcast i8* %122 to i64*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 1)
  %125 = bitcast i8* %124 to i64*
  %126 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 2)
  %127 = bitcast i8* %126 to i64*
  %128 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %121, i64 3)
  %129 = bitcast i8* %128 to i64*
  store i64 %p1, i64* %123, align 4
  store i64 %q1, i64* %125, align 4
  store i64 %r1, i64* %127, align 4
  store i64 %s1, i64* %129, align 4
  %130 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 0)
  %132 = bitcast i8* %131 to double*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 1)
  %134 = bitcast i8* %133 to double*
  %135 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 2)
  %136 = bitcast i8* %135 to double*
  %137 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 3)
  %138 = bitcast i8* %137 to double*
  %139 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 4)
  %140 = bitcast i8* %139 to double*
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 5)
  %142 = bitcast i8* %141 to double*
  %143 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 6)
  %144 = bitcast i8* %143 to double*
  %145 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %130, i64 7)
  %146 = bitcast i8* %145 to double*
  store double 1.000000e+00, double* %132, align 8
  store double -1.000000e+00, double* %134, align 8
  store double -1.000000e+00, double* %136, align 8
  store double -1.000000e+00, double* %138, align 8
  store double 1.000000e+00, double* %140, align 8
  store double 1.000000e+00, double* %142, align 8
  store double 1.000000e+00, double* %144, align 8
  store double -1.000000e+00, double* %146, align 8
  %147 = load double, double* %sign, align 8
  store %Array* %121, %Array** %118, align 8
  store %Array* %130, %Array** %119, align 8
  store double %147, double* %120, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  ret { %Array*, %Array*, double }* %117

test1__1:                                         ; preds = %continue__3
  %148 = icmp sgt i64 %q1, %r1
  br i1 %148, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %test1__1
  %149 = icmp slt i64 %q1, %s1
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %test1__1
  %150 = phi i1 [ %149, %condTrue__1 ], [ %148, %test1__1 ]
  br i1 %150, label %then1__1, label %test2__1

then1__1:                                         ; preds = %condContinue__1
  %151 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %152 = bitcast %Tuple* %151 to { %Array*, %Array*, double }*
  %153 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %152, i32 0, i32 0
  %154 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %152, i32 0, i32 1
  %155 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %152, i32 0, i32 2
  %156 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %157 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %156, i64 0)
  %158 = bitcast i8* %157 to i64*
  %159 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %156, i64 1)
  %160 = bitcast i8* %159 to i64*
  %161 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %156, i64 2)
  %162 = bitcast i8* %161 to i64*
  %163 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %156, i64 3)
  %164 = bitcast i8* %163 to i64*
  store i64 %p1, i64* %158, align 4
  store i64 %r1, i64* %160, align 4
  store i64 %q1, i64* %162, align 4
  store i64 %s1, i64* %164, align 4
  %165 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %166 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 0)
  %167 = bitcast i8* %166 to double*
  %168 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 1)
  %169 = bitcast i8* %168 to double*
  %170 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 2)
  %171 = bitcast i8* %170 to double*
  %172 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 3)
  %173 = bitcast i8* %172 to double*
  %174 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 4)
  %175 = bitcast i8* %174 to double*
  %176 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 5)
  %177 = bitcast i8* %176 to double*
  %178 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 6)
  %179 = bitcast i8* %178 to double*
  %180 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %165, i64 7)
  %181 = bitcast i8* %180 to double*
  store double -1.000000e+00, double* %167, align 8
  store double -1.000000e+00, double* %169, align 8
  store double -1.000000e+00, double* %171, align 8
  store double 1.000000e+00, double* %173, align 8
  store double -1.000000e+00, double* %175, align 8
  store double 1.000000e+00, double* %177, align 8
  store double 1.000000e+00, double* %179, align 8
  store double 1.000000e+00, double* %181, align 8
  %182 = load double, double* %sign, align 8
  store %Array* %156, %Array** %153, align 8
  store %Array* %165, %Array** %154, align 8
  store double %182, double* %155, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  ret { %Array*, %Array*, double }* %152

test2__1:                                         ; preds = %condContinue__1
  %183 = icmp sgt i64 %q1, %r1
  br i1 %183, label %condTrue__2, label %condContinue__2

condTrue__2:                                      ; preds = %test2__1
  %184 = icmp sgt i64 %q1, %s1
  br label %condContinue__2

condContinue__2:                                  ; preds = %condTrue__2, %test2__1
  %185 = phi i1 [ %184, %condTrue__2 ], [ %183, %test2__1 ]
  br i1 %185, label %then2__1, label %else__2

then2__1:                                         ; preds = %condContinue__2
  %186 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, double }* getelementptr ({ %Array*, %Array*, double }, { %Array*, %Array*, double }* null, i32 1) to i64))
  %187 = bitcast %Tuple* %186 to { %Array*, %Array*, double }*
  %188 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %187, i32 0, i32 0
  %189 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %187, i32 0, i32 1
  %190 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %187, i32 0, i32 2
  %191 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 0)
  %193 = bitcast i8* %192 to i64*
  %194 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 1)
  %195 = bitcast i8* %194 to i64*
  %196 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 2)
  %197 = bitcast i8* %196 to i64*
  %198 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %191, i64 3)
  %199 = bitcast i8* %198 to i64*
  store i64 %p1, i64* %193, align 4
  store i64 %r1, i64* %195, align 4
  store i64 %s1, i64* %197, align 4
  store i64 %q1, i64* %199, align 4
  %200 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %201 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 0)
  %202 = bitcast i8* %201 to double*
  %203 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 1)
  %204 = bitcast i8* %203 to double*
  %205 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 2)
  %206 = bitcast i8* %205 to double*
  %207 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 3)
  %208 = bitcast i8* %207 to double*
  %209 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 4)
  %210 = bitcast i8* %209 to double*
  %211 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 5)
  %212 = bitcast i8* %211 to double*
  %213 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 6)
  %214 = bitcast i8* %213 to double*
  %215 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %200, i64 7)
  %216 = bitcast i8* %215 to double*
  store double 1.000000e+00, double* %202, align 8
  store double 1.000000e+00, double* %204, align 8
  store double -1.000000e+00, double* %206, align 8
  store double 1.000000e+00, double* %208, align 8
  store double -1.000000e+00, double* %210, align 8
  store double 1.000000e+00, double* %212, align 8
  store double -1.000000e+00, double* %214, align 8
  store double -1.000000e+00, double* %216, align 8
  %217 = load double, double* %sign, align 8
  store %Array* %191, %Array** %188, align 8
  store %Array* %200, %Array** %189, align 8
  store double %217, double* %190, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  ret { %Array*, %Array*, double }* %187

else__2:                                          ; preds = %condContinue__2
  %218 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @53, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  call void @__quantum__rt__fail(%String* %218)
  unreachable

continue__4:                                      ; No predecessors!
  %219 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @15, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %indices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %106, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  call void @__quantum__rt__fail(%String* %219)
  unreachable
}

define internal %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %nFermions, %Array* %idxFermions, %Array* %pauliReplacements) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliReplacements, i32 1)
  %0 = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliZString__body(i64 %nFermions, %Array* %idxFermions)
  %pauliString = alloca %Array*, align 8
  store %Array* %0, %Array** %pauliString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %0, i32 1)
  %1 = call %Range @Microsoft__Quantum__Arrays___640ad8af9f2c4eb5858e60c13aac7d35_IndexRange__body(%Array* %idxFermions)
  %2 = extractvalue %Range %1, 0
  %3 = extractvalue %Range %1, 1
  %4 = extractvalue %Range %1, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %5 = icmp sgt i64 %3, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %idx = phi i64 [ %2, %preheader__1 ], [ %17, %exiting__1 ]
  %6 = icmp sle i64 %idx, %4
  %7 = icmp sge i64 %idx, %4
  %8 = select i1 %5, i1 %6, i1 %7
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 %idx)
  %10 = bitcast i8* %9 to i64*
  %idxFermion = load i64, i64* %10, align 4
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %pauliReplacements, i64 %idx)
  %12 = bitcast i8* %11 to i2*
  %op = load i2, i2* %12, align 1
  %13 = load %Array*, %Array** %pauliString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 -1)
  %14 = call %Array* @__quantum__rt__array_copy(%Array* %13, i1 false)
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %14, i64 %idxFermion)
  %16 = bitcast i8* %15 to i2*
  store i2 %op, i2* %16, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  store %Array* %14, %Array** %pauliString, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %idx, %3
  br label %header__1

exit__1:                                          ; preds = %header__1
  %18 = load %Array*, %Array** %pauliString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliReplacements, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  ret %Array* %18
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQRSTerm____adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__p__ = load i64, i64* %8, align 4
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %10 = bitcast i8* %9 to i64*
  %__qsVar4__q__ = load i64, i64* %10, align 4
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %12 = bitcast i8* %11 to i64*
  %__qsVar5__r__ = load i64, i64* %12, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %14 = bitcast i8* %13 to i64*
  %__qsVar6__s__ = load i64, i64* %14, align 4
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %16 = bitcast i8* %15 to double*
  %17 = load double, double* %16, align 8
  %18 = fmul double 1.250000e-01, %17
  %__qsVar7__angle__ = fmul double %18, %stepSize
  %19 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  %20 = xor i1 %19, true
  br i1 %20, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %entry
  %21 = icmp eq i64 %__qsVar3__p__, %__qsVar5__r__
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %entry
  %22 = phi i1 [ %21, %condTrue__1 ], [ %19, %entry ]
  %23 = xor i1 %22, true
  br i1 %23, label %condTrue__2, label %condContinue__2

condTrue__2:                                      ; preds = %condContinue__1
  %24 = icmp eq i64 %__qsVar3__p__, %__qsVar6__s__
  br label %condContinue__2

condContinue__2:                                  ; preds = %condTrue__2, %condContinue__1
  %25 = phi i1 [ %24, %condTrue__2 ], [ %22, %condContinue__1 ]
  %26 = xor i1 %25, true
  br i1 %26, label %condTrue__3, label %condContinue__3

condTrue__3:                                      ; preds = %condContinue__2
  %27 = icmp eq i64 %__qsVar4__q__, %__qsVar5__r__
  br label %condContinue__3

condContinue__3:                                  ; preds = %condTrue__3, %condContinue__2
  %28 = phi i1 [ %27, %condTrue__3 ], [ %25, %condContinue__2 ]
  %29 = xor i1 %28, true
  br i1 %29, label %condTrue__4, label %condContinue__4

condTrue__4:                                      ; preds = %condContinue__3
  %30 = icmp eq i64 %__qsVar4__q__, %__qsVar6__s__
  br label %condContinue__4

condContinue__4:                                  ; preds = %condTrue__4, %condContinue__3
  %31 = phi i1 [ %30, %condTrue__4 ], [ %28, %condContinue__3 ]
  %32 = xor i1 %31, true
  br i1 %32, label %condTrue__5, label %condContinue__5

condTrue__5:                                      ; preds = %condContinue__4
  %33 = icmp eq i64 %__qsVar5__r__, %__qsVar6__s__
  br label %condContinue__5

condContinue__5:                                  ; preds = %condTrue__5, %condContinue__4
  %34 = phi i1 [ %33, %condTrue__5 ], [ %31, %condContinue__4 ]
  br i1 %34, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__5
  %35 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @46, i32 0, i32 0))
  %36 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %37 = call %String* @__quantum__rt__string_concatenate(%String* %35, %String* %36)
  call void @__quantum__rt__string_update_reference_count(%String* %35, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %36, i32 -1)
  %38 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %39 = call %String* @__quantum__rt__string_concatenate(%String* %37, %String* %38)
  call void @__quantum__rt__string_update_reference_count(%String* %37, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %38, i32 -1)
  %40 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %41 = call %String* @__quantum__rt__string_concatenate(%String* %39, %String* %40)
  call void @__quantum__rt__string_update_reference_count(%String* %39, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %40, i32 -1)
  %42 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %43 = call %String* @__quantum__rt__string_concatenate(%String* %41, %String* %42)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i32 -1)
  %44 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar5__r__)
  %45 = call %String* @__quantum__rt__string_concatenate(%String* %43, %String* %44)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i32 -1)
  %46 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %47 = call %String* @__quantum__rt__string_concatenate(%String* %45, %String* %46)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %46, i32 -1)
  %48 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar6__s__)
  %49 = call %String* @__quantum__rt__string_concatenate(%String* %47, %String* %48)
  call void @__quantum__rt__string_update_reference_count(%String* %47, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %48, i32 -1)
  %50 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @48, i32 0, i32 0))
  %51 = call %String* @__quantum__rt__string_concatenate(%String* %49, %String* %50)
  call void @__quantum__rt__string_update_reference_count(%String* %49, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %50, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__fail(%String* %51)
  unreachable

continue__1:                                      ; preds = %condContinue__5
  %__qsVar8__x__ = load i2, i2* @PauliX, align 1
  %__qsVar9__y__ = load i2, i2* @PauliY, align 1
  %__qsVar10__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 0)
  %53 = bitcast i8* %52 to %Array**
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 1)
  %55 = bitcast i8* %54 to %Array**
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 2)
  %57 = bitcast i8* %56 to %Array**
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 3)
  %59 = bitcast i8* %58 to %Array**
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 4)
  %61 = bitcast i8* %60 to %Array**
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 5)
  %63 = bitcast i8* %62 to %Array**
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 6)
  %65 = bitcast i8* %64 to %Array**
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 7)
  %67 = bitcast i8* %66 to %Array**
  %68 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 0)
  %70 = bitcast i8* %69 to i2*
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 1)
  %72 = bitcast i8* %71 to i2*
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 2)
  %74 = bitcast i8* %73 to i2*
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 3)
  %76 = bitcast i8* %75 to i2*
  store i2 %__qsVar9__y__, i2* %70, align 1
  store i2 %__qsVar9__y__, i2* %72, align 1
  store i2 %__qsVar8__x__, i2* %74, align 1
  store i2 %__qsVar9__y__, i2* %76, align 1
  %77 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 0)
  %79 = bitcast i8* %78 to i2*
  %80 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 1)
  %81 = bitcast i8* %80 to i2*
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 2)
  %83 = bitcast i8* %82 to i2*
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %77, i64 3)
  %85 = bitcast i8* %84 to i2*
  store i2 %__qsVar8__x__, i2* %79, align 1
  store i2 %__qsVar8__x__, i2* %81, align 1
  store i2 %__qsVar8__x__, i2* %83, align 1
  store i2 %__qsVar9__y__, i2* %85, align 1
  %86 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %87 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 0)
  %88 = bitcast i8* %87 to i2*
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 1)
  %90 = bitcast i8* %89 to i2*
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 2)
  %92 = bitcast i8* %91 to i2*
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %86, i64 3)
  %94 = bitcast i8* %93 to i2*
  store i2 %__qsVar8__x__, i2* %88, align 1
  store i2 %__qsVar9__y__, i2* %90, align 1
  store i2 %__qsVar9__y__, i2* %92, align 1
  store i2 %__qsVar9__y__, i2* %94, align 1
  %95 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %95, i64 0)
  %97 = bitcast i8* %96 to i2*
  %98 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %95, i64 1)
  %99 = bitcast i8* %98 to i2*
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %95, i64 2)
  %101 = bitcast i8* %100 to i2*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %95, i64 3)
  %103 = bitcast i8* %102 to i2*
  store i2 %__qsVar9__y__, i2* %97, align 1
  store i2 %__qsVar8__x__, i2* %99, align 1
  store i2 %__qsVar9__y__, i2* %101, align 1
  store i2 %__qsVar9__y__, i2* %103, align 1
  %104 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %105 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 0)
  %106 = bitcast i8* %105 to i2*
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 1)
  %108 = bitcast i8* %107 to i2*
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 2)
  %110 = bitcast i8* %109 to i2*
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %104, i64 3)
  %112 = bitcast i8* %111 to i2*
  store i2 %__qsVar8__x__, i2* %106, align 1
  store i2 %__qsVar9__y__, i2* %108, align 1
  store i2 %__qsVar8__x__, i2* %110, align 1
  store i2 %__qsVar8__x__, i2* %112, align 1
  %113 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 0)
  %115 = bitcast i8* %114 to i2*
  %116 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 1)
  %117 = bitcast i8* %116 to i2*
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 2)
  %119 = bitcast i8* %118 to i2*
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %113, i64 3)
  %121 = bitcast i8* %120 to i2*
  store i2 %__qsVar9__y__, i2* %115, align 1
  store i2 %__qsVar8__x__, i2* %117, align 1
  store i2 %__qsVar8__x__, i2* %119, align 1
  store i2 %__qsVar8__x__, i2* %121, align 1
  %122 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %123 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 0)
  %124 = bitcast i8* %123 to i2*
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 1)
  %126 = bitcast i8* %125 to i2*
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 2)
  %128 = bitcast i8* %127 to i2*
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %122, i64 3)
  %130 = bitcast i8* %129 to i2*
  store i2 %__qsVar9__y__, i2* %124, align 1
  store i2 %__qsVar9__y__, i2* %126, align 1
  store i2 %__qsVar9__y__, i2* %128, align 1
  store i2 %__qsVar8__x__, i2* %130, align 1
  %131 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %132 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %131, i64 0)
  %133 = bitcast i8* %132 to i2*
  %134 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %131, i64 1)
  %135 = bitcast i8* %134 to i2*
  %136 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %131, i64 2)
  %137 = bitcast i8* %136 to i2*
  %138 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %131, i64 3)
  %139 = bitcast i8* %138 to i2*
  store i2 %__qsVar8__x__, i2* %133, align 1
  store i2 %__qsVar8__x__, i2* %135, align 1
  store i2 %__qsVar9__y__, i2* %137, align 1
  store i2 %__qsVar8__x__, i2* %139, align 1
  store %Array* %68, %Array** %53, align 8
  store %Array* %77, %Array** %55, align 8
  store %Array* %86, %Array** %57, align 8
  store %Array* %95, %Array** %59, align 8
  store %Array* %104, %Array** %61, align 8
  store %Array* %113, %Array** %63, align 8
  store %Array* %122, %Array** %65, align 8
  store %Array* %131, %Array** %67, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %140 = phi i64 [ 0, %continue__1 ], [ %145, %exiting__1 ]
  %141 = icmp sle i64 %140, 7
  br i1 %141, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %140)
  %143 = bitcast i8* %142 to %Array**
  %144 = load %Array*, %Array** %143, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %144, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %145 = add i64 %140, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__ops__, i32 1)
  %146 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %147 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %146, i64 0)
  %148 = bitcast i8* %147 to i64*
  %149 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %146, i64 1)
  %150 = bitcast i8* %149 to i64*
  %151 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %146, i64 2)
  %152 = bitcast i8* %151 to i64*
  %153 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %146, i64 3)
  %154 = bitcast i8* %153 to i64*
  store i64 %__qsVar3__p__, i64* %148, align 4
  store i64 %__qsVar4__q__, i64* %150, align 4
  store i64 %__qsVar5__r__, i64* %152, align 4
  store i64 %__qsVar6__s__, i64* %154, align 4
  %155 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %146)
  %156 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %155, i32 0, i32 0
  %__qsVar11__sortedIndices__ = load %Array*, %Array** %156, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__sortedIndices__, i32 1)
  %157 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %155, i32 0, i32 1
  %__qsVar12__signs__ = load %Array*, %Array** %157, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar12__signs__, i32 1)
  %158 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %155, i32 0, i32 2
  %__qsVar13__globalSign__ = load double, double* %158, align 8
  %159 = call %Array* @Microsoft__Quantum__Arrays___357bd2ab33e34755b61f70266c5f5077_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %160 = call %Array* @Microsoft__Quantum__Arrays___357bd2ab33e34755b61f70266c5f5077_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %161 = call i64 @__quantum__rt__array_get_size_1d(%Array* %160)
  %162 = sub i64 %161, 1
  %163 = load %Range, %Range* @EmptyRange, align 4
  %164 = insertvalue %Range %163, i64 %162, 0
  %165 = insertvalue %Range %164, i64 -1, 1
  %166 = insertvalue %Range %165, i64 0, 2
  %167 = call %Array* @__quantum__rt__array_slice_1d(%Array* %159, %Range %166, i1 true)
  %168 = call i64 @__quantum__rt__array_get_size_1d(%Array* %167)
  %169 = sub i64 %168, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %170 = phi i64 [ 0, %exit__1 ], [ %180, %exiting__2 ]
  %171 = icmp sle i64 %170, %169
  br i1 %171, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %172 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %167, i64 %170)
  %173 = bitcast i8* %172 to { %Array*, double }**
  %174 = load { %Array*, double }*, { %Array*, double }** %173, align 8
  %175 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %174, i32 0, i32 0
  %__qsVar14__op__ = load %Array*, %Array** %175, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar14__op__, i32 1)
  %176 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %174, i32 0, i32 1
  %__qsVar15__sign__ = load double, double* %176, align 8
  %177 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar16__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %177, %Array* %__qsVar11__sortedIndices__, %Array* %__qsVar14__op__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i32 1)
  %178 = fmul double %__qsVar13__globalSign__, %__qsVar15__sign__
  %179 = fmul double %178, %__qsVar7__angle__
  call void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %__qsVar16__pauliString__, double %179, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar14__op__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar16__pauliString__, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %180 = add i64 %170, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %181 = phi i64 [ 0, %exit__2 ], [ %186, %exiting__3 ]
  %182 = icmp sle i64 %181, 7
  br i1 %182, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %183 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %181)
  %184 = bitcast i8* %183 to %Array**
  %185 = load %Array*, %Array** %184, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %185, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %186 = add i64 %181, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__ops__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__sortedIndices__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar12__signs__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %187 = phi i64 [ 0, %exit__3 ], [ %192, %exiting__4 ]
  %188 = icmp sle i64 %187, 7
  br i1 %188, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %189 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %187)
  %190 = bitcast i8* %189 to %Array**
  %191 = load %Array*, %Array** %190, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %191, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %192 = add i64 %187, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %146, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar11__sortedIndices__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar12__signs__, i32 -1)
  %193 = bitcast { %Array*, %Array*, double }* %155 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %193, i32 -1)
  %194 = call i64 @__quantum__rt__array_get_size_1d(%Array* %159)
  %195 = sub i64 %194, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %196 = phi i64 [ 0, %exit__4 ], [ %204, %exiting__5 ]
  %197 = icmp sle i64 %196, %195
  br i1 %197, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %198 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %159, i64 %196)
  %199 = bitcast i8* %198 to { %Array*, double }**
  %200 = load { %Array*, double }*, { %Array*, double }** %199, align 8
  %201 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %200, i32 0, i32 0
  %202 = load %Array*, %Array** %201, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %202, i32 -1)
  %203 = bitcast { %Array*, double }* %200 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %203, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %204 = add i64 %196, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %159, i32 -1)
  %205 = sub i64 %161, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %206 = phi i64 [ 0, %exit__5 ], [ %214, %exiting__6 ]
  %207 = icmp sle i64 %206, %205
  br i1 %207, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %208 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %160, i64 %206)
  %209 = bitcast i8* %208 to { %Array*, double }**
  %210 = load { %Array*, double }*, { %Array*, double }** %209, align 8
  %211 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %210, i32 0, i32 0
  %212 = load %Array*, %Array** %211, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %212, i32 -1)
  %213 = bitcast { %Array*, double }* %210 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %213, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %214 = add i64 %206, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %160, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %167, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQRSTerm____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %coeff = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %12 = bitcast i8* %11 to i64*
  %p = load i64, i64* %12, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %14 = bitcast i8* %13 to i64*
  %q = load i64, i64* %14, align 4
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 2)
  %16 = bitcast i8* %15 to i64*
  %r = load i64, i64* %16, align 4
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %18 = bitcast i8* %17 to i64*
  %s = load i64, i64* %18, align 4
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %20 = bitcast i8* %19 to double*
  %21 = load double, double* %20, align 8
  %22 = fmul double 1.250000e-01, %21
  %angle = fmul double %22, %stepSize
  %23 = icmp eq i64 %p, %q
  %24 = xor i1 %23, true
  br i1 %24, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %entry
  %25 = icmp eq i64 %p, %r
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %entry
  %26 = phi i1 [ %25, %condTrue__1 ], [ %23, %entry ]
  %27 = xor i1 %26, true
  br i1 %27, label %condTrue__2, label %condContinue__2

condTrue__2:                                      ; preds = %condContinue__1
  %28 = icmp eq i64 %p, %s
  br label %condContinue__2

condContinue__2:                                  ; preds = %condTrue__2, %condContinue__1
  %29 = phi i1 [ %28, %condTrue__2 ], [ %26, %condContinue__1 ]
  %30 = xor i1 %29, true
  br i1 %30, label %condTrue__3, label %condContinue__3

condTrue__3:                                      ; preds = %condContinue__2
  %31 = icmp eq i64 %q, %r
  br label %condContinue__3

condContinue__3:                                  ; preds = %condTrue__3, %condContinue__2
  %32 = phi i1 [ %31, %condTrue__3 ], [ %29, %condContinue__2 ]
  %33 = xor i1 %32, true
  br i1 %33, label %condTrue__4, label %condContinue__4

condTrue__4:                                      ; preds = %condContinue__3
  %34 = icmp eq i64 %q, %s
  br label %condContinue__4

condContinue__4:                                  ; preds = %condTrue__4, %condContinue__3
  %35 = phi i1 [ %34, %condTrue__4 ], [ %32, %condContinue__3 ]
  %36 = xor i1 %35, true
  br i1 %36, label %condTrue__5, label %condContinue__5

condTrue__5:                                      ; preds = %condContinue__4
  %37 = icmp eq i64 %r, %s
  br label %condContinue__5

condContinue__5:                                  ; preds = %condTrue__5, %condContinue__4
  %38 = phi i1 [ %37, %condTrue__5 ], [ %35, %condContinue__4 ]
  br i1 %38, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__5
  %39 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @46, i32 0, i32 0))
  %40 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %41 = call %String* @__quantum__rt__string_concatenate(%String* %39, %String* %40)
  call void @__quantum__rt__string_update_reference_count(%String* %39, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %40, i32 -1)
  %42 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %43 = call %String* @__quantum__rt__string_concatenate(%String* %41, %String* %42)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i32 -1)
  %44 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %45 = call %String* @__quantum__rt__string_concatenate(%String* %43, %String* %44)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i32 -1)
  %46 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %47 = call %String* @__quantum__rt__string_concatenate(%String* %45, %String* %46)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %46, i32 -1)
  %48 = call %String* @__quantum__rt__int_to_string(i64 %r)
  %49 = call %String* @__quantum__rt__string_concatenate(%String* %47, %String* %48)
  call void @__quantum__rt__string_update_reference_count(%String* %47, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %48, i32 -1)
  %50 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %51 = call %String* @__quantum__rt__string_concatenate(%String* %49, %String* %50)
  call void @__quantum__rt__string_update_reference_count(%String* %49, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %50, i32 -1)
  %52 = call %String* @__quantum__rt__int_to_string(i64 %s)
  %53 = call %String* @__quantum__rt__string_concatenate(%String* %51, %String* %52)
  call void @__quantum__rt__string_update_reference_count(%String* %51, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %52, i32 -1)
  %54 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @48, i32 0, i32 0))
  %55 = call %String* @__quantum__rt__string_concatenate(%String* %53, %String* %54)
  call void @__quantum__rt__string_update_reference_count(%String* %53, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %54, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__fail(%String* %55)
  unreachable

continue__1:                                      ; preds = %condContinue__5
  %x = load i2, i2* @PauliX, align 1
  %y = load i2, i2* @PauliY, align 1
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %57 = bitcast i8* %56 to %Array**
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %59 = bitcast i8* %58 to %Array**
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 2)
  %61 = bitcast i8* %60 to %Array**
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 3)
  %63 = bitcast i8* %62 to %Array**
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 4)
  %65 = bitcast i8* %64 to %Array**
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 5)
  %67 = bitcast i8* %66 to %Array**
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 6)
  %69 = bitcast i8* %68 to %Array**
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 7)
  %71 = bitcast i8* %70 to %Array**
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to i2*
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 1)
  %76 = bitcast i8* %75 to i2*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 2)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 3)
  %80 = bitcast i8* %79 to i2*
  store i2 %y, i2* %74, align 1
  store i2 %y, i2* %76, align 1
  store i2 %x, i2* %78, align 1
  store i2 %y, i2* %80, align 1
  %81 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 0)
  %83 = bitcast i8* %82 to i2*
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 1)
  %85 = bitcast i8* %84 to i2*
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 2)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 3)
  %89 = bitcast i8* %88 to i2*
  store i2 %x, i2* %83, align 1
  store i2 %x, i2* %85, align 1
  store i2 %x, i2* %87, align 1
  store i2 %y, i2* %89, align 1
  %90 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 0)
  %92 = bitcast i8* %91 to i2*
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 1)
  %94 = bitcast i8* %93 to i2*
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 2)
  %96 = bitcast i8* %95 to i2*
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 3)
  %98 = bitcast i8* %97 to i2*
  store i2 %x, i2* %92, align 1
  store i2 %y, i2* %94, align 1
  store i2 %y, i2* %96, align 1
  store i2 %y, i2* %98, align 1
  %99 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 0)
  %101 = bitcast i8* %100 to i2*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 1)
  %103 = bitcast i8* %102 to i2*
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 2)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 3)
  %107 = bitcast i8* %106 to i2*
  store i2 %y, i2* %101, align 1
  store i2 %x, i2* %103, align 1
  store i2 %y, i2* %105, align 1
  store i2 %y, i2* %107, align 1
  %108 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 0)
  %110 = bitcast i8* %109 to i2*
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 1)
  %112 = bitcast i8* %111 to i2*
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 2)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 3)
  %116 = bitcast i8* %115 to i2*
  store i2 %x, i2* %110, align 1
  store i2 %y, i2* %112, align 1
  store i2 %x, i2* %114, align 1
  store i2 %x, i2* %116, align 1
  %117 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 0)
  %119 = bitcast i8* %118 to i2*
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 1)
  %121 = bitcast i8* %120 to i2*
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 2)
  %123 = bitcast i8* %122 to i2*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 3)
  %125 = bitcast i8* %124 to i2*
  store i2 %y, i2* %119, align 1
  store i2 %x, i2* %121, align 1
  store i2 %x, i2* %123, align 1
  store i2 %x, i2* %125, align 1
  %126 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 0)
  %128 = bitcast i8* %127 to i2*
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 1)
  %130 = bitcast i8* %129 to i2*
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 2)
  %132 = bitcast i8* %131 to i2*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 3)
  %134 = bitcast i8* %133 to i2*
  store i2 %y, i2* %128, align 1
  store i2 %y, i2* %130, align 1
  store i2 %y, i2* %132, align 1
  store i2 %x, i2* %134, align 1
  %135 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %136 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 0)
  %137 = bitcast i8* %136 to i2*
  %138 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 1)
  %139 = bitcast i8* %138 to i2*
  %140 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 2)
  %141 = bitcast i8* %140 to i2*
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 3)
  %143 = bitcast i8* %142 to i2*
  store i2 %x, i2* %137, align 1
  store i2 %x, i2* %139, align 1
  store i2 %y, i2* %141, align 1
  store i2 %x, i2* %143, align 1
  store %Array* %72, %Array** %57, align 8
  store %Array* %81, %Array** %59, align 8
  store %Array* %90, %Array** %61, align 8
  store %Array* %99, %Array** %63, align 8
  store %Array* %108, %Array** %65, align 8
  store %Array* %117, %Array** %67, align 8
  store %Array* %126, %Array** %69, align 8
  store %Array* %135, %Array** %71, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %144 = phi i64 [ 0, %continue__1 ], [ %149, %exiting__1 ]
  %145 = icmp sle i64 %144, 7
  br i1 %145, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %144)
  %147 = bitcast i8* %146 to %Array**
  %148 = load %Array*, %Array** %147, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %148, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %149 = add i64 %144, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %150 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %151 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %150, i64 0)
  %152 = bitcast i8* %151 to i64*
  %153 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %150, i64 1)
  %154 = bitcast i8* %153 to i64*
  %155 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %150, i64 2)
  %156 = bitcast i8* %155 to i64*
  %157 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %150, i64 3)
  %158 = bitcast i8* %157 to i64*
  store i64 %p, i64* %152, align 4
  store i64 %q, i64* %154, align 4
  store i64 %r, i64* %156, align 4
  store i64 %s, i64* %158, align 4
  %159 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %150)
  %160 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %159, i32 0, i32 0
  %sortedIndices = load %Array*, %Array** %160, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %sortedIndices, i32 1)
  %161 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %159, i32 0, i32 1
  %signs = load %Array*, %Array** %161, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 1)
  %162 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %159, i32 0, i32 2
  %globalSign = load double, double* %162, align 8
  %163 = call %Array* @Microsoft__Quantum__Arrays___357bd2ab33e34755b61f70266c5f5077_Zipped__body(%Array* %ops, %Array* %signs)
  %164 = call i64 @__quantum__rt__array_get_size_1d(%Array* %163)
  %165 = sub i64 %164, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %166 = phi i64 [ 0, %exit__1 ], [ %181, %exiting__2 ]
  %167 = icmp sle i64 %166, %165
  br i1 %167, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %168 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %163, i64 %166)
  %169 = bitcast i8* %168 to { %Array*, double }**
  %170 = load { %Array*, double }*, { %Array*, double }** %169, align 8
  %171 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %170, i32 0, i32 0
  %op = load %Array*, %Array** %171, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 1)
  %172 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %170, i32 0, i32 1
  %sign = load double, double* %172, align 8
  %173 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %173, %Array* %sortedIndices, %Array* %op)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  %174 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %175 = bitcast %Tuple* %174 to { %Array*, double, %Array* }*
  %176 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %175, i32 0, i32 0
  %177 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %175, i32 0, i32 1
  %178 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %175, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 1)
  %179 = fmul double %globalSign, %sign
  %180 = fmul double %179, %angle
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store %Array* %pauliString, %Array** %176, align 8
  store double %180, double* %177, align 8
  store %Array* %qubits, %Array** %178, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %175)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %174, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %181 = add i64 %166, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %182 = phi i64 [ 0, %exit__2 ], [ %187, %exiting__3 ]
  %183 = icmp sle i64 %182, 7
  br i1 %183, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %184 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %182)
  %185 = bitcast i8* %184 to %Array**
  %186 = load %Array*, %Array** %185, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %186, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %187 = add i64 %182, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %sortedIndices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %188 = phi i64 [ 0, %exit__3 ], [ %193, %exiting__4 ]
  %189 = icmp sle i64 %188, 7
  br i1 %189, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %190 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %188)
  %191 = bitcast i8* %190 to %Array**
  %192 = load %Array*, %Array** %191, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %192, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %193 = add i64 %188, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %150, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %sortedIndices, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %signs, i32 -1)
  %194 = bitcast { %Array*, %Array*, double }* %159 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %194, i32 -1)
  %195 = sub i64 %164, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %196 = phi i64 [ 0, %exit__4 ], [ %204, %exiting__5 ]
  %197 = icmp sle i64 %196, %195
  br i1 %197, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %198 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %163, i64 %196)
  %199 = bitcast i8* %198 to { %Array*, double }**
  %200 = load { %Array*, double }*, { %Array*, double }** %199, align 8
  %201 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %200, i32 0, i32 0
  %202 = load %Array*, %Array** %201, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %202, i32 -1)
  %203 = bitcast { %Array*, double }* %200 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %203, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %204 = add i64 %196, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %163, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQRSTerm____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__p__ = load i64, i64* %12, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %14 = bitcast i8* %13 to i64*
  %__qsVar4__q__ = load i64, i64* %14, align 4
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 2)
  %16 = bitcast i8* %15 to i64*
  %__qsVar5__r__ = load i64, i64* %16, align 4
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %18 = bitcast i8* %17 to i64*
  %__qsVar6__s__ = load i64, i64* %18, align 4
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %20 = bitcast i8* %19 to double*
  %21 = load double, double* %20, align 8
  %22 = fmul double 1.250000e-01, %21
  %__qsVar7__angle__ = fmul double %22, %stepSize
  %23 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  %24 = xor i1 %23, true
  br i1 %24, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %entry
  %25 = icmp eq i64 %__qsVar3__p__, %__qsVar5__r__
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %entry
  %26 = phi i1 [ %25, %condTrue__1 ], [ %23, %entry ]
  %27 = xor i1 %26, true
  br i1 %27, label %condTrue__2, label %condContinue__2

condTrue__2:                                      ; preds = %condContinue__1
  %28 = icmp eq i64 %__qsVar3__p__, %__qsVar6__s__
  br label %condContinue__2

condContinue__2:                                  ; preds = %condTrue__2, %condContinue__1
  %29 = phi i1 [ %28, %condTrue__2 ], [ %26, %condContinue__1 ]
  %30 = xor i1 %29, true
  br i1 %30, label %condTrue__3, label %condContinue__3

condTrue__3:                                      ; preds = %condContinue__2
  %31 = icmp eq i64 %__qsVar4__q__, %__qsVar5__r__
  br label %condContinue__3

condContinue__3:                                  ; preds = %condTrue__3, %condContinue__2
  %32 = phi i1 [ %31, %condTrue__3 ], [ %29, %condContinue__2 ]
  %33 = xor i1 %32, true
  br i1 %33, label %condTrue__4, label %condContinue__4

condTrue__4:                                      ; preds = %condContinue__3
  %34 = icmp eq i64 %__qsVar4__q__, %__qsVar6__s__
  br label %condContinue__4

condContinue__4:                                  ; preds = %condTrue__4, %condContinue__3
  %35 = phi i1 [ %34, %condTrue__4 ], [ %32, %condContinue__3 ]
  %36 = xor i1 %35, true
  br i1 %36, label %condTrue__5, label %condContinue__5

condTrue__5:                                      ; preds = %condContinue__4
  %37 = icmp eq i64 %__qsVar5__r__, %__qsVar6__s__
  br label %condContinue__5

condContinue__5:                                  ; preds = %condTrue__5, %condContinue__4
  %38 = phi i1 [ %37, %condTrue__5 ], [ %35, %condContinue__4 ]
  br i1 %38, label %then0__1, label %continue__1

then0__1:                                         ; preds = %condContinue__5
  %39 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @46, i32 0, i32 0))
  %40 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %41 = call %String* @__quantum__rt__string_concatenate(%String* %39, %String* %40)
  call void @__quantum__rt__string_update_reference_count(%String* %39, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %40, i32 -1)
  %42 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %43 = call %String* @__quantum__rt__string_concatenate(%String* %41, %String* %42)
  call void @__quantum__rt__string_update_reference_count(%String* %41, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %42, i32 -1)
  %44 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %45 = call %String* @__quantum__rt__string_concatenate(%String* %43, %String* %44)
  call void @__quantum__rt__string_update_reference_count(%String* %43, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %44, i32 -1)
  %46 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %47 = call %String* @__quantum__rt__string_concatenate(%String* %45, %String* %46)
  call void @__quantum__rt__string_update_reference_count(%String* %45, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %46, i32 -1)
  %48 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar5__r__)
  %49 = call %String* @__quantum__rt__string_concatenate(%String* %47, %String* %48)
  call void @__quantum__rt__string_update_reference_count(%String* %47, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %48, i32 -1)
  %50 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %51 = call %String* @__quantum__rt__string_concatenate(%String* %49, %String* %50)
  call void @__quantum__rt__string_update_reference_count(%String* %49, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %50, i32 -1)
  %52 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar6__s__)
  %53 = call %String* @__quantum__rt__string_concatenate(%String* %51, %String* %52)
  call void @__quantum__rt__string_update_reference_count(%String* %51, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %52, i32 -1)
  %54 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @48, i32 0, i32 0))
  %55 = call %String* @__quantum__rt__string_concatenate(%String* %53, %String* %54)
  call void @__quantum__rt__string_update_reference_count(%String* %53, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %54, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__fail(%String* %55)
  unreachable

continue__1:                                      ; preds = %condContinue__5
  %__qsVar8__x__ = load i2, i2* @PauliX, align 1
  %__qsVar9__y__ = load i2, i2* @PauliY, align 1
  %__qsVar10__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 8)
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 0)
  %57 = bitcast i8* %56 to %Array**
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 1)
  %59 = bitcast i8* %58 to %Array**
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 2)
  %61 = bitcast i8* %60 to %Array**
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 3)
  %63 = bitcast i8* %62 to %Array**
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 4)
  %65 = bitcast i8* %64 to %Array**
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 5)
  %67 = bitcast i8* %66 to %Array**
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 6)
  %69 = bitcast i8* %68 to %Array**
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 7)
  %71 = bitcast i8* %70 to %Array**
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to i2*
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 1)
  %76 = bitcast i8* %75 to i2*
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 2)
  %78 = bitcast i8* %77 to i2*
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 3)
  %80 = bitcast i8* %79 to i2*
  store i2 %__qsVar9__y__, i2* %74, align 1
  store i2 %__qsVar9__y__, i2* %76, align 1
  store i2 %__qsVar8__x__, i2* %78, align 1
  store i2 %__qsVar9__y__, i2* %80, align 1
  %81 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 0)
  %83 = bitcast i8* %82 to i2*
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 1)
  %85 = bitcast i8* %84 to i2*
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 2)
  %87 = bitcast i8* %86 to i2*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %81, i64 3)
  %89 = bitcast i8* %88 to i2*
  store i2 %__qsVar8__x__, i2* %83, align 1
  store i2 %__qsVar8__x__, i2* %85, align 1
  store i2 %__qsVar8__x__, i2* %87, align 1
  store i2 %__qsVar9__y__, i2* %89, align 1
  %90 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 0)
  %92 = bitcast i8* %91 to i2*
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 1)
  %94 = bitcast i8* %93 to i2*
  %95 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 2)
  %96 = bitcast i8* %95 to i2*
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %90, i64 3)
  %98 = bitcast i8* %97 to i2*
  store i2 %__qsVar8__x__, i2* %92, align 1
  store i2 %__qsVar9__y__, i2* %94, align 1
  store i2 %__qsVar9__y__, i2* %96, align 1
  store i2 %__qsVar9__y__, i2* %98, align 1
  %99 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 0)
  %101 = bitcast i8* %100 to i2*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 1)
  %103 = bitcast i8* %102 to i2*
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 2)
  %105 = bitcast i8* %104 to i2*
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 3)
  %107 = bitcast i8* %106 to i2*
  store i2 %__qsVar9__y__, i2* %101, align 1
  store i2 %__qsVar8__x__, i2* %103, align 1
  store i2 %__qsVar9__y__, i2* %105, align 1
  store i2 %__qsVar9__y__, i2* %107, align 1
  %108 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 0)
  %110 = bitcast i8* %109 to i2*
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 1)
  %112 = bitcast i8* %111 to i2*
  %113 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 2)
  %114 = bitcast i8* %113 to i2*
  %115 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %108, i64 3)
  %116 = bitcast i8* %115 to i2*
  store i2 %__qsVar8__x__, i2* %110, align 1
  store i2 %__qsVar9__y__, i2* %112, align 1
  store i2 %__qsVar8__x__, i2* %114, align 1
  store i2 %__qsVar8__x__, i2* %116, align 1
  %117 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 0)
  %119 = bitcast i8* %118 to i2*
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 1)
  %121 = bitcast i8* %120 to i2*
  %122 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 2)
  %123 = bitcast i8* %122 to i2*
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 3)
  %125 = bitcast i8* %124 to i2*
  store i2 %__qsVar9__y__, i2* %119, align 1
  store i2 %__qsVar8__x__, i2* %121, align 1
  store i2 %__qsVar8__x__, i2* %123, align 1
  store i2 %__qsVar8__x__, i2* %125, align 1
  %126 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %127 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 0)
  %128 = bitcast i8* %127 to i2*
  %129 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 1)
  %130 = bitcast i8* %129 to i2*
  %131 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 2)
  %132 = bitcast i8* %131 to i2*
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %126, i64 3)
  %134 = bitcast i8* %133 to i2*
  store i2 %__qsVar9__y__, i2* %128, align 1
  store i2 %__qsVar9__y__, i2* %130, align 1
  store i2 %__qsVar9__y__, i2* %132, align 1
  store i2 %__qsVar8__x__, i2* %134, align 1
  %135 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 4)
  %136 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 0)
  %137 = bitcast i8* %136 to i2*
  %138 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 1)
  %139 = bitcast i8* %138 to i2*
  %140 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 2)
  %141 = bitcast i8* %140 to i2*
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %135, i64 3)
  %143 = bitcast i8* %142 to i2*
  store i2 %__qsVar8__x__, i2* %137, align 1
  store i2 %__qsVar8__x__, i2* %139, align 1
  store i2 %__qsVar9__y__, i2* %141, align 1
  store i2 %__qsVar8__x__, i2* %143, align 1
  store %Array* %72, %Array** %57, align 8
  store %Array* %81, %Array** %59, align 8
  store %Array* %90, %Array** %61, align 8
  store %Array* %99, %Array** %63, align 8
  store %Array* %108, %Array** %65, align 8
  store %Array* %117, %Array** %67, align 8
  store %Array* %126, %Array** %69, align 8
  store %Array* %135, %Array** %71, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %144 = phi i64 [ 0, %continue__1 ], [ %149, %exiting__1 ]
  %145 = icmp sle i64 %144, 7
  br i1 %145, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %146 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %144)
  %147 = bitcast i8* %146 to %Array**
  %148 = load %Array*, %Array** %147, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %148, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %149 = add i64 %144, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__ops__, i32 1)
  %150 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %151 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %150, i64 0)
  %152 = bitcast i8* %151 to i64*
  %153 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %150, i64 1)
  %154 = bitcast i8* %153 to i64*
  %155 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %150, i64 2)
  %156 = bitcast i8* %155 to i64*
  %157 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %150, i64 3)
  %158 = bitcast i8* %157 to i64*
  store i64 %__qsVar3__p__, i64* %152, align 4
  store i64 %__qsVar4__q__, i64* %154, align 4
  store i64 %__qsVar5__r__, i64* %156, align 4
  store i64 %__qsVar6__s__, i64* %158, align 4
  %159 = call { %Array*, %Array*, double }* @Microsoft__Quantum__Chemistry__JordanWigner___JordanWignerClusterOperatorPQRSTermSigns__body(%Array* %150)
  %160 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %159, i32 0, i32 0
  %__qsVar11__sortedIndices__ = load %Array*, %Array** %160, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__sortedIndices__, i32 1)
  %161 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %159, i32 0, i32 1
  %__qsVar12__signs__ = load %Array*, %Array** %161, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar12__signs__, i32 1)
  %162 = getelementptr inbounds { %Array*, %Array*, double }, { %Array*, %Array*, double }* %159, i32 0, i32 2
  %__qsVar13__globalSign__ = load double, double* %162, align 8
  %163 = call %Array* @Microsoft__Quantum__Arrays___357bd2ab33e34755b61f70266c5f5077_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %164 = call %Array* @Microsoft__Quantum__Arrays___357bd2ab33e34755b61f70266c5f5077_Zipped__body(%Array* %__qsVar10__ops__, %Array* %__qsVar12__signs__)
  %165 = call i64 @__quantum__rt__array_get_size_1d(%Array* %164)
  %166 = sub i64 %165, 1
  %167 = load %Range, %Range* @EmptyRange, align 4
  %168 = insertvalue %Range %167, i64 %166, 0
  %169 = insertvalue %Range %168, i64 -1, 1
  %170 = insertvalue %Range %169, i64 0, 2
  %171 = call %Array* @__quantum__rt__array_slice_1d(%Array* %163, %Range %170, i1 true)
  %172 = call i64 @__quantum__rt__array_get_size_1d(%Array* %171)
  %173 = sub i64 %172, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %174 = phi i64 [ 0, %exit__1 ], [ %189, %exiting__2 ]
  %175 = icmp sle i64 %174, %173
  br i1 %175, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %176 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %171, i64 %174)
  %177 = bitcast i8* %176 to { %Array*, double }**
  %178 = load { %Array*, double }*, { %Array*, double }** %177, align 8
  %179 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %178, i32 0, i32 0
  %__qsVar14__op__ = load %Array*, %Array** %179, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar14__op__, i32 1)
  %180 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %178, i32 0, i32 1
  %__qsVar15__sign__ = load double, double* %180, align 8
  %181 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar16__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %181, %Array* %__qsVar11__sortedIndices__, %Array* %__qsVar14__op__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i32 1)
  %182 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %183 = bitcast %Tuple* %182 to { %Array*, double, %Array* }*
  %184 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %183, i32 0, i32 0
  %185 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %183, i32 0, i32 1
  %186 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %183, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar16__pauliString__, i32 1)
  %187 = fmul double %__qsVar13__globalSign__, %__qsVar15__sign__
  %188 = fmul double %187, %__qsVar7__angle__
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store %Array* %__qsVar16__pauliString__, %Array** %184, align 8
  store double %188, double* %185, align 8
  store %Array* %qubits, %Array** %186, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %183)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar14__op__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar16__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar16__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar16__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %182, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %189 = add i64 %174, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %190 = phi i64 [ 0, %exit__2 ], [ %195, %exiting__3 ]
  %191 = icmp sle i64 %190, 7
  br i1 %191, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %192 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %190)
  %193 = bitcast i8* %192 to %Array**
  %194 = load %Array*, %Array** %193, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %194, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %195 = add i64 %190, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__ops__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar11__sortedIndices__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar12__signs__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %196 = phi i64 [ 0, %exit__3 ], [ %201, %exiting__4 ]
  %197 = icmp sle i64 %196, 7
  br i1 %197, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %198 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar10__ops__, i64 %196)
  %199 = bitcast i8* %198 to %Array**
  %200 = load %Array*, %Array** %199, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %200, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %201 = add i64 %196, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %150, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar11__sortedIndices__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar12__signs__, i32 -1)
  %202 = bitcast { %Array*, %Array*, double }* %159 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %202, i32 -1)
  %203 = call i64 @__quantum__rt__array_get_size_1d(%Array* %163)
  %204 = sub i64 %203, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %205 = phi i64 [ 0, %exit__4 ], [ %213, %exiting__5 ]
  %206 = icmp sle i64 %205, %204
  br i1 %206, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %207 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %163, i64 %205)
  %208 = bitcast i8* %207 to { %Array*, double }**
  %209 = load { %Array*, double }*, { %Array*, double }** %208, align 8
  %210 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %209, i32 0, i32 0
  %211 = load %Array*, %Array** %210, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %211, i32 -1)
  %212 = bitcast { %Array*, double }* %209 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %212, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %213 = add i64 %205, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %163, i32 -1)
  %214 = sub i64 %165, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %215 = phi i64 [ 0, %exit__5 ], [ %223, %exiting__6 ]
  %216 = icmp sle i64 %215, %214
  br i1 %216, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %217 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %164, i64 %215)
  %218 = bitcast i8* %217 to { %Array*, double }**
  %219 = load { %Array*, double }*, { %Array*, double }** %218, align 8
  %220 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %219, i32 0, i32 0
  %221 = load %Array*, %Array** %220, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %221, i32 -1)
  %222 = bitcast { %Array*, double }* %219 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %222, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %223 = add i64 %215, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %164, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %171, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQTerm____body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %8 = bitcast i8* %7 to i64*
  %p = load i64, i64* %8, align 4
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %10 = bitcast i8* %9 to i64*
  %q = load i64, i64* %10, align 4
  %11 = icmp eq i64 %p, %q
  br i1 %11, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %12 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @49, i32 0, i32 0))
  %13 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %14 = call %String* @__quantum__rt__string_concatenate(%String* %12, %String* %13)
  call void @__quantum__rt__string_update_reference_count(%String* %12, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %13, i32 -1)
  %15 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %16 = call %String* @__quantum__rt__string_concatenate(%String* %14, %String* %15)
  call void @__quantum__rt__string_update_reference_count(%String* %14, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %15, i32 -1)
  %17 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i32 -1)
  %19 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @48, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__fail(%String* %20)
  unreachable

continue__1:                                      ; preds = %entry
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %22 = bitcast i8* %21 to double*
  %23 = load double, double* %22, align 8
  %24 = fmul double 5.000000e-01, %23
  %angle = fmul double %24, %stepSize
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %26 = bitcast i8* %25 to %Array**
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %28 = bitcast i8* %27 to %Array**
  %29 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 0)
  %31 = bitcast i8* %30 to i2*
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 1)
  %33 = bitcast i8* %32 to i2*
  %34 = load i2, i2* @PauliX, align 1
  %35 = load i2, i2* @PauliY, align 1
  store i2 %34, i2* %31, align 1
  store i2 %35, i2* %33, align 1
  %36 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 0)
  %38 = bitcast i8* %37 to i2*
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 1)
  %40 = bitcast i8* %39 to i2*
  %41 = load i2, i2* @PauliY, align 1
  %42 = load i2, i2* @PauliX, align 1
  store i2 %41, i2* %38, align 1
  store i2 %42, i2* %40, align 1
  store %Array* %29, %Array** %26, align 8
  store %Array* %36, %Array** %28, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %43 = phi i64 [ 0, %continue__1 ], [ %48, %exiting__1 ]
  %44 = icmp sle i64 %43, 1
  br i1 %44, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %43)
  %46 = bitcast i8* %45 to %Array**
  %47 = load %Array*, %Array** %46, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %48 = add i64 %43, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %signs = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 0)
  %50 = bitcast i8* %49 to double*
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 1)
  %52 = bitcast i8* %51 to double*
  store double 1.000000e+00, double* %50, align 8
  store double -1.000000e+00, double* %52, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 1)
  %53 = call %Array* @Microsoft__Quantum__Arrays___357bd2ab33e34755b61f70266c5f5077_Zipped__body(%Array* %ops, %Array* %signs)
  %54 = call i64 @__quantum__rt__array_get_size_1d(%Array* %53)
  %55 = sub i64 %54, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %56 = phi i64 [ 0, %exit__1 ], [ %65, %exiting__2 ]
  %57 = icmp sle i64 %56, %55
  br i1 %57, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %56)
  %59 = bitcast i8* %58 to { %Array*, double }**
  %60 = load { %Array*, double }*, { %Array*, double }** %59, align 8
  %61 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %60, i32 0, i32 0
  %op = load %Array*, %Array** %61, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 1)
  %62 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %60, i32 0, i32 1
  %sign = load double, double* %62, align 8
  %63 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %63, %Array* %idxFermions, %Array* %op)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  %64 = fmul double %sign, %angle
  call void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %pauliString, double %64, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %65 = add i64 %56, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %66 = phi i64 [ 0, %exit__2 ], [ %71, %exiting__3 ]
  %67 = icmp sle i64 %66, 1
  br i1 %67, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %68 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %66)
  %69 = bitcast i8* %68 to %Array**
  %70 = load %Array*, %Array** %69, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %70, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %71 = add i64 %66, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %72 = phi i64 [ 0, %exit__3 ], [ %77, %exiting__4 ]
  %73 = icmp sle i64 %72, 1
  br i1 %73, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %74 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %72)
  %75 = bitcast i8* %74 to %Array**
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %77 = add i64 %72, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %signs, i32 -1)
  %78 = sub i64 %54, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %79 = phi i64 [ 0, %exit__4 ], [ %87, %exiting__5 ]
  %80 = icmp sle i64 %79, %78
  br i1 %80, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %79)
  %82 = bitcast i8* %81 to { %Array*, double }**
  %83 = load { %Array*, double }*, { %Array*, double }** %82, align 8
  %84 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %83, i32 0, i32 0
  %85 = load %Array*, %Array** %84, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %85, i32 -1)
  %86 = bitcast { %Array*, double }* %83 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %86, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %87 = add i64 %79, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQTerm____adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__p__ = load i64, i64* %8, align 4
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %10 = bitcast i8* %9 to i64*
  %__qsVar4__q__ = load i64, i64* %10, align 4
  %11 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  br i1 %11, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %12 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @49, i32 0, i32 0))
  %13 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %14 = call %String* @__quantum__rt__string_concatenate(%String* %12, %String* %13)
  call void @__quantum__rt__string_update_reference_count(%String* %12, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %13, i32 -1)
  %15 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %16 = call %String* @__quantum__rt__string_concatenate(%String* %14, %String* %15)
  call void @__quantum__rt__string_update_reference_count(%String* %14, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %15, i32 -1)
  %17 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i32 -1)
  %19 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @48, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__fail(%String* %20)
  unreachable

continue__1:                                      ; preds = %entry
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %22 = bitcast i8* %21 to double*
  %23 = load double, double* %22, align 8
  %24 = fmul double 5.000000e-01, %23
  %__qsVar5__angle__ = fmul double %24, %stepSize
  %__qsVar6__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 0)
  %26 = bitcast i8* %25 to %Array**
  %27 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 1)
  %28 = bitcast i8* %27 to %Array**
  %29 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 0)
  %31 = bitcast i8* %30 to i2*
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 1)
  %33 = bitcast i8* %32 to i2*
  %34 = load i2, i2* @PauliX, align 1
  %35 = load i2, i2* @PauliY, align 1
  store i2 %34, i2* %31, align 1
  store i2 %35, i2* %33, align 1
  %36 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 0)
  %38 = bitcast i8* %37 to i2*
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 1)
  %40 = bitcast i8* %39 to i2*
  %41 = load i2, i2* @PauliY, align 1
  %42 = load i2, i2* @PauliX, align 1
  store i2 %41, i2* %38, align 1
  store i2 %42, i2* %40, align 1
  store %Array* %29, %Array** %26, align 8
  store %Array* %36, %Array** %28, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %43 = phi i64 [ 0, %continue__1 ], [ %48, %exiting__1 ]
  %44 = icmp sle i64 %43, 1
  br i1 %44, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %43)
  %46 = bitcast i8* %45 to %Array**
  %47 = load %Array*, %Array** %46, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %47, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %48 = add i64 %43, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 1)
  %__qsVar7__signs__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 0)
  %50 = bitcast i8* %49 to double*
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 1)
  %52 = bitcast i8* %51 to double*
  store double 1.000000e+00, double* %50, align 8
  store double -1.000000e+00, double* %52, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__signs__, i32 1)
  %53 = call %Array* @Microsoft__Quantum__Arrays___357bd2ab33e34755b61f70266c5f5077_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %54 = call %Array* @Microsoft__Quantum__Arrays___357bd2ab33e34755b61f70266c5f5077_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %55 = call i64 @__quantum__rt__array_get_size_1d(%Array* %54)
  %56 = sub i64 %55, 1
  %57 = load %Range, %Range* @EmptyRange, align 4
  %58 = insertvalue %Range %57, i64 %56, 0
  %59 = insertvalue %Range %58, i64 -1, 1
  %60 = insertvalue %Range %59, i64 0, 2
  %61 = call %Array* @__quantum__rt__array_slice_1d(%Array* %53, %Range %60, i1 true)
  %62 = call i64 @__quantum__rt__array_get_size_1d(%Array* %61)
  %63 = sub i64 %62, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %64 = phi i64 [ 0, %exit__1 ], [ %73, %exiting__2 ]
  %65 = icmp sle i64 %64, %63
  br i1 %65, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 %64)
  %67 = bitcast i8* %66 to { %Array*, double }**
  %68 = load { %Array*, double }*, { %Array*, double }** %67, align 8
  %69 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %68, i32 0, i32 0
  %__qsVar8__op__ = load %Array*, %Array** %69, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 1)
  %70 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %68, i32 0, i32 1
  %__qsVar9__sign__ = load double, double* %70, align 8
  %71 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar10__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %71, %Array* %__qsVar2__idxFermions__, %Array* %__qsVar8__op__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i32 1)
  %72 = fmul double %__qsVar9__sign__, %__qsVar5__angle__
  call void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %__qsVar10__pauliString__, double %72, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__pauliString__, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %73 = add i64 %64, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %74 = phi i64 [ 0, %exit__2 ], [ %79, %exiting__3 ]
  %75 = icmp sle i64 %74, 1
  br i1 %75, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %74)
  %77 = bitcast i8* %76 to %Array**
  %78 = load %Array*, %Array** %77, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %78, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %79 = add i64 %74, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__signs__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %80 = phi i64 [ 0, %exit__3 ], [ %85, %exiting__4 ]
  %81 = icmp sle i64 %80, 1
  br i1 %81, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %80)
  %83 = bitcast i8* %82 to %Array**
  %84 = load %Array*, %Array** %83, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %84, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %85 = add i64 %80, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__signs__, i32 -1)
  %86 = call i64 @__quantum__rt__array_get_size_1d(%Array* %53)
  %87 = sub i64 %86, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %88 = phi i64 [ 0, %exit__4 ], [ %96, %exiting__5 ]
  %89 = icmp sle i64 %88, %87
  br i1 %89, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %53, i64 %88)
  %91 = bitcast i8* %90 to { %Array*, double }**
  %92 = load { %Array*, double }*, { %Array*, double }** %91, align 8
  %93 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %92, i32 0, i32 0
  %94 = load %Array*, %Array** %93, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %94, i32 -1)
  %95 = bitcast { %Array*, double }* %92 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %95, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %96 = add i64 %88, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %53, i32 -1)
  %97 = sub i64 %55, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %98 = phi i64 [ 0, %exit__5 ], [ %106, %exiting__6 ]
  %99 = icmp sle i64 %98, %97
  br i1 %99, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %54, i64 %98)
  %101 = bitcast i8* %100 to { %Array*, double }**
  %102 = load { %Array*, double }*, { %Array*, double }** %101, align 8
  %103 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %102, i32 0, i32 0
  %104 = load %Array*, %Array** %103, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %104, i32 -1)
  %105 = bitcast { %Array*, double }* %102 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %105, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %106 = add i64 %98, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQTerm____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %coeff = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %12 = bitcast i8* %11 to i64*
  %p = load i64, i64* %12, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %14 = bitcast i8* %13 to i64*
  %q = load i64, i64* %14, align 4
  %15 = icmp eq i64 %p, %q
  br i1 %15, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %16 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @49, i32 0, i32 0))
  %17 = call %String* @__quantum__rt__int_to_string(i64 %p)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i32 -1)
  %19 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i32 -1)
  %21 = call %String* @__quantum__rt__int_to_string(i64 %q)
  %22 = call %String* @__quantum__rt__string_concatenate(%String* %20, %String* %21)
  call void @__quantum__rt__string_update_reference_count(%String* %20, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %21, i32 -1)
  %23 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @48, i32 0, i32 0))
  %24 = call %String* @__quantum__rt__string_concatenate(%String* %22, %String* %23)
  call void @__quantum__rt__string_update_reference_count(%String* %22, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %23, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__fail(%String* %24)
  unreachable

continue__1:                                      ; preds = %entry
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %26 = bitcast i8* %25 to double*
  %27 = load double, double* %26, align 8
  %28 = fmul double 5.000000e-01, %27
  %angle = fmul double %28, %stepSize
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %30 = bitcast i8* %29 to %Array**
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %32 = bitcast i8* %31 to %Array**
  %33 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 0)
  %35 = bitcast i8* %34 to i2*
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 1)
  %37 = bitcast i8* %36 to i2*
  %38 = load i2, i2* @PauliX, align 1
  %39 = load i2, i2* @PauliY, align 1
  store i2 %38, i2* %35, align 1
  store i2 %39, i2* %37, align 1
  %40 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 0)
  %42 = bitcast i8* %41 to i2*
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 1)
  %44 = bitcast i8* %43 to i2*
  %45 = load i2, i2* @PauliY, align 1
  %46 = load i2, i2* @PauliX, align 1
  store i2 %45, i2* %42, align 1
  store i2 %46, i2* %44, align 1
  store %Array* %33, %Array** %30, align 8
  store %Array* %40, %Array** %32, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %47 = phi i64 [ 0, %continue__1 ], [ %52, %exiting__1 ]
  %48 = icmp sle i64 %47, 1
  br i1 %48, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %47)
  %50 = bitcast i8* %49 to %Array**
  %51 = load %Array*, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %52 = add i64 %47, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %signs = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 0)
  %54 = bitcast i8* %53 to double*
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %signs, i64 1)
  %56 = bitcast i8* %55 to double*
  store double 1.000000e+00, double* %54, align 8
  store double -1.000000e+00, double* %56, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 1)
  %57 = call %Array* @Microsoft__Quantum__Arrays___357bd2ab33e34755b61f70266c5f5077_Zipped__body(%Array* %ops, %Array* %signs)
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %57)
  %59 = sub i64 %58, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %60 = phi i64 [ 0, %exit__1 ], [ %74, %exiting__2 ]
  %61 = icmp sle i64 %60, %59
  br i1 %61, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %60)
  %63 = bitcast i8* %62 to { %Array*, double }**
  %64 = load { %Array*, double }*, { %Array*, double }** %63, align 8
  %65 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %64, i32 0, i32 0
  %op = load %Array*, %Array** %65, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 1)
  %66 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %64, i32 0, i32 1
  %sign = load double, double* %66, align 8
  %67 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %pauliString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %67, %Array* %idxFermions, %Array* %op)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 1)
  %68 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %69 = bitcast %Tuple* %68 to { %Array*, double, %Array* }*
  %70 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %69, i32 0, i32 0
  %71 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %69, i32 0, i32 1
  %72 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %69, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 1)
  %73 = fmul double %sign, %angle
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store %Array* %pauliString, %Array** %70, align 8
  store double %73, double* %71, align 8
  store %Array* %qubits, %Array** %72, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %69)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %pauliString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %68, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %74 = add i64 %60, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %75 = phi i64 [ 0, %exit__2 ], [ %80, %exiting__3 ]
  %76 = icmp sle i64 %75, 1
  br i1 %76, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %75)
  %78 = bitcast i8* %77 to %Array**
  %79 = load %Array*, %Array** %78, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %79, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %80 = add i64 %75, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %signs, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %81 = phi i64 [ 0, %exit__3 ], [ %86, %exiting__4 ]
  %82 = icmp sle i64 %81, 1
  br i1 %82, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %81)
  %84 = bitcast i8* %83 to %Array**
  %85 = load %Array*, %Array** %84, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %85, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %86 = add i64 %81, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %signs, i32 -1)
  %87 = sub i64 %58, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %88 = phi i64 [ 0, %exit__4 ], [ %96, %exiting__5 ]
  %89 = icmp sle i64 %88, %87
  br i1 %89, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %90 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %88)
  %91 = bitcast i8* %90 to { %Array*, double }**
  %92 = load { %Array*, double }*, { %Array*, double }** %91, align 8
  %93 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %92, i32 0, i32 0
  %94 = load %Array*, %Array** %93, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %94, i32 -1)
  %95 = bitcast { %Array*, double }* %92 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %95, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %96 = add i64 %88, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %57, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQTerm____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__p__ = load i64, i64* %12, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %14 = bitcast i8* %13 to i64*
  %__qsVar4__q__ = load i64, i64* %14, align 4
  %15 = icmp eq i64 %__qsVar3__p__, %__qsVar4__q__
  br i1 %15, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %16 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @49, i32 0, i32 0))
  %17 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar3__p__)
  %18 = call %String* @__quantum__rt__string_concatenate(%String* %16, %String* %17)
  call void @__quantum__rt__string_update_reference_count(%String* %16, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %17, i32 -1)
  %19 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @47, i32 0, i32 0))
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i32 -1)
  %21 = call %String* @__quantum__rt__int_to_string(i64 %__qsVar4__q__)
  %22 = call %String* @__quantum__rt__string_concatenate(%String* %20, %String* %21)
  call void @__quantum__rt__string_update_reference_count(%String* %20, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %21, i32 -1)
  %23 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @48, i32 0, i32 0))
  %24 = call %String* @__quantum__rt__string_concatenate(%String* %22, %String* %23)
  call void @__quantum__rt__string_update_reference_count(%String* %22, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %23, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__fail(%String* %24)
  unreachable

continue__1:                                      ; preds = %entry
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %26 = bitcast i8* %25 to double*
  %27 = load double, double* %26, align 8
  %28 = fmul double 5.000000e-01, %27
  %__qsVar5__angle__ = fmul double %28, %stepSize
  %__qsVar6__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 0)
  %30 = bitcast i8* %29 to %Array**
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 1)
  %32 = bitcast i8* %31 to %Array**
  %33 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %34 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 0)
  %35 = bitcast i8* %34 to i2*
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %33, i64 1)
  %37 = bitcast i8* %36 to i2*
  %38 = load i2, i2* @PauliX, align 1
  %39 = load i2, i2* @PauliY, align 1
  store i2 %38, i2* %35, align 1
  store i2 %39, i2* %37, align 1
  %40 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %41 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 0)
  %42 = bitcast i8* %41 to i2*
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %40, i64 1)
  %44 = bitcast i8* %43 to i2*
  %45 = load i2, i2* @PauliY, align 1
  %46 = load i2, i2* @PauliX, align 1
  store i2 %45, i2* %42, align 1
  store i2 %46, i2* %44, align 1
  store %Array* %33, %Array** %30, align 8
  store %Array* %40, %Array** %32, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %47 = phi i64 [ 0, %continue__1 ], [ %52, %exiting__1 ]
  %48 = icmp sle i64 %47, 1
  br i1 %48, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %49 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %47)
  %50 = bitcast i8* %49 to %Array**
  %51 = load %Array*, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %52 = add i64 %47, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 1)
  %__qsVar7__signs__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 0)
  %54 = bitcast i8* %53 to double*
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar7__signs__, i64 1)
  %56 = bitcast i8* %55 to double*
  store double 1.000000e+00, double* %54, align 8
  store double -1.000000e+00, double* %56, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__signs__, i32 1)
  %57 = call %Array* @Microsoft__Quantum__Arrays___357bd2ab33e34755b61f70266c5f5077_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %58 = call %Array* @Microsoft__Quantum__Arrays___357bd2ab33e34755b61f70266c5f5077_Zipped__body(%Array* %__qsVar6__ops__, %Array* %__qsVar7__signs__)
  %59 = call i64 @__quantum__rt__array_get_size_1d(%Array* %58)
  %60 = sub i64 %59, 1
  %61 = load %Range, %Range* @EmptyRange, align 4
  %62 = insertvalue %Range %61, i64 %60, 0
  %63 = insertvalue %Range %62, i64 -1, 1
  %64 = insertvalue %Range %63, i64 0, 2
  %65 = call %Array* @__quantum__rt__array_slice_1d(%Array* %57, %Range %64, i1 true)
  %66 = call i64 @__quantum__rt__array_get_size_1d(%Array* %65)
  %67 = sub i64 %66, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %68 = phi i64 [ 0, %exit__1 ], [ %82, %exiting__2 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %68)
  %71 = bitcast i8* %70 to { %Array*, double }**
  %72 = load { %Array*, double }*, { %Array*, double }** %71, align 8
  %73 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %72, i32 0, i32 0
  %__qsVar8__op__ = load %Array*, %Array** %73, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 1)
  %74 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %72, i32 0, i32 1
  %__qsVar9__sign__ = load double, double* %74, align 8
  %75 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubits)
  %__qsVar10__pauliString__ = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliString__body(i64 %75, %Array* %__qsVar2__idxFermions__, %Array* %__qsVar8__op__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i32 1)
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %77 = bitcast %Tuple* %76 to { %Array*, double, %Array* }*
  %78 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %77, i32 0, i32 0
  %79 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %77, i32 0, i32 1
  %80 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %77, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__pauliString__, i32 1)
  %81 = fmul double %__qsVar9__sign__, %__qsVar5__angle__
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store %Array* %__qsVar10__pauliString__, %Array** %78, align 8
  store double %81, double* %79, align 8
  store %Array* %qubits, %Array** %80, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %77)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar10__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar10__pauliString__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %76, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %82 = add i64 %68, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %83 = phi i64 [ 0, %exit__2 ], [ %88, %exiting__3 ]
  %84 = icmp sle i64 %83, 1
  br i1 %84, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %85 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %83)
  %86 = bitcast i8* %85 to %Array**
  %87 = load %Array*, %Array** %86, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %87, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %88 = add i64 %83, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__signs__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %89 = phi i64 [ 0, %exit__3 ], [ %94, %exiting__4 ]
  %90 = icmp sle i64 %89, 1
  br i1 %90, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %89)
  %92 = bitcast i8* %91 to %Array**
  %93 = load %Array*, %Array** %92, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %93, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %94 = add i64 %89, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__signs__, i32 -1)
  %95 = call i64 @__quantum__rt__array_get_size_1d(%Array* %57)
  %96 = sub i64 %95, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %97 = phi i64 [ 0, %exit__4 ], [ %105, %exiting__5 ]
  %98 = icmp sle i64 %97, %96
  br i1 %98, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %99 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 %97)
  %100 = bitcast i8* %99 to { %Array*, double }**
  %101 = load { %Array*, double }*, { %Array*, double }** %100, align 8
  %102 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %101, i32 0, i32 0
  %103 = load %Array*, %Array** %102, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %103, i32 -1)
  %104 = bitcast { %Array*, double }* %101 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %104, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %105 = add i64 %97, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %57, i32 -1)
  %106 = sub i64 %59, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %107 = phi i64 [ 0, %exit__5 ], [ %115, %exiting__6 ]
  %108 = icmp sle i64 %107, %106
  br i1 %108, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %58, i64 %107)
  %110 = bitcast i8* %109 to { %Array*, double }**
  %111 = load { %Array*, double }*, { %Array*, double }** %110, align 8
  %112 = getelementptr inbounds { %Array*, double }, { %Array*, double }* %111, i32 0, i32 0
  %113 = load %Array*, %Array** %112, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %113, i32 -1)
  %114 = bitcast { %Array*, double }* %111 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %114, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %115 = add i64 %107, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %58, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  ret void
}

define internal { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorFunction____body({ { %Array*, %Array* }*, %Array* }* %generatorIndex) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %12 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %11, i32 0, i32 1
  %14 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 1)
  store %Callable* %14, %Callable** %12, align 8
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__36__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__22__FunctionTable, %Tuple* %10)
  %16 = call { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionUnitary__body(%Callable* %15)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret { %Callable* }* %16
}

define internal { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionUnitary__body(%Callable* %__Item1__) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  store %Callable* %__Item1__, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 -1)
  ret { %Callable* }* %1
}

define internal void @Lifted__PartialApplication__36__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %4 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %2, { { %Array*, %Array* }*, %Array* }** %10, align 8
  store double %5, double* %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__36__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %4 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %2, { { %Array*, %Array* }*, %Array* }** %10, align 8
  store double %5, double* %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__36__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 1
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6, align 8
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %14, align 8
  store double %9, double* %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* getelementptr ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__36__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 1
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6, align 8
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %14, align 8
  store double %9, double* %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* getelementptr ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____body({ { %Array*, %Array* }*, %Array* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____adj({ { %Array*, %Array* }*, %Array* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____ctl(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____ctladj(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__22__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %3, align 8
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 %count-change)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 %count-change)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 %count-change)
  %12 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 %count-change)
  %14 = bitcast { { %Array*, %Array* }*, %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__22__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %3, align 8
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i32 0, i32 0
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 %count-change)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 %count-change)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 %count-change)
  %12 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %4, i32 0, i32 1
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 %count-change)
  %14 = bitcast { { %Array*, %Array* }*, %Array* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %idxDoubles = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxTermType, i64 0)
  %8 = bitcast i8* %7 to i64*
  %termType = load i64, i64* %8, align 4
  %9 = icmp eq i64 %termType, 0
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQTerm____body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = icmp eq i64 %termType, 2
  br i1 %10, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQRSTerm____body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__idxDoubles__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__idxTermType__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__termType__ = load i64, i64* %8, align 4
  %9 = icmp eq i64 %__qsVar3__termType__, 0
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQTerm____adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = icmp eq i64 %__qsVar3__termType__, 2
  br i1 %10, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQRSTerm____adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %idxDoubles = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxTermType, i64 0)
  %12 = bitcast i8* %11 to i64*
  %termType = load i64, i64* %12, align 4
  %13 = icmp eq i64 %termType, 0
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %16, align 8
  store double %stepSize, double* %17, align 8
  store %Array* %qubits, %Array** %18, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQTerm____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %19 = icmp eq i64 %termType, 2
  br i1 %19, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %22 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %22, align 8
  store double %stepSize, double* %23, align 8
  store %Array* %qubits, %Array** %24, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQRSTerm____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorImpl____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__idxDoubles__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__idxTermType__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__termType__ = load i64, i64* %12, align 4
  %13 = icmp eq i64 %__qsVar3__termType__, 0
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %16, align 8
  store double %stepSize, double* %17, align 8
  store %Array* %qubits, %Array** %18, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQTerm____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %19 = icmp eq i64 %__qsVar3__termType__, 2
  br i1 %19, label %then1__1, label %continue__1

then1__1:                                         ; preds = %test1__1
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %22 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %22, align 8
  store double %stepSize, double* %23, align 8
  store %Array* %qubits, %Array** %24, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWignerClusterOperatorPQRSTerm____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then1__1, %test1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___PrepareSingleConfigurationalStateSingleSiteOccupation____body(%Array* %qubitIndices) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Array* }*
  %2 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %1, i32 0, i32 1
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitIndices, i32 1)
  store %Callable* %4, %Callable** %2, align 8
  store %Array* %qubitIndices, %Array** %3, align 8
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__37__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__23__FunctionTable, %Tuple* %0)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  ret %Callable* %5
}

define internal void @Lifted__PartialApplication__37__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__37__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, %Array* }*
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__37__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__37__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array* }*
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %9, i32 0, i32 1
  store %Array* %7, %Array** %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, %Array* }* }* getelementptr ({ %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Array*, %Array* }* %9, { %Array*, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj(%Array* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array*, %Array* }* }, { %Array*, { %Array*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj(%Array* %3, { %Array*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__23__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__23__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__body(%Array* %qubitIndices, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  call void @Microsoft__Quantum__Canon___0f6039caba3447ba9af5384ce34aedbd_ApplyToEachCA__body(%Callable* %0, %Array* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__adj(%Array* %qubitIndices, %Array* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  call void @Microsoft__Quantum__Canon___0f6039caba3447ba9af5384ce34aedbd_ApplyToEachCA__adj(%Callable* %0, %Array* %1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %1, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctl(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %qubitIndices = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, %Array* }*
  %5 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i32 0, i32 1
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %8 = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  store %Callable* %7, %Callable** %5, align 8
  store %Array* %8, %Array** %6, align 8
  call void @Microsoft__Quantum__Canon___0f6039caba3447ba9af5384ce34aedbd_ApplyToEachCA__ctl(%Array* %__controlQubits__, { %Callable*, %Array* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSingleConfigurationalStateSingleSiteOccupation__ctladj(%Array* %__controlQubits__, { %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %qubitIndices = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 1)
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %qubits = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, %Array* }*
  %5 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %4, i32 0, i32 1
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %8 = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %qubitIndices, %Array* %qubits)
  store %Callable* %7, %Callable** %5, align 8
  store %Array* %8, %Array** %6, align 8
  call void @Microsoft__Quantum__Canon___0f6039caba3447ba9af5384ce34aedbd_ApplyToEachCA__ctladj(%Array* %__controlQubits__, { %Callable*, %Array* }* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitIndices, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %7, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4__JordanWignerStateAsGeneratorIndex____body(%Array* %data, i64 %idx) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %data)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %idx)
  %15 = bitcast i8* %14 to { { double, double }*, %Array* }**
  %16 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %15, align 8
  %17 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %16, i32 0, i32 0
  %18 = load { double, double }*, { double, double }** %17, align 8
  %19 = getelementptr inbounds { double, double }, { double, double }* %18, i32 0, i32 0
  %real = load double, double* %19, align 8
  %20 = getelementptr inbounds { double, double }, { double, double }* %18, i32 0, i32 1
  %imaginary = load double, double* %20, align 8
  %21 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %16, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %21, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %22 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %23 = icmp eq i64 %22, 2
  br i1 %23, label %then0__1, label %test1__1

then0__1:                                         ; preds = %exit__1
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { %Array*, %Array* }*
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %25, i32 0, i32 1
  %28 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 0)
  %30 = bitcast i8* %29 to i64*
  store i64 0, i64* %30, align 4
  %31 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %31, i64 0)
  %33 = bitcast i8* %32 to double*
  store double %real, double* %33, align 8
  store %Array* %28, %Array** %26, align 8
  store %Array* %31, %Array** %27, align 8
  %34 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %25, %Array* %idxFermions)
  %35 = sub i64 %0, 1
  br label %header__2

test1__1:                                         ; preds = %exit__1
  %36 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %37 = icmp eq i64 %36, 4
  br i1 %37, label %then1__1, label %else__1

then1__1:                                         ; preds = %test1__1
  %38 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %39 = bitcast %Tuple* %38 to { %Array*, %Array* }*
  %40 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 0
  %41 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %39, i32 0, i32 1
  %42 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %42, i64 0)
  %44 = bitcast i8* %43 to i64*
  store i64 2, i64* %44, align 4
  %45 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %46 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %45, i64 0)
  %47 = bitcast i8* %46 to double*
  store double %real, double* %47, align 8
  store %Array* %42, %Array** %40, align 8
  store %Array* %45, %Array** %41, align 8
  %48 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %39, %Array* %idxFermions)
  %49 = sub i64 %0, 1
  br label %header__3

else__1:                                          ; preds = %test1__1
  %50 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %51 = bitcast %Tuple* %50 to { %Array*, %Array* }*
  %52 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %51, i32 0, i32 0
  %53 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %51, i32 0, i32 1
  %54 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %55 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %54, i64 0)
  %56 = bitcast i8* %55 to i64*
  store i64 -1, i64* %56, align 4
  %57 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %57, i64 0)
  %59 = bitcast i8* %58 to double*
  store double 0.000000e+00, double* %59, align 8
  store %Array* %54, %Array** %52, align 8
  store %Array* %57, %Array** %53, align 8
  %60 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 0)
  %62 = bitcast i8* %61 to i64*
  store i64 0, i64* %62, align 4
  %63 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %51, %Array* %60)
  %64 = sub i64 %0, 1
  br label %header__4

continue__1:                                      ; No predecessors!
  %65 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @15, i32 0, i32 0))
  %66 = sub i64 %0, 1
  br label %header__5

header__2:                                        ; preds = %exiting__2, %then0__1
  %67 = phi i64 [ 0, %then0__1 ], [ %78, %exiting__2 ]
  %68 = icmp sle i64 %67, %35
  br i1 %68, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %67)
  %70 = bitcast i8* %69 to { { double, double }*, %Array* }**
  %71 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %70, align 8
  %72 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %71, i32 0, i32 0
  %73 = load { double, double }*, { double, double }** %72, align 8
  %74 = bitcast { double, double }* %73 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %74, i32 -1)
  %75 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %71, i32 0, i32 1
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 -1)
  %77 = bitcast { { double, double }*, %Array* }* %71 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %78 = add i64 %67, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %34

header__3:                                        ; preds = %exiting__3, %then1__1
  %79 = phi i64 [ 0, %then1__1 ], [ %90, %exiting__3 ]
  %80 = icmp sle i64 %79, %49
  br i1 %80, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %79)
  %82 = bitcast i8* %81 to { { double, double }*, %Array* }**
  %83 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %82, align 8
  %84 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %83, i32 0, i32 0
  %85 = load { double, double }*, { double, double }** %84, align 8
  %86 = bitcast { double, double }* %85 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %86, i32 -1)
  %87 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %83, i32 0, i32 1
  %88 = load %Array*, %Array** %87, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %88, i32 -1)
  %89 = bitcast { { double, double }*, %Array* }* %83 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %89, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %90 = add i64 %79, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %42, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %38, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %48

header__4:                                        ; preds = %exiting__4, %else__1
  %91 = phi i64 [ 0, %else__1 ], [ %102, %exiting__4 ]
  %92 = icmp sle i64 %91, %64
  br i1 %92, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %91)
  %94 = bitcast i8* %93 to { { double, double }*, %Array* }**
  %95 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %94, align 8
  %96 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %95, i32 0, i32 0
  %97 = load { double, double }*, { double, double }** %96, align 8
  %98 = bitcast { double, double }* %97 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %98, i32 -1)
  %99 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %95, i32 0, i32 1
  %100 = load %Array*, %Array** %99, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 -1)
  %101 = bitcast { { double, double }*, %Array* }* %95 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %101, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %102 = add i64 %91, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %54, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %57, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %50, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %63

header__5:                                        ; preds = %exiting__5, %continue__1
  %103 = phi i64 [ 0, %continue__1 ], [ %114, %exiting__5 ]
  %104 = icmp sle i64 %103, %66
  br i1 %104, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %105 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %103)
  %106 = bitcast i8* %105 to { { double, double }*, %Array* }**
  %107 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %106, align 8
  %108 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %107, i32 0, i32 0
  %109 = load { double, double }*, { double, double }** %108, align 8
  %110 = bitcast { double, double }* %109 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %110, i32 -1)
  %111 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %107, i32 0, i32 1
  %112 = load %Array*, %Array** %111, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %112, i32 -1)
  %113 = bitcast { { double, double }*, %Array* }* %107 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %113, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %114 = add i64 %103, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__fail(%String* %65)
  unreachable
}

define internal { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %0, %Array* %__Item3__) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i32 1)
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array*, %Array* }*, %Array* }* getelementptr ({ { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { { %Array*, %Array* }*, %Array* }*
  %3 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %2, i32 0, i32 0
  %4 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %2, i32 0, i32 1
  store { %Array*, %Array* }* %0, { %Array*, %Array* }** %3, align 8
  store %Array* %__Item3__, %Array** %4, align 8
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %6 = load %Array*, %Array** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 1)
  %9 = bitcast { %Array*, %Array* }* %0 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__Item3__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__Item3__, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %2
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %angle = fmul double %10, %stepSize
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %12 = bitcast i8* %11 to i64*
  %qubitQidx = load i64, i64* %12, align 4
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %14 = icmp eq i64 %13, 2
  br i1 %14, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, %Array* }*
  %17 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 0)
  %21 = bitcast i8* %20 to double*
  store double 1.000000e+00, double* %21, align 8
  store %Array* %idxTermType, %Array** %17, align 8
  store %Array* %19, %Array** %18, align 8
  %termPR0 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %16, %Array* %idxFermions)
  %22 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR0, i32 0, i32 0
  %23 = load { %Array*, %Array* }*, { %Array*, %Array* }** %22, align 8
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 0
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 1
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  %28 = bitcast { %Array*, %Array* }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  %29 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR0, i32 0, i32 1
  %30 = load %Array*, %Array** %29, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 1)
  %31 = bitcast { { %Array*, %Array* }*, %Array* }* %termPR0 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 1)
  %32 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___body({ { %Array*, %Array* }*, %Array* }* %termPR0, double %angle, %Array* %32, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %entry
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 4
  %36 = icmp slt i64 %35, %qubitQidx
  br i1 %36, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %else__1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 4
  %40 = icmp slt i64 %qubitQidx, %39
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %else__1
  %41 = phi i1 [ %40, %condTrue__1 ], [ %36, %else__1 ]
  br i1 %41, label %then0__2, label %else__2

then0__2:                                         ; preds = %condContinue__1
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { %Array*, %Array* }*
  %44 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %43, i32 0, i32 0
  %45 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %43, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  %46 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 0)
  %48 = bitcast i8* %47 to double*
  store double 1.000000e+00, double* %48, align 8
  store %Array* %idxTermType, %Array** %44, align 8
  store %Array* %46, %Array** %45, align 8
  %49 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 0)
  %51 = bitcast i8* %50 to i64*
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 1)
  %53 = bitcast i8* %52 to i64*
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %55 = bitcast i8* %54 to i64*
  %56 = load i64, i64* %55, align 4
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %58 = bitcast i8* %57 to i64*
  %59 = load i64, i64* %58, align 4
  %60 = sub i64 %59, 1
  store i64 %56, i64* %51, align 4
  store i64 %60, i64* %53, align 4
  %termPR1 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %43, %Array* %49)
  %61 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1, i32 0, i32 0
  %62 = load { %Array*, %Array* }*, { %Array*, %Array* }** %61, align 8
  %63 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 0
  %64 = load %Array*, %Array** %63, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  %65 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 1
  %66 = load %Array*, %Array** %65, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 1)
  %67 = bitcast { %Array*, %Array* }* %62 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 1)
  %68 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1, i32 0, i32 1
  %69 = load %Array*, %Array** %68, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 1)
  %70 = bitcast { { %Array*, %Array* }*, %Array* }* %termPR1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i32 1)
  %71 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to i64*
  store i64 %qubitQidx, i64* %74, align 4
  %75 = call %Array* @Microsoft__Quantum__Arrays___0326935c2ca54c919d380dbd1cd701f2_Excluding__body(%Array* %72, %Array* %qubits)
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___body({ { %Array*, %Array* }*, %Array* }* %termPR1, double %angle, %Array* %71, %Array* %75)
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %64, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %66, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %67, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %75, i32 -1)
  br label %continue__2

else__2:                                          ; preds = %condContinue__1
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %77 = bitcast %Tuple* %76 to { %Array*, %Array* }*
  %78 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %77, i32 0, i32 0
  %79 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %77, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  %80 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %80, i64 0)
  %82 = bitcast i8* %81 to double*
  store double 1.000000e+00, double* %82, align 8
  store %Array* %idxTermType, %Array** %78, align 8
  store %Array* %80, %Array** %79, align 8
  %83 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 0)
  %85 = bitcast i8* %84 to i64*
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 1)
  %87 = bitcast i8* %86 to i64*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %89 = bitcast i8* %88 to i64*
  %90 = load i64, i64* %89, align 4
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %92 = bitcast i8* %91 to i64*
  %93 = load i64, i64* %92, align 4
  %94 = sub i64 %90, %93
  store i64 0, i64* %85, align 4
  store i64 %94, i64* %87, align 4
  %termPR1__1 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %77, %Array* %83)
  %95 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1__1, i32 0, i32 0
  %96 = load { %Array*, %Array* }*, { %Array*, %Array* }** %95, align 8
  %97 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %96, i32 0, i32 0
  %98 = load %Array*, %Array** %97, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %98, i32 1)
  %99 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %96, i32 0, i32 1
  %100 = load %Array*, %Array** %99, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 1)
  %101 = bitcast { %Array*, %Array* }* %96 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %101, i32 1)
  %102 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1__1, i32 0, i32 1
  %103 = load %Array*, %Array** %102, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 1)
  %104 = bitcast { { %Array*, %Array* }*, %Array* }* %termPR1__1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 1)
  %105 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 0)
  %107 = bitcast i8* %106 to %Qubit**
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %qubitQidx)
  %109 = bitcast i8* %108 to %Qubit**
  %110 = load %Qubit*, %Qubit** %109, align 8
  store %Qubit* %110, %Qubit** %107, align 8
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 4
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %115 = bitcast i8* %114 to i64*
  %116 = load i64, i64* %115, align 4
  %117 = load %Range, %Range* @EmptyRange, align 4
  %118 = insertvalue %Range %117, i64 %113, 0
  %119 = insertvalue %Range %118, i64 1, 1
  %120 = insertvalue %Range %119, i64 %116, 2
  %121 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %120, i1 true)
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___body({ { %Array*, %Array* }*, %Array* }* %termPR1__1, double %angle, %Array* %105, %Array* %121)
  call void @__quantum__rt__array_update_alias_count(%Array* %98, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %101, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %80, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %76, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %98, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %101, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %103, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %104, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %105, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %121, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__2, %then0__2
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %extraParityQubits, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %angle = fmul double %10, %stepSize
  %11 = load %Range, %Range* @EmptyRange, align 4
  %12 = insertvalue %Range %11, i64 0, 0
  %13 = insertvalue %Range %12, i64 1, 1
  %14 = insertvalue %Range %13, i64 1, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %idxFermions, %Range %14, i1 true)
  %qubitsPQ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %15, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 4
  %19 = add i64 %18, 1
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %21, align 4
  %23 = sub i64 %22, 1
  %24 = load %Range, %Range* @EmptyRange, align 4
  %25 = insertvalue %Range %24, i64 %19, 0
  %26 = insertvalue %Range %25, i64 1, 1
  %27 = insertvalue %Range %26, i64 %23, 2
  %qubitsJW = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %27, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsJW, i32 1)
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %29 = bitcast i8* %28 to %Array**
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %31 = bitcast i8* %30 to %Array**
  %32 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 0)
  %34 = bitcast i8* %33 to i2*
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 1)
  %36 = bitcast i8* %35 to i2*
  %37 = load i2, i2* @PauliX, align 1
  %38 = load i2, i2* @PauliX, align 1
  store i2 %37, i2* %34, align 1
  store i2 %38, i2* %36, align 1
  %39 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 0)
  %41 = bitcast i8* %40 to i2*
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 1)
  %43 = bitcast i8* %42 to i2*
  %44 = load i2, i2* @PauliY, align 1
  %45 = load i2, i2* @PauliY, align 1
  store i2 %44, i2* %41, align 1
  store i2 %45, i2* %43, align 1
  store %Array* %32, %Array** %29, align 8
  store %Array* %39, %Array** %31, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %46 = phi i64 [ 0, %entry ], [ %51, %exiting__1 ]
  %47 = icmp sle i64 %46, 1
  br i1 %47, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %46)
  %49 = bitcast i8* %48 to %Array**
  %50 = load %Array*, %Array** %49, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %51 = add i64 %46, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %52 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsJW)
  %53 = call i64 @__quantum__rt__array_get_size_1d(%Array* %extraParityQubits)
  %54 = add i64 %52, %53
  %55 = load i2, i2* @PauliZ, align 1
  %padding = call %Array* @Microsoft__Quantum__Arrays___adb2a296981c4a2d96406d8c86526db8_ConstantArray__body(i64 %54, i2 %55)
  call void @__quantum__rt__array_update_alias_count(%Array* %padding, i32 1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %56 = phi i64 [ 0, %exit__1 ], [ %63, %exiting__2 ]
  %57 = icmp sle i64 %56, 1
  br i1 %57, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %58 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %56)
  %59 = bitcast i8* %58 to %Array**
  %op = load %Array*, %Array** %59, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 1)
  %60 = call %Array* @__quantum__rt__array_concatenate(%Array* %op, %Array* %padding)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 1)
  %61 = call %Array* @__quantum__rt__array_concatenate(%Array* %qubitsPQ, %Array* %qubitsJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i32 1)
  %62 = call %Array* @__quantum__rt__array_concatenate(%Array* %61, %Array* %extraParityQubits)
  call void @__quantum__rt__array_update_reference_count(%Array* %62, i32 1)
  call void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %60, double %angle, %Array* %62)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %61, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %62, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %62, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %63 = add i64 %56, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsJW, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %64 = phi i64 [ 0, %exit__2 ], [ %69, %exiting__3 ]
  %65 = icmp sle i64 %64, 1
  br i1 %65, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %66 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %64)
  %67 = bitcast i8* %66 to %Array**
  %68 = load %Array*, %Array** %67, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %68, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %69 = add i64 %64, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %padding, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsJW, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %70 = phi i64 [ 0, %exit__3 ], [ %75, %exiting__4 ]
  %71 = icmp sle i64 %70, 1
  br i1 %71, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %70)
  %73 = bitcast i8* %72 to %Array**
  %74 = load %Array*, %Array** %73, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %75 = add i64 %70, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %padding, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %__qsVar3__angle__ = fmul double %10, %stepSize
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %12 = bitcast i8* %11 to i64*
  %__qsVar4__qubitQidx__ = load i64, i64* %12, align 4
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar2__idxFermions__)
  %14 = icmp eq i64 %13, 2
  br i1 %14, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, %Array* }*
  %17 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %19 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %19, i64 0)
  %21 = bitcast i8* %20 to double*
  store double 1.000000e+00, double* %21, align 8
  store %Array* %__qsVar0__idxTermType__, %Array** %17, align 8
  store %Array* %19, %Array** %18, align 8
  %__qsVar5__termPR0__ = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %16, %Array* %__qsVar2__idxFermions__)
  %22 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__, i32 0, i32 0
  %23 = load { %Array*, %Array* }*, { %Array*, %Array* }** %22, align 8
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 0
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %23, i32 0, i32 1
  %27 = load %Array*, %Array** %26, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  %28 = bitcast { %Array*, %Array* }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  %29 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__, i32 0, i32 1
  %30 = load %Array*, %Array** %29, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 1)
  %31 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 1)
  %32 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___adj({ { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__, double %__qsVar3__angle__, %Array* %32, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %30, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %30, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %32, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %entry
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %34 = bitcast i8* %33 to i64*
  %35 = load i64, i64* %34, align 4
  %36 = icmp slt i64 %35, %__qsVar4__qubitQidx__
  br i1 %36, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %else__1
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 4
  %40 = icmp slt i64 %__qsVar4__qubitQidx__, %39
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %else__1
  %41 = phi i1 [ %40, %condTrue__1 ], [ %36, %else__1 ]
  br i1 %41, label %then0__2, label %else__2

then0__2:                                         ; preds = %condContinue__1
  %42 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %43 = bitcast %Tuple* %42 to { %Array*, %Array* }*
  %44 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %43, i32 0, i32 0
  %45 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %43, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %46 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 0)
  %48 = bitcast i8* %47 to double*
  store double 1.000000e+00, double* %48, align 8
  store %Array* %__qsVar0__idxTermType__, %Array** %44, align 8
  store %Array* %46, %Array** %45, align 8
  %49 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %50 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 0)
  %51 = bitcast i8* %50 to i64*
  %52 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %49, i64 1)
  %53 = bitcast i8* %52 to i64*
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %55 = bitcast i8* %54 to i64*
  %56 = load i64, i64* %55, align 4
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %58 = bitcast i8* %57 to i64*
  %59 = load i64, i64* %58, align 4
  %60 = sub i64 %59, 1
  store i64 %56, i64* %51, align 4
  store i64 %60, i64* %53, align 4
  %__qsVar6__termPR1__ = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %43, %Array* %49)
  %61 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__, i32 0, i32 0
  %62 = load { %Array*, %Array* }*, { %Array*, %Array* }** %61, align 8
  %63 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 0
  %64 = load %Array*, %Array** %63, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  %65 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 1
  %66 = load %Array*, %Array** %65, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 1)
  %67 = bitcast { %Array*, %Array* }* %62 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 1)
  %68 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__, i32 0, i32 1
  %69 = load %Array*, %Array** %68, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 1)
  %70 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i32 1)
  %71 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to i64*
  store i64 %__qsVar4__qubitQidx__, i64* %74, align 4
  %75 = call %Array* @Microsoft__Quantum__Arrays___0326935c2ca54c919d380dbd1cd701f2_Excluding__body(%Array* %72, %Array* %qubits)
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___adj({ { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__, double %__qsVar3__angle__, %Array* %71, %Array* %75)
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %69, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %49, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %64, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %66, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %67, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %75, i32 -1)
  br label %continue__2

else__2:                                          ; preds = %condContinue__1
  %76 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %77 = bitcast %Tuple* %76 to { %Array*, %Array* }*
  %78 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %77, i32 0, i32 0
  %79 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %77, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %80 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %81 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %80, i64 0)
  %82 = bitcast i8* %81 to double*
  store double 1.000000e+00, double* %82, align 8
  store %Array* %__qsVar0__idxTermType__, %Array** %78, align 8
  store %Array* %80, %Array** %79, align 8
  %83 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 0)
  %85 = bitcast i8* %84 to i64*
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 1)
  %87 = bitcast i8* %86 to i64*
  %88 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %89 = bitcast i8* %88 to i64*
  %90 = load i64, i64* %89, align 4
  %91 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %92 = bitcast i8* %91 to i64*
  %93 = load i64, i64* %92, align 4
  %94 = sub i64 %90, %93
  store i64 0, i64* %85, align 4
  store i64 %94, i64* %87, align 4
  %__qsVar7__termPR1__ = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %77, %Array* %83)
  %95 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__, i32 0, i32 0
  %96 = load { %Array*, %Array* }*, { %Array*, %Array* }** %95, align 8
  %97 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %96, i32 0, i32 0
  %98 = load %Array*, %Array** %97, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %98, i32 1)
  %99 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %96, i32 0, i32 1
  %100 = load %Array*, %Array** %99, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 1)
  %101 = bitcast { %Array*, %Array* }* %96 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %101, i32 1)
  %102 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__, i32 0, i32 1
  %103 = load %Array*, %Array** %102, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 1)
  %104 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 1)
  %105 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 0)
  %107 = bitcast i8* %106 to %Qubit**
  %108 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %__qsVar4__qubitQidx__)
  %109 = bitcast i8* %108 to %Qubit**
  %110 = load %Qubit*, %Qubit** %109, align 8
  store %Qubit* %110, %Qubit** %107, align 8
  %111 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %112 = bitcast i8* %111 to i64*
  %113 = load i64, i64* %112, align 4
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %115 = bitcast i8* %114 to i64*
  %116 = load i64, i64* %115, align 4
  %117 = load %Range, %Range* @EmptyRange, align 4
  %118 = insertvalue %Range %117, i64 %113, 0
  %119 = insertvalue %Range %118, i64 1, 1
  %120 = insertvalue %Range %119, i64 %116, 2
  %121 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %120, i1 true)
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___adj({ { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__, double %__qsVar3__angle__, %Array* %105, %Array* %121)
  call void @__quantum__rt__array_update_alias_count(%Array* %98, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %101, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %80, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %76, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %98, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %101, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %103, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %104, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %105, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %121, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__2, %then0__2
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %extraParityQubits, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %__qsVar3__angle__ = fmul double %10, %stepSize
  %11 = load %Range, %Range* @EmptyRange, align 4
  %12 = insertvalue %Range %11, i64 0, 0
  %13 = insertvalue %Range %12, i64 1, 1
  %14 = insertvalue %Range %13, i64 1, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %__qsVar2__idxFermions__, %Range %14, i1 true)
  %__qsVar4__qubitsPQ__ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %15, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 1)
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 4
  %19 = add i64 %18, 1
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %21, align 4
  %23 = sub i64 %22, 1
  %24 = load %Range, %Range* @EmptyRange, align 4
  %25 = insertvalue %Range %24, i64 %19, 0
  %26 = insertvalue %Range %25, i64 1, 1
  %27 = insertvalue %Range %26, i64 %23, 2
  %__qsVar5__qubitsJW__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %27, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsJW__, i32 1)
  %__qsVar6__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 0)
  %29 = bitcast i8* %28 to %Array**
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 1)
  %31 = bitcast i8* %30 to %Array**
  %32 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 0)
  %34 = bitcast i8* %33 to i2*
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %32, i64 1)
  %36 = bitcast i8* %35 to i2*
  %37 = load i2, i2* @PauliX, align 1
  %38 = load i2, i2* @PauliX, align 1
  store i2 %37, i2* %34, align 1
  store i2 %38, i2* %36, align 1
  %39 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 0)
  %41 = bitcast i8* %40 to i2*
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %39, i64 1)
  %43 = bitcast i8* %42 to i2*
  %44 = load i2, i2* @PauliY, align 1
  %45 = load i2, i2* @PauliY, align 1
  store i2 %44, i2* %41, align 1
  store i2 %45, i2* %43, align 1
  store %Array* %32, %Array** %29, align 8
  store %Array* %39, %Array** %31, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %46 = phi i64 [ 0, %entry ], [ %51, %exiting__1 ]
  %47 = icmp sle i64 %46, 1
  br i1 %47, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %46)
  %49 = bitcast i8* %48 to %Array**
  %50 = load %Array*, %Array** %49, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %51 = add i64 %46, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 1)
  %52 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar5__qubitsJW__)
  %53 = call i64 @__quantum__rt__array_get_size_1d(%Array* %extraParityQubits)
  %54 = add i64 %52, %53
  %55 = load i2, i2* @PauliZ, align 1
  %__qsVar7__padding__ = call %Array* @Microsoft__Quantum__Arrays___adb2a296981c4a2d96406d8c86526db8_ConstantArray__body(i64 %54, i2 %55)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__padding__, i32 1)
  %56 = load %Range, %Range* @EmptyRange, align 4
  %57 = insertvalue %Range %56, i64 1, 0
  %58 = insertvalue %Range %57, i64 -1, 1
  %59 = insertvalue %Range %58, i64 0, 2
  %60 = call %Array* @__quantum__rt__array_slice_1d(%Array* %__qsVar6__ops__, %Range %59, i1 true)
  %61 = call i64 @__quantum__rt__array_get_size_1d(%Array* %60)
  %62 = sub i64 %61, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %63 = phi i64 [ 0, %exit__1 ], [ %70, %exiting__2 ]
  %64 = icmp sle i64 %63, %62
  br i1 %64, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %65 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %63)
  %66 = bitcast i8* %65 to %Array**
  %__qsVar8__op__ = load %Array*, %Array** %66, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 1)
  %67 = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar8__op__, %Array* %__qsVar7__padding__)
  call void @__quantum__rt__array_update_reference_count(%Array* %67, i32 1)
  %68 = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar4__qubitsPQ__, %Array* %__qsVar5__qubitsJW__)
  call void @__quantum__rt__array_update_reference_count(%Array* %68, i32 1)
  %69 = call %Array* @__quantum__rt__array_concatenate(%Array* %68, %Array* %extraParityQubits)
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 1)
  call void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %67, double %__qsVar3__angle__, %Array* %69)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %67, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %67, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %68, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %68, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %69, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %70 = add i64 %63, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsJW__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %71 = phi i64 [ 0, %exit__2 ], [ %76, %exiting__3 ]
  %72 = icmp sle i64 %71, 1
  br i1 %72, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %71)
  %74 = bitcast i8* %73 to %Array**
  %75 = load %Array*, %Array** %74, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %75, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %76 = add i64 %71, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__padding__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar5__qubitsJW__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %77 = phi i64 [ 0, %exit__3 ], [ %82, %exiting__4 ]
  %78 = icmp sle i64 %77, 1
  br i1 %78, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %79 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %77)
  %80 = bitcast i8* %79 to %Array**
  %81 = load %Array*, %Array** %80, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %81, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %82 = add i64 %77, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__padding__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %coeff = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double 1.000000e+00, %13
  %angle = fmul double %14, %stepSize
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %16 = bitcast i8* %15 to i64*
  %qubitQidx = load i64, i64* %16, align 4
  %17 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %18 = icmp eq i64 %17, 2
  br i1 %18, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, %Array* }*
  %21 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 0)
  %25 = bitcast i8* %24 to double*
  store double 1.000000e+00, double* %25, align 8
  store %Array* %idxTermType, %Array** %21, align 8
  store %Array* %23, %Array** %22, align 8
  %termPR0 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %20, %Array* %idxFermions)
  %26 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR0, i32 0, i32 0
  %27 = load { %Array*, %Array* }*, { %Array*, %Array* }** %26, align 8
  %28 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %27, i32 0, i32 0
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 1)
  %30 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %27, i32 0, i32 1
  %31 = load %Array*, %Array** %30, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 1)
  %32 = bitcast { %Array*, %Array* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 1)
  %33 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR0, i32 0, i32 1
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 1)
  %35 = bitcast { { %Array*, %Array* }*, %Array* }* %termPR0 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 1)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }*
  %38 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %37, i32 0, i32 1
  %40 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %37, i32 0, i32 2
  %41 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %37, i32 0, i32 3
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 1)
  %42 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %termPR0, { { %Array*, %Array* }*, %Array* }** %38, align 8
  store double %angle, double* %39, align 8
  store %Array* %42, %Array** %40, align 8
  store %Array* %qubits, %Array** %41, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %37)
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %42, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %entry
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %44 = bitcast i8* %43 to i64*
  %45 = load i64, i64* %44, align 4
  %46 = icmp slt i64 %45, %qubitQidx
  br i1 %46, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %else__1
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %48, align 4
  %50 = icmp slt i64 %qubitQidx, %49
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %else__1
  %51 = phi i1 [ %50, %condTrue__1 ], [ %46, %else__1 ]
  br i1 %51, label %then0__2, label %else__2

then0__2:                                         ; preds = %condContinue__1
  %52 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %53 = bitcast %Tuple* %52 to { %Array*, %Array* }*
  %54 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %53, i32 0, i32 0
  %55 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %53, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  %56 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 0)
  %58 = bitcast i8* %57 to double*
  store double 1.000000e+00, double* %58, align 8
  store %Array* %idxTermType, %Array** %54, align 8
  store %Array* %56, %Array** %55, align 8
  %59 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %59, i64 0)
  %61 = bitcast i8* %60 to i64*
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %59, i64 1)
  %63 = bitcast i8* %62 to i64*
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %65 = bitcast i8* %64 to i64*
  %66 = load i64, i64* %65, align 4
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %68 = bitcast i8* %67 to i64*
  %69 = load i64, i64* %68, align 4
  %70 = sub i64 %69, 1
  store i64 %66, i64* %61, align 4
  store i64 %70, i64* %63, align 4
  %termPR1 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %53, %Array* %59)
  %71 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1, i32 0, i32 0
  %72 = load { %Array*, %Array* }*, { %Array*, %Array* }** %71, align 8
  %73 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %72, i32 0, i32 0
  %74 = load %Array*, %Array** %73, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %74, i32 1)
  %75 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %72, i32 0, i32 1
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %77 = bitcast { %Array*, %Array* }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 1)
  %78 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1, i32 0, i32 1
  %79 = load %Array*, %Array** %78, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %79, i32 1)
  %80 = bitcast { { %Array*, %Array* }*, %Array* }* %termPR1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 1)
  %81 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* null, i32 1) to i64))
  %82 = bitcast %Tuple* %81 to { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }*
  %83 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %82, i32 0, i32 0
  %84 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %82, i32 0, i32 1
  %85 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %82, i32 0, i32 2
  %86 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %82, i32 0, i32 3
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 1)
  %87 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %88 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %88, i64 0)
  %90 = bitcast i8* %89 to i64*
  store i64 %qubitQidx, i64* %90, align 4
  %91 = call %Array* @Microsoft__Quantum__Arrays___0326935c2ca54c919d380dbd1cd701f2_Excluding__body(%Array* %88, %Array* %qubits)
  call void @__quantum__rt__array_update_reference_count(%Array* %88, i32 -1)
  store { { %Array*, %Array* }*, %Array* }* %termPR1, { { %Array*, %Array* }*, %Array* }** %83, align 8
  store double %angle, double* %84, align 8
  store %Array* %87, %Array** %85, align 8
  store %Array* %91, %Array** %86, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %82)
  call void @__quantum__rt__array_update_alias_count(%Array* %74, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %79, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %56, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %52, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %87, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %91, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %81, i32 -1)
  br label %continue__2

else__2:                                          ; preds = %condContinue__1
  %92 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %93 = bitcast %Tuple* %92 to { %Array*, %Array* }*
  %94 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %93, i32 0, i32 0
  %95 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %93, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  %96 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 0)
  %98 = bitcast i8* %97 to double*
  store double 1.000000e+00, double* %98, align 8
  store %Array* %idxTermType, %Array** %94, align 8
  store %Array* %96, %Array** %95, align 8
  %99 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 0)
  %101 = bitcast i8* %100 to i64*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 1)
  %103 = bitcast i8* %102 to i64*
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %105 = bitcast i8* %104 to i64*
  %106 = load i64, i64* %105, align 4
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %108 = bitcast i8* %107 to i64*
  %109 = load i64, i64* %108, align 4
  %110 = sub i64 %106, %109
  store i64 0, i64* %101, align 4
  store i64 %110, i64* %103, align 4
  %termPR1__1 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %93, %Array* %99)
  %111 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1__1, i32 0, i32 0
  %112 = load { %Array*, %Array* }*, { %Array*, %Array* }** %111, align 8
  %113 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %112, i32 0, i32 0
  %114 = load %Array*, %Array** %113, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %114, i32 1)
  %115 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %112, i32 0, i32 1
  %116 = load %Array*, %Array** %115, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %116, i32 1)
  %117 = bitcast { %Array*, %Array* }* %112 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %117, i32 1)
  %118 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %termPR1__1, i32 0, i32 1
  %119 = load %Array*, %Array** %118, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %119, i32 1)
  %120 = bitcast { { %Array*, %Array* }*, %Array* }* %termPR1__1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %120, i32 1)
  %121 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* null, i32 1) to i64))
  %122 = bitcast %Tuple* %121 to { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }*
  %123 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %122, i32 0, i32 0
  %124 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %122, i32 0, i32 1
  %125 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %122, i32 0, i32 2
  %126 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %122, i32 0, i32 3
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %117, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %119, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 1)
  %127 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %128 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %127, i64 0)
  %129 = bitcast i8* %128 to %Qubit**
  %130 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %qubitQidx)
  %131 = bitcast i8* %130 to %Qubit**
  %132 = load %Qubit*, %Qubit** %131, align 8
  store %Qubit* %132, %Qubit** %129, align 8
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %134 = bitcast i8* %133 to i64*
  %135 = load i64, i64* %134, align 4
  %136 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 3)
  %137 = bitcast i8* %136 to i64*
  %138 = load i64, i64* %137, align 4
  %139 = load %Range, %Range* @EmptyRange, align 4
  %140 = insertvalue %Range %139, i64 %135, 0
  %141 = insertvalue %Range %140, i64 1, 1
  %142 = insertvalue %Range %141, i64 %138, 2
  %143 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %142, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %143, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %143, i32 -1)
  store { { %Array*, %Array* }*, %Array* }* %termPR1__1, { { %Array*, %Array* }*, %Array* }** %123, align 8
  store double %angle, double* %124, align 8
  store %Array* %127, %Array** %125, align 8
  store %Array* %143, %Array** %126, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %122)
  call void @__quantum__rt__array_update_alias_count(%Array* %114, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %116, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %117, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %119, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %96, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %92, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %99, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %117, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %119, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %117, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %119, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %127, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %143, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %121, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__2, %then0__2
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %coeff = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 2
  %extraParityQubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 1)
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 3
  %qubits = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %13 = bitcast i8* %12 to double*
  %14 = load double, double* %13, align 8
  %15 = fmul double 1.000000e+00, %14
  %angle = fmul double %15, %stepSize
  %16 = load %Range, %Range* @EmptyRange, align 4
  %17 = insertvalue %Range %16, i64 0, 0
  %18 = insertvalue %Range %17, i64 1, 1
  %19 = insertvalue %Range %18, i64 1, 2
  %20 = call %Array* @__quantum__rt__array_slice_1d(%Array* %idxFermions, %Range %19, i1 true)
  %qubitsPQ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %20, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 4
  %24 = add i64 %23, 1
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 1)
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 4
  %28 = sub i64 %27, 1
  %29 = load %Range, %Range* @EmptyRange, align 4
  %30 = insertvalue %Range %29, i64 %24, 0
  %31 = insertvalue %Range %30, i64 1, 1
  %32 = insertvalue %Range %31, i64 %28, 2
  %qubitsJW = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %32, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsJW, i32 1)
  %ops = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 0)
  %34 = bitcast i8* %33 to %Array**
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 1)
  %36 = bitcast i8* %35 to %Array**
  %37 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 0)
  %39 = bitcast i8* %38 to i2*
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 1)
  %41 = bitcast i8* %40 to i2*
  %42 = load i2, i2* @PauliX, align 1
  %43 = load i2, i2* @PauliX, align 1
  store i2 %42, i2* %39, align 1
  store i2 %43, i2* %41, align 1
  %44 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 0)
  %46 = bitcast i8* %45 to i2*
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 1)
  %48 = bitcast i8* %47 to i2*
  %49 = load i2, i2* @PauliY, align 1
  %50 = load i2, i2* @PauliY, align 1
  store i2 %49, i2* %46, align 1
  store i2 %50, i2* %48, align 1
  store %Array* %37, %Array** %34, align 8
  store %Array* %44, %Array** %36, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %51 = phi i64 [ 0, %entry ], [ %56, %exiting__1 ]
  %52 = icmp sle i64 %51, 1
  br i1 %52, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %51)
  %54 = bitcast i8* %53 to %Array**
  %55 = load %Array*, %Array** %54, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %55, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %56 = add i64 %51, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 1)
  %57 = call i64 @__quantum__rt__array_get_size_1d(%Array* %qubitsJW)
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %extraParityQubits)
  %59 = add i64 %57, %58
  %60 = load i2, i2* @PauliZ, align 1
  %padding = call %Array* @Microsoft__Quantum__Arrays___adb2a296981c4a2d96406d8c86526db8_ConstantArray__body(i64 %59, i2 %60)
  call void @__quantum__rt__array_update_alias_count(%Array* %padding, i32 1)
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %61 = phi i64 [ 0, %exit__1 ], [ %73, %exiting__2 ]
  %62 = icmp sle i64 %61, 1
  br i1 %62, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %61)
  %64 = bitcast i8* %63 to %Array**
  %op = load %Array*, %Array** %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 1)
  %65 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %66 = bitcast %Tuple* %65 to { %Array*, double, %Array* }*
  %67 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %66, i32 0, i32 0
  %68 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %66, i32 0, i32 1
  %69 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %66, i32 0, i32 2
  %70 = call %Array* @__quantum__rt__array_concatenate(%Array* %op, %Array* %padding)
  call void @__quantum__rt__array_update_reference_count(%Array* %70, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %70, i32 -1)
  %71 = call %Array* @__quantum__rt__array_concatenate(%Array* %qubitsPQ, %Array* %qubitsJW)
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i32 1)
  %72 = call %Array* @__quantum__rt__array_concatenate(%Array* %71, %Array* %extraParityQubits)
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  store %Array* %70, %Array** %67, align 8
  store double %angle, double* %68, align 8
  store %Array* %72, %Array** %69, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %66)
  call void @__quantum__rt__array_update_alias_count(%Array* %op, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %70, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %65, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %73 = add i64 %61, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsJW, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %74 = phi i64 [ 0, %exit__2 ], [ %79, %exiting__3 ]
  %75 = icmp sle i64 %74, 1
  br i1 %75, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %76 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %74)
  %77 = bitcast i8* %76 to %Array**
  %78 = load %Array*, %Array** %77, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %78, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %79 = add i64 %74, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %padding, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsPQ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsJW, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %80 = phi i64 [ 0, %exit__3 ], [ %85, %exiting__4 ]
  %81 = icmp sle i64 %80, 1
  br i1 %81, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ops, i64 %80)
  %83 = bitcast i8* %82 to %Array**
  %84 = load %Array*, %Array** %83, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %84, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %85 = add i64 %80, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %ops, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %padding, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double 1.000000e+00, %13
  %__qsVar3__angle__ = fmul double %14, %stepSize
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %16 = bitcast i8* %15 to i64*
  %__qsVar4__qubitQidx__ = load i64, i64* %16, align 4
  %17 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar2__idxFermions__)
  %18 = icmp eq i64 %17, 2
  br i1 %18, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, %Array* }*
  %21 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %20, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %23 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %24 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %23, i64 0)
  %25 = bitcast i8* %24 to double*
  store double 1.000000e+00, double* %25, align 8
  store %Array* %__qsVar0__idxTermType__, %Array** %21, align 8
  store %Array* %23, %Array** %22, align 8
  %__qsVar5__termPR0__ = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %20, %Array* %__qsVar2__idxFermions__)
  %26 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__, i32 0, i32 0
  %27 = load { %Array*, %Array* }*, { %Array*, %Array* }** %26, align 8
  %28 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %27, i32 0, i32 0
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 1)
  %30 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %27, i32 0, i32 1
  %31 = load %Array*, %Array** %30, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 1)
  %32 = bitcast { %Array*, %Array* }* %27 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 1)
  %33 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__, i32 0, i32 1
  %34 = load %Array*, %Array** %33, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 1)
  %35 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 1)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }*
  %38 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %37, i32 0, i32 0
  %39 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %37, i32 0, i32 1
  %40 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %37, i32 0, i32 2
  %41 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %37, i32 0, i32 3
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 1)
  %42 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %__qsVar5__termPR0__, { { %Array*, %Array* }*, %Array* }** %38, align 8
  store double %__qsVar3__angle__, double* %39, align 8
  store %Array* %42, %Array** %40, align 8
  store %Array* %qubits, %Array** %41, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %37)
  call void @__quantum__rt__array_update_alias_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %31, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %34, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %42, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  br label %continue__1

else__1:                                          ; preds = %entry
  %43 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %44 = bitcast i8* %43 to i64*
  %45 = load i64, i64* %44, align 4
  %46 = icmp slt i64 %45, %__qsVar4__qubitQidx__
  br i1 %46, label %condTrue__1, label %condContinue__1

condTrue__1:                                      ; preds = %else__1
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %48 = bitcast i8* %47 to i64*
  %49 = load i64, i64* %48, align 4
  %50 = icmp slt i64 %__qsVar4__qubitQidx__, %49
  br label %condContinue__1

condContinue__1:                                  ; preds = %condTrue__1, %else__1
  %51 = phi i1 [ %50, %condTrue__1 ], [ %46, %else__1 ]
  br i1 %51, label %then0__2, label %else__2

then0__2:                                         ; preds = %condContinue__1
  %52 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %53 = bitcast %Tuple* %52 to { %Array*, %Array* }*
  %54 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %53, i32 0, i32 0
  %55 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %53, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %56 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %57 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %56, i64 0)
  %58 = bitcast i8* %57 to double*
  store double 1.000000e+00, double* %58, align 8
  store %Array* %__qsVar0__idxTermType__, %Array** %54, align 8
  store %Array* %56, %Array** %55, align 8
  %59 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %59, i64 0)
  %61 = bitcast i8* %60 to i64*
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %59, i64 1)
  %63 = bitcast i8* %62 to i64*
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %65 = bitcast i8* %64 to i64*
  %66 = load i64, i64* %65, align 4
  %67 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %68 = bitcast i8* %67 to i64*
  %69 = load i64, i64* %68, align 4
  %70 = sub i64 %69, 1
  store i64 %66, i64* %61, align 4
  store i64 %70, i64* %63, align 4
  %__qsVar6__termPR1__ = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %53, %Array* %59)
  %71 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__, i32 0, i32 0
  %72 = load { %Array*, %Array* }*, { %Array*, %Array* }** %71, align 8
  %73 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %72, i32 0, i32 0
  %74 = load %Array*, %Array** %73, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %74, i32 1)
  %75 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %72, i32 0, i32 1
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %77 = bitcast { %Array*, %Array* }* %72 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 1)
  %78 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__, i32 0, i32 1
  %79 = load %Array*, %Array** %78, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %79, i32 1)
  %80 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 1)
  %81 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* null, i32 1) to i64))
  %82 = bitcast %Tuple* %81 to { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }*
  %83 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %82, i32 0, i32 0
  %84 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %82, i32 0, i32 1
  %85 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %82, i32 0, i32 2
  %86 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %82, i32 0, i32 3
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 1)
  %87 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %88 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %88, i64 0)
  %90 = bitcast i8* %89 to i64*
  store i64 %__qsVar4__qubitQidx__, i64* %90, align 4
  %91 = call %Array* @Microsoft__Quantum__Arrays___0326935c2ca54c919d380dbd1cd701f2_Excluding__body(%Array* %88, %Array* %qubits)
  call void @__quantum__rt__array_update_reference_count(%Array* %88, i32 -1)
  store { { %Array*, %Array* }*, %Array* }* %__qsVar6__termPR1__, { { %Array*, %Array* }*, %Array* }** %83, align 8
  store double %__qsVar3__angle__, double* %84, align 8
  store %Array* %87, %Array** %85, align 8
  store %Array* %91, %Array** %86, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %82)
  call void @__quantum__rt__array_update_alias_count(%Array* %74, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %77, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %79, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %56, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %52, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %74, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %76, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %77, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %80, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %87, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %91, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %81, i32 -1)
  br label %continue__2

else__2:                                          ; preds = %condContinue__1
  %92 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %93 = bitcast %Tuple* %92 to { %Array*, %Array* }*
  %94 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %93, i32 0, i32 0
  %95 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %93, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %96 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %97 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %96, i64 0)
  %98 = bitcast i8* %97 to double*
  store double 1.000000e+00, double* %98, align 8
  store %Array* %__qsVar0__idxTermType__, %Array** %94, align 8
  store %Array* %96, %Array** %95, align 8
  %99 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %100 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 0)
  %101 = bitcast i8* %100 to i64*
  %102 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 1)
  %103 = bitcast i8* %102 to i64*
  %104 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %105 = bitcast i8* %104 to i64*
  %106 = load i64, i64* %105, align 4
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %108 = bitcast i8* %107 to i64*
  %109 = load i64, i64* %108, align 4
  %110 = sub i64 %106, %109
  store i64 0, i64* %101, align 4
  store i64 %110, i64* %103, align 4
  %__qsVar7__termPR1__ = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %93, %Array* %99)
  %111 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__, i32 0, i32 0
  %112 = load { %Array*, %Array* }*, { %Array*, %Array* }** %111, align 8
  %113 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %112, i32 0, i32 0
  %114 = load %Array*, %Array** %113, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %114, i32 1)
  %115 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %112, i32 0, i32 1
  %116 = load %Array*, %Array** %115, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %116, i32 1)
  %117 = bitcast { %Array*, %Array* }* %112 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %117, i32 1)
  %118 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__, i32 0, i32 1
  %119 = load %Array*, %Array** %118, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %119, i32 1)
  %120 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %120, i32 1)
  %121 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* null, i32 1) to i64))
  %122 = bitcast %Tuple* %121 to { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }*
  %123 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %122, i32 0, i32 0
  %124 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %122, i32 0, i32 1
  %125 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %122, i32 0, i32 2
  %126 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %122, i32 0, i32 3
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %117, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %119, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 1)
  %127 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %128 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %127, i64 0)
  %129 = bitcast i8* %128 to %Qubit**
  %130 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %__qsVar4__qubitQidx__)
  %131 = bitcast i8* %130 to %Qubit**
  %132 = load %Qubit*, %Qubit** %131, align 8
  store %Qubit* %132, %Qubit** %129, align 8
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %134 = bitcast i8* %133 to i64*
  %135 = load i64, i64* %134, align 4
  %136 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 3)
  %137 = bitcast i8* %136 to i64*
  %138 = load i64, i64* %137, align 4
  %139 = load %Range, %Range* @EmptyRange, align 4
  %140 = insertvalue %Range %139, i64 %135, 0
  %141 = insertvalue %Range %140, i64 1, 1
  %142 = insertvalue %Range %141, i64 %138, 2
  %143 = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %142, i1 true)
  call void @__quantum__rt__array_update_reference_count(%Array* %143, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %143, i32 -1)
  store { { %Array*, %Array* }*, %Array* }* %__qsVar7__termPR1__, { { %Array*, %Array* }*, %Array* }** %123, align 8
  store double %__qsVar3__angle__, double* %124, align 8
  store %Array* %127, %Array** %125, align 8
  store %Array* %143, %Array** %126, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %122)
  call void @__quantum__rt__array_update_alias_count(%Array* %114, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %116, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %117, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %119, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %96, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %92, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %99, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %117, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %119, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %114, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %117, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %119, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %120, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %127, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %143, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %121, i32 -1)
  br label %continue__2

continue__2:                                      ; preds = %else__2, %then0__2
  br label %continue__1

continue__1:                                      ; preds = %continue__2, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 2
  %extraParityQubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 1)
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array*, %Array* }* %0, i32 0, i32 3
  %qubits = load %Array*, %Array** %11, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %12 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %13 = bitcast i8* %12 to double*
  %14 = load double, double* %13, align 8
  %15 = fmul double 1.000000e+00, %14
  %__qsVar3__angle__ = fmul double %15, %stepSize
  %16 = load %Range, %Range* @EmptyRange, align 4
  %17 = insertvalue %Range %16, i64 0, 0
  %18 = insertvalue %Range %17, i64 1, 1
  %19 = insertvalue %Range %18, i64 1, 2
  %20 = call %Array* @__quantum__rt__array_slice_1d(%Array* %__qsVar2__idxFermions__, %Range %19, i1 true)
  %__qsVar4__qubitsPQ__ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %20, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 4
  %24 = add i64 %23, 1
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 1)
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 4
  %28 = sub i64 %27, 1
  %29 = load %Range, %Range* @EmptyRange, align 4
  %30 = insertvalue %Range %29, i64 %24, 0
  %31 = insertvalue %Range %30, i64 1, 1
  %32 = insertvalue %Range %31, i64 %28, 2
  %__qsVar5__qubitsJW__ = call %Array* @__quantum__rt__array_slice_1d(%Array* %qubits, %Range %32, i1 true)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsJW__, i32 1)
  %__qsVar6__ops__ = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 2)
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 0)
  %34 = bitcast i8* %33 to %Array**
  %35 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 1)
  %36 = bitcast i8* %35 to %Array**
  %37 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 0)
  %39 = bitcast i8* %38 to i2*
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %37, i64 1)
  %41 = bitcast i8* %40 to i2*
  %42 = load i2, i2* @PauliX, align 1
  %43 = load i2, i2* @PauliX, align 1
  store i2 %42, i2* %39, align 1
  store i2 %43, i2* %41, align 1
  %44 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 0)
  %46 = bitcast i8* %45 to i2*
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %44, i64 1)
  %48 = bitcast i8* %47 to i2*
  %49 = load i2, i2* @PauliY, align 1
  %50 = load i2, i2* @PauliY, align 1
  store i2 %49, i2* %46, align 1
  store i2 %50, i2* %48, align 1
  store %Array* %37, %Array** %34, align 8
  store %Array* %44, %Array** %36, align 8
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %51 = phi i64 [ 0, %entry ], [ %56, %exiting__1 ]
  %52 = icmp sle i64 %51, 1
  br i1 %52, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %53 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %51)
  %54 = bitcast i8* %53 to %Array**
  %55 = load %Array*, %Array** %54, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %55, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %56 = add i64 %51, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 1)
  %57 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar5__qubitsJW__)
  %58 = call i64 @__quantum__rt__array_get_size_1d(%Array* %extraParityQubits)
  %59 = add i64 %57, %58
  %60 = load i2, i2* @PauliZ, align 1
  %__qsVar7__padding__ = call %Array* @Microsoft__Quantum__Arrays___adb2a296981c4a2d96406d8c86526db8_ConstantArray__body(i64 %59, i2 %60)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__padding__, i32 1)
  %61 = load %Range, %Range* @EmptyRange, align 4
  %62 = insertvalue %Range %61, i64 1, 0
  %63 = insertvalue %Range %62, i64 -1, 1
  %64 = insertvalue %Range %63, i64 0, 2
  %65 = call %Array* @__quantum__rt__array_slice_1d(%Array* %__qsVar6__ops__, %Range %64, i1 true)
  %66 = call i64 @__quantum__rt__array_get_size_1d(%Array* %65)
  %67 = sub i64 %66, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %68 = phi i64 [ 0, %exit__1 ], [ %80, %exiting__2 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %65, i64 %68)
  %71 = bitcast i8* %70 to %Array**
  %__qsVar8__op__ = load %Array*, %Array** %71, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 1)
  %72 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %73 = bitcast %Tuple* %72 to { %Array*, double, %Array* }*
  %74 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %73, i32 0, i32 0
  %75 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %73, i32 0, i32 1
  %76 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %73, i32 0, i32 2
  %77 = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar8__op__, %Array* %__qsVar7__padding__)
  call void @__quantum__rt__array_update_reference_count(%Array* %77, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %77, i32 -1)
  %78 = call %Array* @__quantum__rt__array_concatenate(%Array* %__qsVar4__qubitsPQ__, %Array* %__qsVar5__qubitsJW__)
  call void @__quantum__rt__array_update_reference_count(%Array* %78, i32 1)
  %79 = call %Array* @__quantum__rt__array_concatenate(%Array* %78, %Array* %extraParityQubits)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %78, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %78, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 -1)
  store %Array* %77, %Array** %74, align 8
  store double %__qsVar3__angle__, double* %75, align 8
  store %Array* %79, %Array** %76, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %73)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar8__op__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %77, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %79, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %72, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %80 = add i64 %68, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %extraParityQubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar5__qubitsJW__, i32 -1)
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %81 = phi i64 [ 0, %exit__2 ], [ %86, %exiting__3 ]
  %82 = icmp sle i64 %81, 1
  br i1 %82, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %83 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %81)
  %84 = bitcast i8* %83 to %Array**
  %85 = load %Array*, %Array** %84, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %85, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %86 = add i64 %81, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar7__padding__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsPQ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar5__qubitsJW__, i32 -1)
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %87 = phi i64 [ 0, %exit__3 ], [ %92, %exiting__4 ]
  %88 = icmp sle i64 %87, 1
  br i1 %88, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar6__ops__, i64 %87)
  %90 = bitcast i8* %89 to %Array**
  %91 = load %Array*, %Array** %90, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %91, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %92 = add i64 %87, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar6__ops__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar7__padding__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %angle = fmul double %10, %stepSize
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 4
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %13)
  %15 = bitcast i8* %14 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %15, align 8
  %16 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 0)
  %18 = bitcast i8* %17 to i2*
  %19 = load i2, i2* @PauliZ, align 1
  store i2 %19, i2* %18, align 1
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 0)
  %22 = bitcast i8* %21 to %Qubit**
  store %Qubit* %qubit, %Qubit** %22, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %16, double %angle, %Array* %20)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %__qsVar3__angle__ = fmul double %10, %stepSize
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 4
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %13)
  %15 = bitcast i8* %14 to %Qubit**
  %__qsVar4__qubit__ = load %Qubit*, %Qubit** %15, align 8
  %16 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 0)
  %18 = bitcast i8* %17 to i2*
  %19 = load i2, i2* @PauliZ, align 1
  store i2 %19, i2* %18, align 1
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 0)
  %22 = bitcast i8* %21 to %Qubit**
  store %Qubit* %__qsVar4__qubit__, %Qubit** %22, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %16, double %__qsVar3__angle__, %Array* %20)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %coeff = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double 1.000000e+00, %13
  %angle = fmul double %14, %stepSize
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 0)
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 4
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %17)
  %19 = bitcast i8* %18 to %Qubit**
  %qubit = load %Qubit*, %Qubit** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, double, %Array* }*
  %22 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %21, i32 0, i32 2
  %25 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 0)
  %27 = bitcast i8* %26 to i2*
  %28 = load i2, i2* @PauliZ, align 1
  store i2 %28, i2* %27, align 1
  %29 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 0)
  %31 = bitcast i8* %30 to %Qubit**
  store %Qubit* %qubit, %Qubit** %31, align 8
  store %Array* %25, %Array** %22, align 8
  store double %angle, double* %23, align 8
  store %Array* %29, %Array** %24, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %21)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double 1.000000e+00, %13
  %__qsVar3__angle__ = fmul double %14, %stepSize
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar2__idxFermions__, i64 0)
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 4
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %qubits, i64 %17)
  %19 = bitcast i8* %18 to %Qubit**
  %__qsVar4__qubit__ = load %Qubit*, %Qubit** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, double, %Array* }*
  %22 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %21, i32 0, i32 2
  %25 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 0)
  %27 = bitcast i8* %26 to i2*
  %28 = load i2, i2* @PauliZ, align 1
  store i2 %28, i2* %27, align 1
  %29 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %30 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %29, i64 0)
  %31 = bitcast i8* %30 to %Qubit**
  store %Qubit* %__qsVar4__qubit__, %Qubit** %31, align 8
  store %Array* %25, %Array** %22, align 8
  store double %__qsVar3__angle__, double* %23, align 8
  store %Array* %29, %Array** %24, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %21)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___body({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %coeff = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %angle = fmul double %10, %stepSize
  %11 = load %Range, %Range* @EmptyRange, align 4
  %12 = insertvalue %Range %11, i64 0, 0
  %13 = insertvalue %Range %12, i64 1, 1
  %14 = insertvalue %Range %13, i64 1, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %idxFermions, %Range %14, i1 true)
  %qubitsZZ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %15, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsZZ, i32 1)
  %16 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 0)
  %18 = bitcast i8* %17 to i2*
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 1)
  %20 = bitcast i8* %19 to i2*
  %21 = load i2, i2* @PauliZ, align 1
  %22 = load i2, i2* @PauliZ, align 1
  store i2 %21, i2* %18, align 1
  store i2 %22, i2* %20, align 1
  call void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %16, double %angle, %Array* %qubitsZZ)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsZZ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsZZ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___adj({ { %Array*, %Array* }*, %Array* }* %term, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %8 = bitcast i8* %7 to double*
  %9 = load double, double* %8, align 8
  %10 = fmul double 1.000000e+00, %9
  %__qsVar3__angle__ = fmul double %10, %stepSize
  %11 = load %Range, %Range* @EmptyRange, align 4
  %12 = insertvalue %Range %11, i64 0, 0
  %13 = insertvalue %Range %12, i64 1, 1
  %14 = insertvalue %Range %13, i64 1, 2
  %15 = call %Array* @__quantum__rt__array_slice_1d(%Array* %__qsVar2__idxFermions__, %Range %14, i1 true)
  %__qsVar4__qubitsZZ__ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %15, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsZZ__, i32 1)
  %16 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 0)
  %18 = bitcast i8* %17 to i2*
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %16, i64 1)
  %20 = bitcast i8* %19 to i2*
  %21 = load i2, i2* @PauliZ, align 1
  %22 = load i2, i2* @PauliZ, align 1
  store i2 %21, i2* %18, align 1
  store i2 %22, i2* %20, align 1
  call void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %16, double %__qsVar3__angle__, %Array* %__qsVar4__qubitsZZ__)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsZZ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsZZ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %coeff = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coeff, i64 0)
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double 1.000000e+00, %13
  %angle = fmul double %14, %stepSize
  %15 = load %Range, %Range* @EmptyRange, align 4
  %16 = insertvalue %Range %15, i64 0, 0
  %17 = insertvalue %Range %16, i64 1, 1
  %18 = insertvalue %Range %17, i64 1, 2
  %19 = call %Array* @__quantum__rt__array_slice_1d(%Array* %idxFermions, %Range %18, i1 true)
  %qubitsZZ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %19, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsZZ, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, double, %Array* }*
  %22 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %21, i32 0, i32 2
  %25 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 0)
  %27 = bitcast i8* %26 to i2*
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 1)
  %29 = bitcast i8* %28 to i2*
  %30 = load i2, i2* @PauliZ, align 1
  %31 = load i2, i2* @PauliZ, align 1
  store i2 %30, i2* %27, align 1
  store i2 %31, i2* %29, align 1
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsZZ, i32 1)
  store %Array* %25, %Array** %22, align 8
  store double %angle, double* %23, align 8
  store %Array* %qubitsZZ, %Array** %24, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %21)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubitsZZ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsZZ, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubitsZZ, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %term = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__coeff__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %term, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar1__coeff__, i64 0)
  %12 = bitcast i8* %11 to double*
  %13 = load double, double* %12, align 8
  %14 = fmul double 1.000000e+00, %13
  %__qsVar3__angle__ = fmul double %14, %stepSize
  %15 = load %Range, %Range* @EmptyRange, align 4
  %16 = insertvalue %Range %15, i64 0, 0
  %17 = insertvalue %Range %16, i64 1, 1
  %18 = insertvalue %Range %17, i64 1, 2
  %19 = call %Array* @__quantum__rt__array_slice_1d(%Array* %__qsVar2__idxFermions__, %Range %18, i1 true)
  %__qsVar4__qubitsZZ__ = call %Array* @Microsoft__Quantum__Arrays___758e1bcfaba74a54a412d8c5435fa9d9_Subarray__body(%Array* %19, %Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsZZ__, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, double, %Array* }*
  %22 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %21, i32 0, i32 2
  %25 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 2)
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 0)
  %27 = bitcast i8* %26 to i2*
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %25, i64 1)
  %29 = bitcast i8* %28 to i2*
  %30 = load i2, i2* @PauliZ, align 1
  %31 = load i2, i2* @PauliZ, align 1
  store i2 %30, i2* %27, align 1
  store i2 %31, i2* %29, align 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsZZ__, i32 1)
  store %Array* %25, %Array** %22, align 8
  store double %__qsVar3__angle__, double* %23, align 8
  store %Array* %__qsVar4__qubitsZZ__, %Array** %24, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %21)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__coeff__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar4__qubitsZZ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsZZ__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar4__qubitsZZ__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerBitString__body(i64 %nFermions, %Array* %idxFermions) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %1 = srem i64 %0, 2
  %2 = icmp ne i64 %1, 0
  br i1 %2, label %then0__1, label %continue__1

then0__1:                                         ; preds = %entry
  %3 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([86 x i8], [86 x i8]* @50, i32 0, i32 0))
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__fail(%String* %3)
  unreachable

continue__1:                                      ; preds = %entry
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 %nFermions)
  %5 = sub i64 %nFermions, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %continue__1
  %6 = phi i64 [ 0, %continue__1 ], [ %10, %exiting__1 ]
  %7 = icmp sle i64 %6, %5
  br i1 %7, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %6)
  %9 = bitcast i8* %8 to i1*
  store i1 false, i1* %9, align 1
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %6, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %zString = alloca %Array*, align 8
  store %Array* %4, %Array** %zString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %idxFermions)
  %12 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %24, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 %13)
  %16 = bitcast i8* %15 to i64*
  %fermionIdx = load i64, i64* %16, align 4
  %17 = icmp sge i64 %fermionIdx, %nFermions
  br i1 %17, label %then0__2, label %continue__2

then0__2:                                         ; preds = %body__2
  %18 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @51, i32 0, i32 0))
  %19 = call %String* @__quantum__rt__int_to_string(i64 %fermionIdx)
  %20 = call %String* @__quantum__rt__string_concatenate(%String* %18, %String* %19)
  call void @__quantum__rt__string_update_reference_count(%String* %18, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %19, i32 -1)
  %21 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @52, i32 0, i32 0))
  %22 = call %String* @__quantum__rt__string_concatenate(%String* %20, %String* %21)
  call void @__quantum__rt__string_update_reference_count(%String* %20, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %21, i32 -1)
  %23 = load %Array*, %Array** %zString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__fail(%String* %22)
  unreachable

continue__2:                                      ; preds = %body__2
  br label %header__3

exiting__2:                                       ; preds = %exit__3
  %24 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %25 = sub i64 %11, 1
  br label %header__4

header__3:                                        ; preds = %exiting__3, %continue__2
  %idx = phi i64 [ 0, %continue__2 ], [ %35, %exiting__3 ]
  %26 = icmp sle i64 %idx, %fermionIdx
  br i1 %26, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %27 = load %Array*, %Array** %zString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 -1)
  %28 = call %Array* @__quantum__rt__array_copy(%Array* %27, i1 false)
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %idx)
  %30 = bitcast i8* %29 to i1*
  %31 = load i1, i1* %30, align 1
  %32 = xor i1 %31, true
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %28, i64 %idx)
  %34 = bitcast i8* %33 to i1*
  store i1 %32, i1* %34, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  store %Array* %28, %Array** %zString, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %idx, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  br label %exiting__2

header__4:                                        ; preds = %exiting__4, %exit__2
  %36 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__4 ]
  %37 = icmp sle i64 %36, %25
  br i1 %37, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxFermions, i64 %36)
  %39 = bitcast i8* %38 to i64*
  %fermionIdx__1 = load i64, i64* %39, align 4
  %40 = load %Array*, %Array** %zString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i32 -1)
  %41 = call %Array* @__quantum__rt__array_copy(%Array* %40, i1 false)
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %fermionIdx__1)
  %43 = bitcast i8* %42 to i1*
  store i1 false, i1* %43, align 1
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 1)
  store %Array* %41, %Array** %zString, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %40, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %44 = add i64 %36, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %45 = load %Array*, %Array** %zString, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i32 -1)
  ret %Array* %45
}

define internal %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerPauliZString__body(i64 %nFermions, %Array* %idxFermions) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %bitString = call %Array* @Microsoft__Quantum__Chemistry__JordanWigner___ComputeJordanWignerBitString__body(i64 %nFermions, %Array* %idxFermions)
  call void @__quantum__rt__array_update_alias_count(%Array* %bitString, i32 1)
  %0 = load i2, i2* @PauliZ, align 1
  %1 = call %Array* @Microsoft__Quantum__Convert__BoolArrayAsPauli__body(i2 %0, i1 true, %Array* %bitString)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %bitString, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %bitString, i32 -1)
  ret %Array* %1
}

define internal { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorEvolutionSet__body() {
entry:
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorFunction____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionSet__body(%Callable* %0)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  ret { %Callable* }* %1
}

define internal { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionSet__body(%Callable* %__Item1__) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  store %Callable* %__Item1__, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 -1)
  ret { %Callable* }* %1
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorFunction____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { %Array*, %Array* }*, %Array* }*
  %1 = call { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___JordanWignerClusterOperatorFunction____body({ { %Array*, %Array* }*, %Array* }* %0)
  %2 = bitcast %Tuple* %result-tuple to { { %Callable* }* }*
  %3 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %2, i32 0, i32 0
  store { %Callable* }* %1, { %Callable* }** %3, align 8
  ret void
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorGeneratorSystem__body(%Array* %data) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %data)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array* }* getelementptr ({ %Callable*, %Array* }, { %Callable*, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { %Callable*, %Array* }*
  %16 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %15, i32 0, i32 1
  %18 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4__JordanWignerStateAsGeneratorIndex____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %19 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %31, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %20)
  %23 = bitcast i8* %22 to { { double, double }*, %Array* }**
  %24 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %23, align 8
  %25 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %24, i32 0, i32 0
  %26 = load { double, double }*, { double, double }** %25, align 8
  %27 = bitcast { double, double }* %26 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 1)
  %28 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %24, i32 0, i32 1
  %29 = load %Array*, %Array** %28, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %29, i32 1)
  %30 = bitcast { { double, double }*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %31 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %data, i32 1)
  store %Callable* %18, %Callable** %16, align 8
  store %Array* %data, %Array** %17, align 8
  %32 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__38__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__24__FunctionTable, %Tuple* %14)
  %33 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 %0, %Callable* %32)
  %34 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %35 = phi i64 [ 0, %exit__2 ], [ %46, %exiting__3 ]
  %36 = icmp sle i64 %35, %34
  br i1 %36, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %37 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %35)
  %38 = bitcast i8* %37 to { { double, double }*, %Array* }**
  %39 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %38, align 8
  %40 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %39, i32 0, i32 0
  %41 = load { double, double }*, { double, double }** %40, align 8
  %42 = bitcast { double, double }* %41 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %42, i32 -1)
  %43 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %39, i32 0, i32 1
  %44 = load %Array*, %Array** %43, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %44, i32 -1)
  %45 = bitcast { { double, double }*, %Array* }* %39 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %45, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %46 = add i64 %35, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %32, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %32, i32 -1)
  ret { i64, %Callable* }* %33
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 %__Item1__, %Callable* %__Item2__) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item2__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item2__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { i64, %Callable* }*
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %1, i32 0, i32 1
  store i64 %__Item1__, i64* %2, align 4
  store %Callable* %__Item2__, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__Item2__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item2__, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item2__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item2__, i32 -1)
  ret { i64, %Callable* }* %1
}

define internal void @Lifted__PartialApplication__38__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { i64 }*
  %4 = getelementptr inbounds { i64 }, { i64 }* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 4
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, i64 }* getelementptr ({ %Array*, i64 }, { %Array*, i64 }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, i64 }*
  %8 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %7, i32 0, i32 1
  store %Array* %2, %Array** %8, align 8
  store i64 %5, i64* %9, align 4
  %10 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4__JordanWignerStateAsGeneratorIndex____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, i64 }*
  %1 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, i64 }, { %Array*, i64 }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load i64, i64* %2, align 4
  %5 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4__JordanWignerStateAsGeneratorIndex____body(%Array* %3, i64 %4)
  %6 = bitcast %Tuple* %result-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %7 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %6, i32 0, i32 0
  store { { %Array*, %Array* }*, %Array* }* %5, { { %Array*, %Array* }*, %Array* }** %7, align 8
  ret void
}

define internal void @MemoryManagement__24__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { double, double }*, %Array* }**
  %11 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 0
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 %count-change)
  %15 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 1
  %16 = load %Array*, %Array** %15, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 %count-change)
  %17 = bitcast { { double, double }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__24__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array* }, { %Callable*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { double, double }*, %Array* }**
  %11 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 0
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 %count-change)
  %15 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 1
  %16 = load %Array*, %Array** %15, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %16, i32 %count-change)
  %17 = bitcast { { double, double }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionEvolutionSet__body() {
entry:
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionFunction__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionSet__body(%Callable* %0)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  ret { %Callable* }* %1
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionFunction__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { %Array*, %Array* }*, %Array* }*
  %1 = call { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionFunction__body({ { %Array*, %Array* }*, %Array* }* %0)
  %2 = bitcast %Tuple* %result-tuple to { { %Callable* }* }*
  %3 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %2, i32 0, i32 0
  store { %Callable* }* %1, { %Callable* }** %3, align 8
  ret void
}

define internal { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionFunction__body({ { %Array*, %Array* }*, %Array* }* %generatorIndex) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %3 = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 1)
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %12 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %11, i32 0, i32 1
  %14 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %8, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 1)
  store %Callable* %14, %Callable** %12, align 8
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__39__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__22__FunctionTable, %Tuple* %10)
  %16 = call { %Callable* }* @Microsoft__Quantum__Simulation__EvolutionUnitary__body(%Callable* %15)
  call void @__quantum__rt__array_update_alias_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret { %Callable* }* %16
}

define internal void @Lifted__PartialApplication__39__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %4 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %2, { { %Array*, %Array* }*, %Array* }** %10, align 8
  store double %5, double* %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__39__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 1
  %2 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { double, %Array* }*
  %4 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %9, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %2, { { %Array*, %Array* }*, %Array* }** %10, align 8
  store double %5, double* %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__39__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 1
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6, align 8
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %14, align 8
  store double %9, double* %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* getelementptr ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__39__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array* }*, { double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 1
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6, align 8
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 0
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, i32 0, i32 2
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %14, align 8
  store double %9, double* %15, align 8
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* getelementptr ({ %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %13, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, { { %Array*, %Array* }*, %Array* }* }, { %Callable*, { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__body({ { %Array*, %Array* }*, %Array* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %4 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %5 = load double, double* %2, align 8
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__adj({ { %Array*, %Array* }*, %Array* }* %4, double %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctl(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }, { %Array*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctladj(%Array* %3, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %idxDoubles = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxTermType, i64 0)
  %8 = bitcast i8* %7 to i64*
  %termType = load i64, i64* %8, align 4
  %9 = icmp eq i64 %termType, 0
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = icmp eq i64 %termType, 1
  br i1 %10, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %11 = icmp eq i64 %termType, 2
  br i1 %11, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %12 = icmp eq i64 %termType, 3
  br i1 %12, label %then3__1, label %continue__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWigner0123Term_____body({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

continue__1:                                      ; preds = %then3__1, %test3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %1 = load { %Array*, %Array* }*, { %Array*, %Array* }** %0, align 8
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %__qsVar1__idxDoubles__ = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  %4 = bitcast { %Array*, %Array* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %6 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__idxTermType__, i64 0)
  %8 = bitcast i8* %7 to i64*
  %__qsVar3__termType__ = load i64, i64* %8, align 4
  %9 = icmp eq i64 %__qsVar3__termType__, 0
  br i1 %9, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %10 = icmp eq i64 %__qsVar3__termType__, 1
  br i1 %10, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %11 = icmp eq i64 %__qsVar3__termType__, 2
  br i1 %11, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %12 = icmp eq i64 %__qsVar3__termType__, 3
  br i1 %12, label %then3__1, label %continue__1

then3__1:                                         ; preds = %test3__1
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWigner0123Term_____adj({ { %Array*, %Array* }*, %Array* }* %generatorIndex, double %stepSize, %Array* %qubits)
  br label %continue__1

continue__1:                                      ; preds = %then3__1, %test3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %idxTermType = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %idxDoubles = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %idxFermions = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %idxTermType, i64 0)
  %12 = bitcast i8* %11 to i64*
  %termType = load i64, i64* %12, align 4
  %13 = icmp eq i64 %termType, 0
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %16, align 8
  store double %stepSize, double* %17, align 8
  store %Array* %qubits, %Array** %18, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %19 = icmp eq i64 %termType, 1
  br i1 %19, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %22 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %22, align 8
  store double %stepSize, double* %23, align 8
  store %Array* %qubits, %Array** %24, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %25 = icmp eq i64 %termType, 2
  br i1 %25, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %28 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27, i32 0, i32 0
  %29 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27, i32 0, i32 1
  %30 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %28, align 8
  store double %stepSize, double* %29, align 8
  store %Array* %qubits, %Array** %30, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %31 = icmp eq i64 %termType, 3
  br i1 %31, label %then3__1, label %continue__1

then3__1:                                         ; preds = %test3__1
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %34 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33, i32 0, i32 1
  %36 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %34, align 8
  store double %stepSize, double* %35, align 8
  store %Array* %qubits, %Array** %36, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWigner0123Term_____ctl(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then3__1, %test3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxTermType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxDoubles, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerFermionImpl__ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %1, align 8
  %2 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %3 = load { %Array*, %Array* }*, { %Array*, %Array* }** %2, align 8
  %4 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 0
  %__qsVar0__idxTermType__ = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %3, i32 0, i32 1
  %__qsVar1__idxDoubles__ = load %Array*, %Array** %5, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  %6 = bitcast { %Array*, %Array* }* %3 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %__qsVar2__idxFermions__ = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %8 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 1
  %stepSize = load double, double* %9, align 8
  %10 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %0, i32 0, i32 2
  %qubits = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__idxTermType__, i64 0)
  %12 = bitcast i8* %11 to i64*
  %__qsVar3__termType__ = load i64, i64* %12, align 4
  %13 = icmp eq i64 %__qsVar3__termType__, 0
  br i1 %13, label %then0__1, label %test1__1

then0__1:                                         ; preds = %entry
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %16 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %16, align 8
  store double %stepSize, double* %17, align 8
  store %Array* %qubits, %Array** %18, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %15)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  br label %continue__1

test1__1:                                         ; preds = %entry
  %19 = icmp eq i64 %__qsVar3__termType__, 1
  br i1 %19, label %then1__1, label %test2__1

then1__1:                                         ; preds = %test1__1
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %22 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %22, align 8
  store double %stepSize, double* %23, align 8
  store %Array* %qubits, %Array** %24, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerZZTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %21)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  br label %continue__1

test2__1:                                         ; preds = %test1__1
  %25 = icmp eq i64 %__qsVar3__termType__, 2
  br i1 %25, label %then2__1, label %test3__1

then2__1:                                         ; preds = %test2__1
  %26 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %27 = bitcast %Tuple* %26 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %28 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27, i32 0, i32 0
  %29 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27, i32 0, i32 1
  %30 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %28, align 8
  store double %stepSize, double* %29, align 8
  store %Array* %qubits, %Array** %30, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner___ApplyJordanWignerPQandPQQRTerm___ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %27)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  br label %continue__1

test3__1:                                         ; preds = %test2__1
  %31 = icmp eq i64 %__qsVar3__termType__, 3
  br i1 %31, label %then3__1, label %continue__1

then3__1:                                         ; preds = %test3__1
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { { { %Array*, %Array* }*, %Array* }*, double, %Array* }*
  %34 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33, i32 0, i32 1
  %36 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }*, double, %Array* }, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { { %Array*, %Array* }*, %Array* }* %generatorIndex, { { %Array*, %Array* }*, %Array* }** %34, align 8
  store double %stepSize, double* %35, align 8
  store %Array* %qubits, %Array** %36, align 8
  call void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___ApplyJordanWigner0123Term_____ctladj(%Array* %__controlQubits__, { { { %Array*, %Array* }*, %Array* }*, double, %Array* }* %33)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  br label %continue__1

continue__1:                                      ; preds = %then3__1, %test3__1, %then2__1, %then1__1, %then0__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__idxTermType__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar1__idxDoubles__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar2__idxFermions__, i32 -1)
  ret void
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerGeneratorSystem__body({ %Array*, %Array*, %Array*, %Array* }* %data) {
entry:
  %0 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 0
  %ZData = load %Array*, %Array** %0, align 8
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ZData)
  %2 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %3)
  %6 = bitcast i8* %5 to { %Array*, %Array* }**
  %7 = load { %Array*, %Array* }*, { %Array*, %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 0
  %9 = load %Array*, %Array** %8, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %9, i32 1)
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %7, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { %Array*, %Array* }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i32 1)
  %14 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 1
  %ZZData = load %Array*, %Array** %14, align 8
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %ZZData)
  %16 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %17)
  %20 = bitcast i8* %19 to { %Array*, %Array* }**
  %21 = load { %Array*, %Array* }*, { %Array*, %Array* }** %20, align 8
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 0
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 1
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  %26 = bitcast { %Array*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i32 1)
  %28 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 2
  %PQandPQQRData = load %Array*, %Array** %28, align 8
  %29 = call i64 @__quantum__rt__array_get_size_1d(%Array* %PQandPQQRData)
  %30 = sub i64 %29, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %31 = phi i64 [ 0, %exit__2 ], [ %41, %exiting__3 ]
  %32 = icmp sle i64 %31, %30
  br i1 %32, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %33 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %31)
  %34 = bitcast i8* %33 to { %Array*, %Array* }**
  %35 = load { %Array*, %Array* }*, { %Array*, %Array* }** %34, align 8
  %36 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %35, i32 0, i32 0
  %37 = load %Array*, %Array** %36, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %37, i32 1)
  %38 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %35, i32 0, i32 1
  %39 = load %Array*, %Array** %38, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %39, i32 1)
  %40 = bitcast { %Array*, %Array* }* %35 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %40, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %41 = add i64 %31, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i32 1)
  %42 = getelementptr inbounds { %Array*, %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array*, %Array* }* %data, i32 0, i32 3
  %h0123Data = load %Array*, %Array** %42, align 8
  %43 = call i64 @__quantum__rt__array_get_size_1d(%Array* %h0123Data)
  %44 = sub i64 %43, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %45 = phi i64 [ 0, %exit__3 ], [ %55, %exiting__4 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %45)
  %48 = bitcast i8* %47 to { %Array*, %Array* }**
  %49 = load { %Array*, %Array* }*, { %Array*, %Array* }** %48, align 8
  %50 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %49, i32 0, i32 0
  %51 = load %Array*, %Array** %50, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %51, i32 1)
  %52 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %49, i32 0, i32 1
  %53 = load %Array*, %Array** %52, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %53, i32 1)
  %54 = bitcast { %Array*, %Array* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %54, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %55 = add i64 %45, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i32 1)
  %56 = bitcast { %Array*, %Array*, %Array*, %Array* }* %data to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 1)
  %57 = sub i64 %1, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %58 = phi i64 [ 0, %exit__4 ], [ %68, %exiting__5 ]
  %59 = icmp sle i64 %58, %57
  br i1 %59, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %60 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %58)
  %61 = bitcast i8* %60 to { %Array*, %Array* }**
  %62 = load { %Array*, %Array* }*, { %Array*, %Array* }** %61, align 8
  %63 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 0
  %64 = load %Array*, %Array** %63, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %64, i32 1)
  %65 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %62, i32 0, i32 1
  %66 = load %Array*, %Array** %65, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 1)
  %67 = bitcast { %Array*, %Array* }* %62 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %67, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %68 = add i64 %58, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i32 1)
  %69 = sub i64 %15, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %70 = phi i64 [ 0, %exit__5 ], [ %80, %exiting__6 ]
  %71 = icmp sle i64 %70, %69
  br i1 %71, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %72 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %70)
  %73 = bitcast i8* %72 to { %Array*, %Array* }**
  %74 = load { %Array*, %Array* }*, { %Array*, %Array* }** %73, align 8
  %75 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %74, i32 0, i32 0
  %76 = load %Array*, %Array** %75, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %76, i32 1)
  %77 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %74, i32 0, i32 1
  %78 = load %Array*, %Array** %77, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %78, i32 1)
  %79 = bitcast { %Array*, %Array* }* %74 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %79, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %80 = add i64 %70, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i32 1)
  %81 = sub i64 %29, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %82 = phi i64 [ 0, %exit__6 ], [ %92, %exiting__7 ]
  %83 = icmp sle i64 %82, %81
  br i1 %83, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %84 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %82)
  %85 = bitcast i8* %84 to { %Array*, %Array* }**
  %86 = load { %Array*, %Array* }*, { %Array*, %Array* }** %85, align 8
  %87 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %86, i32 0, i32 0
  %88 = load %Array*, %Array** %87, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %88, i32 1)
  %89 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %86, i32 0, i32 1
  %90 = load %Array*, %Array** %89, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %90, i32 1)
  %91 = bitcast { %Array*, %Array* }* %86 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %91, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %92 = add i64 %82, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i32 1)
  %93 = sub i64 %43, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %94 = phi i64 [ 0, %exit__7 ], [ %104, %exiting__8 ]
  %95 = icmp sle i64 %94, %93
  br i1 %95, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %96 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %94)
  %97 = bitcast i8* %96 to { %Array*, %Array* }**
  %98 = load { %Array*, %Array* }*, { %Array*, %Array* }** %97, align 8
  %99 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %98, i32 0, i32 0
  %100 = load %Array*, %Array** %99, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 1)
  %101 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %98, i32 0, i32 1
  %102 = load %Array*, %Array** %101, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %102, i32 1)
  %103 = bitcast { %Array*, %Array* }* %98 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %103, i32 1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %104 = add i64 %94, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i32 1)
  %105 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %106 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %105, i64 0)
  %107 = bitcast i8* %106 to i64*
  store i64 0, i64* %107, align 4
  %ZGenSys = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__HTermsToGenSys__body(%Array* %ZData, %Array* %105)
  %108 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %ZGenSys, i32 0, i32 1
  %109 = load %Callable*, %Callable** %108, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %109, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %109, i32 1)
  %110 = bitcast { i64, %Callable* }* %ZGenSys to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %110, i32 1)
  %111 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %112 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %111, i64 0)
  %113 = bitcast i8* %112 to i64*
  store i64 1, i64* %113, align 4
  %ZZGenSys = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__HTermsToGenSys__body(%Array* %ZZData, %Array* %111)
  %114 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %ZZGenSys, i32 0, i32 1
  %115 = load %Callable*, %Callable** %114, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %115, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %115, i32 1)
  %116 = bitcast { i64, %Callable* }* %ZZGenSys to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %116, i32 1)
  %117 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %117, i64 0)
  %119 = bitcast i8* %118 to i64*
  store i64 2, i64* %119, align 4
  %PQandPQQRGenSys = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__HTermsToGenSys__body(%Array* %PQandPQQRData, %Array* %117)
  %120 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %PQandPQQRGenSys, i32 0, i32 1
  %121 = load %Callable*, %Callable** %120, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %121, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %121, i32 1)
  %122 = bitcast { i64, %Callable* }* %PQandPQQRGenSys to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %122, i32 1)
  %123 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %124 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %123, i64 0)
  %125 = bitcast i8* %124 to i64*
  store i64 3, i64* %125, align 4
  %h0123GenSys = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__HTermsToGenSys__body(%Array* %h0123Data, %Array* %123)
  %126 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %h0123GenSys, i32 0, i32 1
  %127 = load %Callable*, %Callable** %126, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %127, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %127, i32 1)
  %128 = bitcast { i64, %Callable* }* %h0123GenSys to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %128, i32 1)
  %129 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 4)
  %130 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 0)
  %131 = bitcast i8* %130 to { i64, %Callable* }**
  %132 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 1)
  %133 = bitcast i8* %132 to { i64, %Callable* }**
  %134 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 2)
  %135 = bitcast i8* %134 to { i64, %Callable* }**
  %136 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 3)
  %137 = bitcast i8* %136 to { i64, %Callable* }**
  call void @__quantum__rt__capture_update_reference_count(%Callable* %109, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %109, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %110, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %115, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %115, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %116, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %121, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %121, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %122, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %127, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %127, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %128, i32 1)
  store { i64, %Callable* }* %ZGenSys, { i64, %Callable* }** %131, align 8
  store { i64, %Callable* }* %ZZGenSys, { i64, %Callable* }** %133, align 8
  store { i64, %Callable* }* %PQandPQQRGenSys, { i64, %Callable* }** %135, align 8
  store { i64, %Callable* }* %h0123GenSys, { i64, %Callable* }** %137, align 8
  %138 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__SumGeneratorSystems__body(%Array* %129)
  %139 = sub i64 %1, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %140 = phi i64 [ 0, %exit__8 ], [ %150, %exiting__9 ]
  %141 = icmp sle i64 %140, %139
  br i1 %141, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %140)
  %143 = bitcast i8* %142 to { %Array*, %Array* }**
  %144 = load { %Array*, %Array* }*, { %Array*, %Array* }** %143, align 8
  %145 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %144, i32 0, i32 0
  %146 = load %Array*, %Array** %145, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %146, i32 -1)
  %147 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %144, i32 0, i32 1
  %148 = load %Array*, %Array** %147, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %148, i32 -1)
  %149 = bitcast { %Array*, %Array* }* %144 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %149, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %150 = add i64 %140, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i32 -1)
  %151 = sub i64 %15, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %152 = phi i64 [ 0, %exit__9 ], [ %162, %exiting__10 ]
  %153 = icmp sle i64 %152, %151
  br i1 %153, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %154 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %152)
  %155 = bitcast i8* %154 to { %Array*, %Array* }**
  %156 = load { %Array*, %Array* }*, { %Array*, %Array* }** %155, align 8
  %157 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %156, i32 0, i32 0
  %158 = load %Array*, %Array** %157, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %158, i32 -1)
  %159 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %156, i32 0, i32 1
  %160 = load %Array*, %Array** %159, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %160, i32 -1)
  %161 = bitcast { %Array*, %Array* }* %156 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %161, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %162 = add i64 %152, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i32 -1)
  %163 = sub i64 %29, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %164 = phi i64 [ 0, %exit__10 ], [ %174, %exiting__11 ]
  %165 = icmp sle i64 %164, %163
  br i1 %165, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %166 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %164)
  %167 = bitcast i8* %166 to { %Array*, %Array* }**
  %168 = load { %Array*, %Array* }*, { %Array*, %Array* }** %167, align 8
  %169 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %168, i32 0, i32 0
  %170 = load %Array*, %Array** %169, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %170, i32 -1)
  %171 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %168, i32 0, i32 1
  %172 = load %Array*, %Array** %171, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %172, i32 -1)
  %173 = bitcast { %Array*, %Array* }* %168 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %173, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %174 = add i64 %164, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i32 -1)
  %175 = sub i64 %43, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %176 = phi i64 [ 0, %exit__11 ], [ %186, %exiting__12 ]
  %177 = icmp sle i64 %176, %175
  br i1 %177, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %178 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %176)
  %179 = bitcast i8* %178 to { %Array*, %Array* }**
  %180 = load { %Array*, %Array* }*, { %Array*, %Array* }** %179, align 8
  %181 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %180, i32 0, i32 0
  %182 = load %Array*, %Array** %181, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %182, i32 -1)
  %183 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %180, i32 0, i32 1
  %184 = load %Array*, %Array** %183, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %184, i32 -1)
  %185 = bitcast { %Array*, %Array* }* %180 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %185, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %186 = add i64 %176, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 -1)
  %187 = sub i64 %1, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %188 = phi i64 [ 0, %exit__12 ], [ %198, %exiting__13 ]
  %189 = icmp sle i64 %188, %187
  br i1 %189, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %190 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZData, i64 %188)
  %191 = bitcast i8* %190 to { %Array*, %Array* }**
  %192 = load { %Array*, %Array* }*, { %Array*, %Array* }** %191, align 8
  %193 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %192, i32 0, i32 0
  %194 = load %Array*, %Array** %193, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %194, i32 -1)
  %195 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %192, i32 0, i32 1
  %196 = load %Array*, %Array** %195, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %196, i32 -1)
  %197 = bitcast { %Array*, %Array* }* %192 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %197, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %198 = add i64 %188, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %ZData, i32 -1)
  %199 = sub i64 %15, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %200 = phi i64 [ 0, %exit__13 ], [ %210, %exiting__14 ]
  %201 = icmp sle i64 %200, %199
  br i1 %201, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %202 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %ZZData, i64 %200)
  %203 = bitcast i8* %202 to { %Array*, %Array* }**
  %204 = load { %Array*, %Array* }*, { %Array*, %Array* }** %203, align 8
  %205 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %204, i32 0, i32 0
  %206 = load %Array*, %Array** %205, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %206, i32 -1)
  %207 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %204, i32 0, i32 1
  %208 = load %Array*, %Array** %207, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %208, i32 -1)
  %209 = bitcast { %Array*, %Array* }* %204 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %209, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %210 = add i64 %200, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_alias_count(%Array* %ZZData, i32 -1)
  %211 = sub i64 %29, 1
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %212 = phi i64 [ 0, %exit__14 ], [ %222, %exiting__15 ]
  %213 = icmp sle i64 %212, %211
  br i1 %213, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %214 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %PQandPQQRData, i64 %212)
  %215 = bitcast i8* %214 to { %Array*, %Array* }**
  %216 = load { %Array*, %Array* }*, { %Array*, %Array* }** %215, align 8
  %217 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %216, i32 0, i32 0
  %218 = load %Array*, %Array** %217, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %218, i32 -1)
  %219 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %216, i32 0, i32 1
  %220 = load %Array*, %Array** %219, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %220, i32 -1)
  %221 = bitcast { %Array*, %Array* }* %216 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %221, i32 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %222 = add i64 %212, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_alias_count(%Array* %PQandPQQRData, i32 -1)
  %223 = sub i64 %43, 1
  br label %header__16

header__16:                                       ; preds = %exiting__16, %exit__15
  %224 = phi i64 [ 0, %exit__15 ], [ %234, %exiting__16 ]
  %225 = icmp sle i64 %224, %223
  br i1 %225, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %226 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %h0123Data, i64 %224)
  %227 = bitcast i8* %226 to { %Array*, %Array* }**
  %228 = load { %Array*, %Array* }*, { %Array*, %Array* }** %227, align 8
  %229 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %228, i32 0, i32 0
  %230 = load %Array*, %Array** %229, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %230, i32 -1)
  %231 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %228, i32 0, i32 1
  %232 = load %Array*, %Array** %231, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %232, i32 -1)
  %233 = bitcast { %Array*, %Array* }* %228 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %233, i32 -1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %234 = add i64 %224, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_alias_count(%Array* %h0123Data, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %109, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %109, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %110, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %115, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %115, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %116, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %121, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %121, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %122, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %127, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %127, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %128, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %105, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %109, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %109, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %110, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %111, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %115, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %115, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %116, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %117, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %121, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %121, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %122, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %123, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %127, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %127, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %128, i32 -1)
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %235 = phi i64 [ 0, %exit__16 ], [ %243, %exiting__17 ]
  %236 = icmp sle i64 %235, 3
  br i1 %236, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %237 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 %235)
  %238 = bitcast i8* %237 to { i64, %Callable* }**
  %239 = load { i64, %Callable* }*, { i64, %Callable* }** %238, align 8
  %240 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %239, i32 0, i32 1
  %241 = load %Callable*, %Callable** %240, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %241, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %241, i32 -1)
  %242 = bitcast { i64, %Callable* }* %239 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %242, i32 -1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %243 = add i64 %235, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_reference_count(%Array* %129, i32 -1)
  ret { i64, %Callable* }* %138
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Chemistry__HTermsToGenSys__body(%Array* %data, %Array* %termType) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %data)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %2)
  %5 = bitcast i8* %4 to { %Array*, %Array* }**
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %termType, i32 1)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Array*, %Array* }* getelementptr ({ %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { %Callable*, %Array*, %Array* }*
  %15 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %14, i32 0, i32 1
  %17 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %14, i32 0, i32 2
  %18 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__HTermsToGenIdx__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %19 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %20 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %20)
  %23 = bitcast i8* %22 to { %Array*, %Array* }**
  %24 = load { %Array*, %Array* }*, { %Array*, %Array* }** %23, align 8
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 0
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %26, i32 1)
  %27 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 1
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 1)
  %29 = bitcast { %Array*, %Array* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %20, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %data, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %termType, i32 1)
  store %Callable* %18, %Callable** %15, align 8
  store %Array* %data, %Array** %16, align 8
  store %Array* %termType, %Array** %17, align 8
  %31 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__43__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__27__FunctionTable, %Tuple* %13)
  %32 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 %0, %Callable* %31)
  %33 = sub i64 %0, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %34 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %35 = icmp sle i64 %34, %33
  br i1 %35, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %36 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %34)
  %37 = bitcast i8* %36 to { %Array*, %Array* }**
  %38 = load { %Array*, %Array* }*, { %Array*, %Array* }** %37, align 8
  %39 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %38, i32 0, i32 0
  %40 = load %Array*, %Array** %39, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %40, i32 -1)
  %41 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %38, i32 0, i32 1
  %42 = load %Array*, %Array** %41, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %42, i32 -1)
  %43 = bitcast { %Array*, %Array* }* %38 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %34, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %termType, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  ret { i64, %Callable* }* %32
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Simulation__SumGeneratorSystems__body(%Array* %generatorSystems) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %generatorSystems)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %generatorSystems, i64 %2)
  %5 = bitcast i8* %4 to { i64, %Callable* }**
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %5, align 8
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  %9 = bitcast { i64, %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %generatorSystems, i32 1)
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation__AddGeneratorSystems__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %12 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__IdentityGeneratorSystem__body()
  %13 = call { i64, %Callable* }* @Microsoft__Quantum__Arrays___720c2e0ba071457cbb57cb509a02e447_Fold__body(%Callable* %11, { i64, %Callable* }* %12, %Array* %generatorSystems)
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %12, i32 0, i32 1
  %15 = load %Callable*, %Callable** %14, align 8
  %16 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %17 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %generatorSystems, i64 %17)
  %20 = bitcast i8* %19 to { i64, %Callable* }**
  %21 = load { i64, %Callable* }*, { i64, %Callable* }** %20, align 8
  %22 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %21, i32 0, i32 1
  %23 = load %Callable*, %Callable** %22, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %23, i32 -1)
  %24 = bitcast { i64, %Callable* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %17, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %generatorSystems, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  %26 = bitcast { i64, %Callable* }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  ret { i64, %Callable* }* %13
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareSparseMultiConfigurationalState__body(%Callable* %initialStatePreparation, %Array* %excitations, %Array* %qubits) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %initialStatePreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %initialStatePreparation, i32 1)
  %nExcitations = call i64 @__quantum__rt__array_get_size_1d(%Array* %excitations)
  %0 = sub i64 %nExcitations, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %1 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %2 = icmp sle i64 %1, %0
  br i1 %2, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %3 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %excitations, i64 %1)
  %4 = bitcast i8* %3 to { { double, double }*, %Array* }**
  %5 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %4, align 8
  %6 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %5, i32 0, i32 0
  %7 = load { double, double }*, { double, double }** %6, align 8
  %8 = bitcast { double, double }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %5, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { { double, double }*, %Array* }* %5 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %1, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %excitations, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %13 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nExcitations)
  %14 = sub i64 %nExcitations, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 %15)
  %18 = bitcast i8* %17 to double*
  store double 0.000000e+00, double* %18, align 8
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %coefficientsSqrtAbs = alloca %Array*, align 8
  store %Array* %13, %Array** %coefficientsSqrtAbs, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  %20 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double 0.000000e+00, double 0.000000e+00)
  %21 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nExcitations)
  %22 = sub i64 %nExcitations, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %23 = phi i64 [ 0, %exit__2 ], [ %28, %exiting__3 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 %23)
  %26 = bitcast i8* %25 to { double, double }**
  store { double, double }* %20, { double, double }** %26, align 8
  %27 = bitcast { double, double }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %28 = add i64 %23, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %coefficientsNewComplexPolar = alloca %Array*, align 8
  store %Array* %21, %Array** %coefficientsNewComplexPolar, align 8
  %29 = sub i64 %nExcitations, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %30 = phi i64 [ 0, %exit__3 ], [ %36, %exiting__4 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %21, i64 %30)
  %33 = bitcast i8* %32 to { double, double }**
  %34 = load { double, double }*, { double, double }** %33, align 8
  %35 = bitcast { double, double }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %35, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %36 = add i64 %30, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %21, i32 1)
  %37 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %38 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %nExcitations)
  %39 = sub i64 %nExcitations, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %40 = phi i64 [ 0, %exit__4 ], [ %44, %exiting__5 ]
  %41 = icmp sle i64 %40, %39
  br i1 %41, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %42 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 %40)
  %43 = bitcast i8* %42 to %Array**
  store %Array* %37, %Array** %43, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %44 = add i64 %40, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %applyFlips = alloca %Array*, align 8
  store %Array* %38, %Array** %applyFlips, align 8
  %45 = sub i64 %nExcitations, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %46 = phi i64 [ 0, %exit__5 ], [ %51, %exiting__6 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %38, i64 %46)
  %49 = bitcast i8* %48 to %Array**
  %50 = load %Array*, %Array** %49, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %50, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %51 = add i64 %46, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %38, i32 1)
  %52 = sub i64 %nExcitations, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %idx = phi i64 [ 0, %exit__6 ], [ %94, %exiting__7 ]
  %53 = icmp sle i64 %idx, %52
  br i1 %53, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %excitations, i64 %idx)
  %55 = bitcast i8* %54 to { { double, double }*, %Array* }**
  %56 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %55, align 8
  %57 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %56, i32 0, i32 0
  %x = load { double, double }*, { double, double }** %57, align 8
  %58 = bitcast { double, double }* %x to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %58, i32 1)
  %59 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %56, i32 0, i32 1
  %excitation = load %Array*, %Array** %59, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %excitation, i32 1)
  %60 = load %Array*, %Array** %coefficientsSqrtAbs, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i32 -1)
  %61 = call %Array* @__quantum__rt__array_copy(%Array* %60, i1 false)
  %62 = getelementptr inbounds { double, double }, { double, double }* %x, i32 0, i32 0
  %63 = getelementptr inbounds { double, double }, { double, double }* %x, i32 0, i32 1
  %64 = load double, double* %62, align 8
  %65 = load double, double* %63, align 8
  %66 = call { double, double }* @Microsoft__Quantum__Math__Complex__body(double %64, double %65)
  %67 = call { double, double }* @Microsoft__Quantum__Math__ComplexAsComplexPolar__body({ double, double }* %66)
  %d = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %67)
  %68 = call double @__quantum__qis__sqrt__body(double %d)
  %69 = bitcast { double, double }* %66 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %69, i32 -1)
  %70 = bitcast { double, double }* %67 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %70, i32 -1)
  %71 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 %idx)
  %72 = bitcast i8* %71 to double*
  store double %68, double* %72, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %61, i32 1)
  store %Array* %61, %Array** %coefficientsSqrtAbs, align 8
  %73 = load %Array*, %Array** %coefficientsNewComplexPolar, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %73, i32 -1)
  %74 = call %Array* @__quantum__rt__array_copy(%Array* %73, i1 false)
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %61, i64 %idx)
  %76 = bitcast i8* %75 to double*
  %77 = load double, double* %76, align 8
  %78 = call { double, double }* @Microsoft__Quantum__Math__Complex__body(double %64, double %65)
  %79 = call { double, double }* @Microsoft__Quantum__Math__ComplexAsComplexPolar__body({ double, double }* %78)
  %80 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %79)
  %81 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %77, double %80)
  %82 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %74, i64 %idx)
  %83 = bitcast i8* %82 to { double, double }**
  %84 = bitcast { double, double }* %81 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %84, i32 1)
  %85 = load { double, double }*, { double, double }** %83, align 8
  %86 = bitcast { double, double }* %85 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %86, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %86, i32 -1)
  store { double, double }* %81, { double, double }** %83, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %74, i32 1)
  store %Array* %74, %Array** %coefficientsNewComplexPolar, align 8
  %87 = load %Array*, %Array** %applyFlips, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %87, i32 -1)
  %88 = call %Array* @__quantum__rt__array_copy(%Array* %87, i1 false)
  %89 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %88, i64 %idx)
  %90 = bitcast i8* %89 to %Array**
  call void @__quantum__rt__array_update_alias_count(%Array* %excitation, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %excitation, i32 1)
  %91 = load %Array*, %Array** %90, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %91, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %91, i32 -1)
  store %Array* %excitation, %Array** %90, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %88, i32 1)
  store %Array* %88, %Array** %applyFlips, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %58, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %excitation, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %73, i32 -1)
  %92 = bitcast { double, double }* %78 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %92, i32 -1)
  %93 = bitcast { double, double }* %79 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %93, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %87, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %94 = add i64 %idx, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  %95 = sitofp i64 %nExcitations to double
  %96 = call double @Microsoft__Quantum__Math__Lg__body(double %95)
  %nBitsIndices = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %96)
  br label %repeat__1

repeat__1:                                        ; preds = %fixup__1, %exit__7
  %success = alloca i1, align 1
  store i1 false, i1* %success, align 1
  %97 = add i64 %nBitsIndices, 1
  %auxillary = call %Array* @__quantum__rt__qubit_allocate_array(i64 %97)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxillary, i32 1)
  %flag = call %Qubit* @__quantum__rt__qubit_allocate()
  %98 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___PrepareSingleConfigurationalStateSingleSiteOccupation____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %99 = load %Array*, %Array** %applyFlips, align 8
  %100 = call %Array* @Microsoft__Quantum__Arrays___6c811943f2a44a079ede392478715169_Mapped__body(%Callable* %98, %Array* %99)
  %101 = call %Callable* @Microsoft__Quantum__Arrays___185dd1358b4341c98f17b9bb52b1162f_LookupFunction__body(%Array* %100)
  %multiplexer = call %Callable* @Microsoft__Quantum__Canon__MultiplexerBruteForceFromGenerator__body(i64 %nExcitations, %Callable* %101)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %multiplexer, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %multiplexer, i32 1)
  %102 = load %Array*, %Array** %coefficientsNewComplexPolar, align 8
  %103 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxillary)
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__body(%Array* %102, { %Array* }* %103)
  %104 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Array* }*, %Array* }* getelementptr ({ { %Array* }*, %Array* }, { { %Array* }*, %Array* }* null, i32 1) to i64))
  %105 = bitcast %Tuple* %104 to { { %Array* }*, %Array* }*
  %106 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %105, i32 0, i32 0
  %107 = getelementptr inbounds { { %Array* }*, %Array* }, { { %Array* }*, %Array* }* %105, i32 0, i32 1
  %108 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxillary)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { %Array* }* %108, { %Array* }** %106, align 8
  store %Array* %qubits, %Array** %107, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %multiplexer, %Tuple* %104, %Tuple* null)
  %109 = load %Array*, %Array** %coefficientsSqrtAbs, align 8
  %110 = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %auxillary)
  call void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj(%Array* %109, { %Array* }* %110)
  %111 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Intrinsic__X__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %112 = call %Callable* @Microsoft__Quantum__Canon___05911784854a4b2dbed56f5181ebb2a2_ControlledOnInt__body(i64 0, %Callable* %111)
  %113 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Qubit* }* getelementptr ({ %Array*, %Qubit* }, { %Array*, %Qubit* }* null, i32 1) to i64))
  %114 = bitcast %Tuple* %113 to { %Array*, %Qubit* }*
  %115 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %114, i32 0, i32 0
  %116 = getelementptr inbounds { %Array*, %Qubit* }, { %Array*, %Qubit* }* %114, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %auxillary, i32 1)
  store %Array* %auxillary, %Array** %115, align 8
  store %Qubit* %flag, %Qubit** %116, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %112, %Tuple* %113, %Tuple* null)
  %outcome = call %Result* @Microsoft__Quantum__Intrinsic__M__body(%Qubit* %flag)
  %117 = call %Result* @__quantum__rt__result_get_one()
  %118 = call i1 @__quantum__rt__result_equal(%Result* %outcome, %Result* %117)
  store i1 %118, i1* %success, align 1
  call void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %auxillary)
  call void @Microsoft__Quantum__Intrinsic__Reset__body(%Qubit* %flag)
  %119 = getelementptr inbounds { %Array* }, { %Array* }* %103, i32 0, i32 0
  %120 = load %Array*, %Array** %119, align 8
  %121 = getelementptr inbounds { %Array* }, { %Array* }* %108, i32 0, i32 0
  %122 = load %Array*, %Array** %121, align 8
  %123 = getelementptr inbounds { %Array* }, { %Array* }* %110, i32 0, i32 0
  %124 = load %Array*, %Array** %123, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %multiplexer, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %multiplexer, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %98, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %98, i32 -1)
  %125 = call i64 @__quantum__rt__array_get_size_1d(%Array* %100)
  %126 = sub i64 %125, 1
  br label %header__8

until__1:                                         ; preds = %exit__8
  br i1 %118, label %rend__1, label %fixup__1

fixup__1:                                         ; preds = %until__1
  call void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %qubits)
  br label %repeat__1

rend__1:                                          ; preds = %until__1
  %127 = load %Array*, %Array** %coefficientsSqrtAbs, align 8
  %128 = load %Array*, %Array** %coefficientsNewComplexPolar, align 8
  %129 = load %Array*, %Array** %applyFlips, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %initialStatePreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %initialStatePreparation, i32 -1)
  %130 = sub i64 %nExcitations, 1
  br label %header__9

header__8:                                        ; preds = %exiting__8, %repeat__1
  %131 = phi i64 [ 0, %repeat__1 ], [ %136, %exiting__8 ]
  %132 = icmp sle i64 %131, %126
  br i1 %132, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 %131)
  %134 = bitcast i8* %133 to %Callable**
  %135 = load %Callable*, %Callable** %134, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %135, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %135, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %136 = add i64 %131, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %101, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %101, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %multiplexer, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %multiplexer, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %120, i32 -1)
  %137 = bitcast { %Array* }* %103 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %137, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %122, i32 -1)
  %138 = bitcast { %Array* }* %108 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %138, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %104, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %124, i32 -1)
  %139 = bitcast { %Array* }* %110 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %139, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %111, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %111, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %112, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %112, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %auxillary, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %113, i32 -1)
  call void @__quantum__rt__result_update_reference_count(%Result* %outcome, i32 -1)
  call void @__quantum__rt__qubit_release(%Qubit* %flag)
  call void @__quantum__rt__array_update_alias_count(%Array* %auxillary, i32 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %auxillary)
  br label %until__1

header__9:                                        ; preds = %exiting__9, %rend__1
  %140 = phi i64 [ 0, %rend__1 ], [ %151, %exiting__9 ]
  %141 = icmp sle i64 %140, %130
  br i1 %141, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %142 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %excitations, i64 %140)
  %143 = bitcast i8* %142 to { { double, double }*, %Array* }**
  %144 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %143, align 8
  %145 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %144, i32 0, i32 0
  %146 = load { double, double }*, { double, double }** %145, align 8
  %147 = bitcast { double, double }* %146 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %147, i32 -1)
  %148 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %144, i32 0, i32 1
  %149 = load %Array*, %Array** %148, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %149, i32 -1)
  %150 = bitcast { { double, double }*, %Array* }* %144 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %150, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %151 = add i64 %140, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %excitations, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %127, i32 -1)
  %152 = call i64 @__quantum__rt__array_get_size_1d(%Array* %128)
  %153 = sub i64 %152, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %154 = phi i64 [ 0, %exit__9 ], [ %160, %exiting__10 ]
  %155 = icmp sle i64 %154, %153
  br i1 %155, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %156 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %128, i64 %154)
  %157 = bitcast i8* %156 to { double, double }**
  %158 = load { double, double }*, { double, double }** %157, align 8
  %159 = bitcast { double, double }* %158 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %159, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %160 = add i64 %154, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_alias_count(%Array* %128, i32 -1)
  %161 = call i64 @__quantum__rt__array_get_size_1d(%Array* %129)
  %162 = sub i64 %161, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %163 = phi i64 [ 0, %exit__10 ], [ %168, %exiting__11 ]
  %164 = icmp sle i64 %163, %162
  br i1 %164, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %165 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 %163)
  %166 = bitcast i8* %165 to %Array**
  %167 = load %Array*, %Array** %166, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %167, i32 -1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %168 = add i64 %163, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_alias_count(%Array* %129, i32 -1)
  %169 = bitcast { double, double }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %169, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %37, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %127, i32 -1)
  %170 = sub i64 %152, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %171 = phi i64 [ 0, %exit__11 ], [ %177, %exiting__12 ]
  %172 = icmp sle i64 %171, %170
  br i1 %172, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %173 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %128, i64 %171)
  %174 = bitcast i8* %173 to { double, double }**
  %175 = load { double, double }*, { double, double }** %174, align 8
  %176 = bitcast { double, double }* %175 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %176, i32 -1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %177 = add i64 %171, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_reference_count(%Array* %128, i32 -1)
  %178 = sub i64 %161, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %179 = phi i64 [ 0, %exit__12 ], [ %184, %exiting__13 ]
  %180 = icmp sle i64 %179, %178
  br i1 %180, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %181 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %129, i64 %179)
  %182 = bitcast i8* %181 to %Array**
  %183 = load %Array*, %Array** %182, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %183, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %184 = add i64 %179, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_reference_count(%Array* %129, i32 -1)
  ret void
}

declare void @__quantum__rt__qubit_release(%Qubit*)

define internal void @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___PrepareSingleConfigurationalStateSingleSiteOccupation____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %1 = getelementptr inbounds { %Array* }, { %Array* }* %0, i32 0, i32 0
  %2 = load %Array*, %Array** %1, align 8
  %3 = call %Callable* @Microsoft__Quantum__Chemistry__JordanWigner____QsRef4___PrepareSingleConfigurationalStateSingleSiteOccupation____body(%Array* %2)
  %4 = bitcast %Tuple* %result-tuple to { %Callable* }*
  %5 = getelementptr inbounds { %Callable* }, { %Callable* }* %4, i32 0, i32 0
  store %Callable* %3, %Callable** %5, align 8
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__body(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__body(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  %12 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16, align 8
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__adj(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__adj(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %1 = getelementptr inbounds { %Array* }, { %Array* }* %0, i32 0, i32 0
  %2 = load %Array*, %Array** %1, align 8
  call void @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__body(%Array* %2)
  ret void
}

define internal void @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %1 = getelementptr inbounds { %Array* }, { %Array* }* %0, i32 0, i32 0
  %2 = load %Array*, %Array** %1, align 8
  call void @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__adj(%Array* %2)
  ret void
}

define internal void @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__ctl(%Array* %3, %Array* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  call void @Microsoft__Quantum__Canon___eacf3f02516f4c83a13044edfe207ad2_NoOp__ctladj(%Array* %3, %Array* %4)
  ret void
}

define internal void @Lifted__PartialApplication__40__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %2 = load i64, i64* %1, align 4
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %6 = bitcast %Tuple* %5 to { i64, %Array* }*
  %7 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %6, i32 0, i32 0
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %6, i32 0, i32 1
  store i64 %2, i64* %7, align 4
  store %Array* %4, %Array** %8, align 8
  %9 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %10 = getelementptr inbounds { %Array* }, { %Array* }* %9, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { i64, %Array* }*, %Array* }* getelementptr ({ { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { { i64, %Array* }*, %Array* }*
  %14 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { { i64, %Array* }*, %Array* }, { { i64, %Array* }*, %Array* }* %13, i32 0, i32 1
  store { i64, %Array* }* %6, { i64, %Array* }** %14, align 8
  store %Array* %11, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @MemoryManagement__25__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { double, double }*, %Array* }**
  %11 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 0
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 %count-change)
  %15 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 1
  %16 = load %Array*, %Array** %15, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %16, i32 %count-change)
  %17 = bitcast { { double, double }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__25__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %18, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { { double, double }*, %Array* }**
  %11 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 0
  %13 = load { double, double }*, { double, double }** %12, align 8
  %14 = bitcast { double, double }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 %count-change)
  %15 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %11, i32 0, i32 1
  %16 = load %Array*, %Array** %15, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %16, i32 %count-change)
  %17 = bitcast { { double, double }*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %17, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %18 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__JordanWigner__PrepareUnitaryCoupledClusterState__body(%Callable* %initialStatePreparation, %Array* %clusterOperator, double %trotterStepSize, %Array* %qubits) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %initialStatePreparation, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %initialStatePreparation, i32 1)
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %clusterOperator)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %13, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %clusterOperator, i64 %2)
  %5 = bitcast i8* %4 to { { double, double }*, %Array* }**
  %6 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 0
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %6, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { { double, double }*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %13 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %clusterOperator, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %clusterOperatorGeneratorSystem = call { i64, %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorGeneratorSystem__body(%Array* %clusterOperator)
  %14 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %clusterOperatorGeneratorSystem, i32 0, i32 1
  %15 = load %Callable*, %Callable** %14, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %15, i32 1)
  %16 = bitcast { i64, %Callable* }* %clusterOperatorGeneratorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 1)
  %17 = call { %Callable* }* @Microsoft__Quantum__Chemistry__JordanWigner__JordanWignerClusterOperatorEvolutionSet__body()
  %evolutionGenerator = call { { %Callable* }*, { i64, %Callable* }* }* @Microsoft__Quantum__Simulation__EvolutionGenerator__body({ %Callable* }* %17, { i64, %Callable* }* %clusterOperatorGeneratorSystem)
  %18 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %19 = load { %Callable* }*, { %Callable* }** %18, align 8
  %20 = getelementptr inbounds { %Callable* }, { %Callable* }* %19, i32 0, i32 0
  %21 = load %Callable*, %Callable** %20, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %21, i32 1)
  %22 = bitcast { %Callable* }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 1)
  %23 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %24 = load { i64, %Callable* }*, { i64, %Callable* }** %23, align 8
  %25 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %24, i32 0, i32 1
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i32 1)
  %27 = bitcast { i64, %Callable* }* %24 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i32 1)
  %28 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 1)
  %29 = call { %Callable* }* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithm__body(double %trotterStepSize, i64 1)
  %30 = getelementptr inbounds { %Callable* }, { %Callable* }* %29, i32 0, i32 0
  %simulationAlgorithm = load %Callable*, %Callable** %30, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %simulationAlgorithm, i32 1)
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* getelementptr ({ %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %33 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %32, i32 0, i32 0
  %34 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %32, i32 0, i32 1
  %35 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %32, i32 0, i32 2
  call void @__quantum__rt__capture_update_reference_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %simulationAlgorithm, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 1)
  store %Callable* %simulationAlgorithm, %Callable** %33, align 8
  store double 1.000000e+00, double* %34, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, { { %Callable* }*, { i64, %Callable* }* }** %35, align 8
  %oracle = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__41__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__26__FunctionTable, %Tuple* %31)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 1)
  %36 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %37 = bitcast %Tuple* %36 to { %Array* }*
  %38 = getelementptr inbounds { %Array* }, { %Array* }* %37, i32 0, i32 0
  store %Array* %qubits, %Array** %38, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %initialStatePreparation, %Tuple* %36, %Tuple* null)
  %39 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %40 = bitcast %Tuple* %39 to { %Array* }*
  %41 = getelementptr inbounds { %Array* }, { %Array* }* %40, i32 0, i32 0
  store %Array* %qubits, %Array** %41, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %oracle, %Tuple* %39, %Tuple* null)
  %42 = getelementptr inbounds { %Callable* }, { %Callable* }* %17, i32 0, i32 0
  %43 = load %Callable*, %Callable** %42, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %initialStatePreparation, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %initialStatePreparation, i32 -1)
  %44 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %45 = phi i64 [ 0, %exit__1 ], [ %56, %exiting__2 ]
  %46 = icmp sle i64 %45, %44
  br i1 %46, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %clusterOperator, i64 %45)
  %48 = bitcast i8* %47 to { { double, double }*, %Array* }**
  %49 = load { { double, double }*, %Array* }*, { { double, double }*, %Array* }** %48, align 8
  %50 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %49, i32 0, i32 0
  %51 = load { double, double }*, { double, double }** %50, align 8
  %52 = bitcast { double, double }* %51 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %52, i32 -1)
  %53 = getelementptr inbounds { { double, double }*, %Array* }, { { double, double }*, %Array* }* %49, i32 0, i32 1
  %54 = load %Array*, %Array** %53, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %54, i32 -1)
  %55 = bitcast { { double, double }*, %Array* }* %49 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %55, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %56 = add i64 %45, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %clusterOperator, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %simulationAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %simulationAlgorithm, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %43, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %43, i32 -1)
  %57 = bitcast { %Callable* }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %57, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %22, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %28, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %simulationAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %simulationAlgorithm, i32 -1)
  %58 = bitcast { %Callable* }* %29 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %58, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %oracle, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %39, i32 -1)
  ret void
}

define internal { { %Callable* }*, { i64, %Callable* }* }* @Microsoft__Quantum__Simulation__EvolutionGenerator__body({ %Callable* }* %__Item1__, { i64, %Callable* }* %__Item2__) {
entry:
  %0 = getelementptr inbounds { %Callable* }, { %Callable* }* %__Item1__, i32 0, i32 0
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { %Callable* }* %__Item1__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %__Item2__, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 1)
  %5 = bitcast { i64, %Callable* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Callable* }*, { i64, %Callable* }* }* getelementptr ({ { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { %Callable* }*, { i64, %Callable* }* }*
  %8 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %7, i32 0, i32 1
  store { %Callable* }* %__Item1__, { %Callable* }** %8, align 8
  store { i64, %Callable* }* %__Item2__, { i64, %Callable* }** %9, align 8
  %10 = getelementptr inbounds { %Callable* }, { %Callable* }* %__Item1__, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %__Item2__, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 1)
  %14 = bitcast { %Callable* }* %__Item1__ to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 1)
  %15 = bitcast { i64, %Callable* }* %__Item2__ to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  ret { { %Callable* }*, { i64, %Callable* }* }* %7
}

define internal { %Callable* }* @Microsoft__Quantum__Simulation__TrotterSimulationAlgorithm__body(double %trotterStepSize, i64 %trotterOrder) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, i64 }* getelementptr ({ %Callable*, double, i64 }, { %Callable*, double, i64 }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, double, i64 }*
  %2 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %1, i32 0, i32 1
  %4 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %1, i32 0, i32 2
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  store %Callable* %5, %Callable** %2, align 8
  store double %trotterStepSize, double* %3, align 8
  store i64 %trotterOrder, i64* %4, align 4
  %6 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__53__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__33__FunctionTable, %Tuple* %0)
  %7 = call { %Callable* }* @Microsoft__Quantum__Simulation__SimulationAlgorithm__body(%Callable* %6)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  ret { %Callable* }* %7
}

define internal void @Lifted__PartialApplication__41__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %4, { { %Callable* }*, { i64, %Callable* }* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__41__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %4, { { %Callable* }*, { i64, %Callable* }* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__41__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 2
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %13, align 8
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* getelementptr ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__41__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 2
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %13, align 8
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* getelementptr ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @MemoryManagement__26__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 %count-change)
  %10 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 %count-change)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 %count-change)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__26__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 %count-change)
  %10 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 %count-change)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 %count-change)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__42__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %4, { { %Callable* }*, { i64, %Callable* }* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__42__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 2
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %4, { { %Callable* }*, { i64, %Callable* }* }** %11, align 8
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__42__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 2
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %13, align 8
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* getelementptr ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__42__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 2
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %13, align 8
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* getelementptr ({ %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %11, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, double, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__HTermsToGenIdx__body(%Array* %data, %Array* %termType, i64 %idx) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %data)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %12, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %2)
  %5 = bitcast i8* %4 to { %Array*, %Array* }**
  %6 = load { %Array*, %Array* }*, { %Array*, %Array* }** %5, align 8
  %7 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 0
  %8 = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %8, i32 1)
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %6, i32 0, i32 1
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array*, %Array* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %12 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %termType, i32 1)
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %idx)
  %14 = bitcast i8* %13 to { %Array*, %Array* }**
  %15 = load { %Array*, %Array* }*, { %Array*, %Array* }** %14, align 8
  %16 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__HTermToGenIdx__body({ %Array*, %Array* }* %15, %Array* %termType)
  %17 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %18 = phi i64 [ 0, %exit__1 ], [ %28, %exiting__2 ]
  %19 = icmp sle i64 %18, %17
  br i1 %19, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %data, i64 %18)
  %21 = bitcast i8* %20 to { %Array*, %Array* }**
  %22 = load { %Array*, %Array* }*, { %Array*, %Array* }** %21, align 8
  %23 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %22, i32 0, i32 0
  %24 = load %Array*, %Array** %23, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %24, i32 -1)
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %22, i32 0, i32 1
  %26 = load %Array*, %Array** %25, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %26, i32 -1)
  %27 = bitcast { %Array*, %Array* }* %22 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %27, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %28 = add i64 %18, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %data, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %termType, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %16
}

define internal { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__HTermToGenIdx__body({ %Array*, %Array* }* %term, %Array* %termType) {
entry:
  %0 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %term, i32 0, i32 0
  %idxFermions = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %term, i32 0, i32 1
  %coeff = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %2 = bitcast { %Array*, %Array* }* %term to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %termType, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array*, %Array* }*
  %5 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %4, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %termType, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coeff, i32 1)
  store %Array* %termType, %Array** %5, align 8
  store %Array* %coeff, %Array** %6, align 8
  %7 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %4, %Array* %idxFermions)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %termType, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %idxFermions, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %termType, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coeff, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %7
}

define internal void @Lifted__PartialApplication__43__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %2 = load %Array*, %Array** %1, align 8
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = bitcast %Tuple* %arg-tuple to { i64 }*
  %6 = getelementptr inbounds { i64 }, { i64 }* %5, i32 0, i32 0
  %7 = load i64, i64* %6, align 4
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, i64 }* getelementptr ({ %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Array*, %Array*, i64 }*
  %10 = getelementptr inbounds { %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* %9, i32 0, i32 2
  store %Array* %2, %Array** %10, align 8
  store %Array* %4, %Array** %11, align 8
  store i64 %7, i64* %12, align 4
  %13 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Chemistry__HTermsToGenIdx__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array*, i64 }*
  %1 = getelementptr inbounds { %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Array*, %Array*, i64 }, { %Array*, %Array*, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %1, align 8
  %5 = load %Array*, %Array** %2, align 8
  %6 = load i64, i64* %3, align 4
  %7 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Chemistry__HTermsToGenIdx__body(%Array* %4, %Array* %5, i64 %6)
  %8 = bitcast %Tuple* %result-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %9 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %8, i32 0, i32 0
  store { { %Array*, %Array* }*, %Array* }* %7, { { %Array*, %Array* }*, %Array* }** %9, align 8
  ret void
}

define internal void @MemoryManagement__27__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { %Array*, %Array* }**
  %11 = load { %Array*, %Array* }*, { %Array*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 0
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 %count-change)
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 1
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %15, i32 %count-change)
  %16 = bitcast { %Array*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  %18 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %19 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %19, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__27__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Array*, %Array* }*
  %1 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 1
  %4 = load %Array*, %Array** %3, align 8
  %5 = call i64 @__quantum__rt__array_get_size_1d(%Array* %4)
  %6 = sub i64 %5, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %17, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %10 = bitcast i8* %9 to { %Array*, %Array* }**
  %11 = load { %Array*, %Array* }*, { %Array*, %Array* }** %10, align 8
  %12 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 0
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 %count-change)
  %14 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %11, i32 0, i32 1
  %15 = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %15, i32 %count-change)
  %16 = bitcast { %Array*, %Array* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %16, i32 %count-change)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %17 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  %18 = getelementptr inbounds { %Callable*, %Array*, %Array* }, { %Callable*, %Array*, %Array* }* %0, i32 0, i32 2
  %19 = load %Array*, %Array** %18, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %19, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____body(double %angle, i64 %idxTarget, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %1 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 0)
  %2 = bitcast i8* %1 to i2*
  %3 = load i2, i2* @PauliI, align 1
  store i2 %3, i2* %2, align 1
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 0)
  %6 = bitcast i8* %5 to %Qubit**
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8, align 8
  store %Qubit* %9, %Qubit** %6, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__body(%Array* %0, double %angle, %Array* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____adj(double %angle, i64 %idxTarget, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %0 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %1 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %0, i64 0)
  %2 = bitcast i8* %1 to i2*
  %3 = load i2, i2* @PauliI, align 1
  store i2 %3, i2* %2, align 1
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 0)
  %6 = bitcast i8* %5 to %Qubit**
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8, align 8
  store %Qubit* %9, %Qubit** %6, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__adj(%Array* %0, double %angle, %Array* %4)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctl(%Array* %__controlQubits__, { double, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 0
  %angle = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 2
  %register = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array*, double, %Array* }*
  %6 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 2
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 0)
  %11 = bitcast i8* %10 to i2*
  %12 = load i2, i2* @PauliI, align 1
  store i2 %12, i2* %11, align 1
  %13 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 0)
  %15 = bitcast i8* %14 to %Qubit**
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %17 = bitcast i8* %16 to %Qubit**
  %18 = load %Qubit*, %Qubit** %17, align 8
  store %Qubit* %18, %Qubit** %15, align 8
  store %Array* %9, %Array** %6, align 8
  store double %angle, double* %7, align 8
  store %Array* %13, %Array** %8, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctl(%Array* %__controlQubits__, { %Array*, double, %Array* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctladj(%Array* %__controlQubits__, { double, i64, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 0
  %angle = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 2
  %register = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, double, %Array* }* getelementptr ({ %Array*, double, %Array* }, { %Array*, double, %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array*, double, %Array* }*
  %6 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 0
  %7 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 1
  %8 = getelementptr inbounds { %Array*, double, %Array* }, { %Array*, double, %Array* }* %5, i32 0, i32 2
  %9 = call %Array* @__quantum__rt__array_create_1d(i32 1, i64 1)
  %10 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %9, i64 0)
  %11 = bitcast i8* %10 to i2*
  %12 = load i2, i2* @PauliI, align 1
  store i2 %12, i2* %11, align 1
  %13 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %13, i64 0)
  %15 = bitcast i8* %14 to %Qubit**
  %16 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %17 = bitcast i8* %16 to %Qubit**
  %18 = load %Qubit*, %Qubit** %17, align 8
  store %Qubit* %18, %Qubit** %15, align 8
  store %Array* %9, %Array** %6, align 8
  store double %angle, double* %7, align 8
  store %Array* %13, %Array** %8, align 8
  call void @Microsoft__Quantum__Intrinsic__Exp__ctladj(%Array* %__controlQubits__, { %Array*, double, %Array* }* %5)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____body(double %tolerance, %Array* %disentangling, i2 %axis, { %Range, i64 }* %0, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %1 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 0
  %rngControl = load %Range, %Range* %1, align 4
  %2 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %2, align 4
  %3 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %rngControl, i1 true)
  %actualControl = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %3)
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %actualControl, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %actualControl to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__body(double %tolerance, %Array* %disentangling, i2 %axis, { %Array* }* %actualControl, %Qubit* %9)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____adj(double %tolerance, %Array* %disentangling, i2 %axis, { %Range, i64 }* %0, %Array* %register) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %1 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 0
  %rngControl = load %Range, %Range* %1, align 4
  %2 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %2, align 4
  %3 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %rngControl, i1 true)
  %__qsVar0__actualControl__ = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %3)
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %__qsVar0__actualControl__, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %__qsVar0__actualControl__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %8 = bitcast i8* %7 to %Qubit**
  %9 = load %Qubit*, %Qubit** %8, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__adj(double %tolerance, %Array* %disentangling, i2 %axis, { %Array* }* %__qsVar0__actualControl__, %Qubit* %9)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %3, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 1
  %disentangling = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 1)
  %3 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 2
  %axis = load i2, i2* %3, align 1
  %4 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 3
  %5 = load { %Range, i64 }*, { %Range, i64 }** %4, align 8
  %6 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 4
  %register = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %7 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %5, i32 0, i32 0
  %rngControl = load %Range, %Range* %7, align 4
  %8 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %5, i32 0, i32 1
  %idxTarget = load i64, i64* %8, align 4
  %9 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %rngControl, i1 true)
  %actualControl = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %9)
  %10 = getelementptr inbounds { %Array* }, { %Array* }* %actualControl, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { %Array* }* %actualControl to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i32 0, i32 1
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i32 0, i32 2
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i32 0, i32 3
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i32 0, i32 4
  call void @__quantum__rt__array_update_reference_count(%Array* %disentangling, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %21 = bitcast i8* %20 to %Qubit**
  %22 = load %Qubit*, %Qubit** %21, align 8
  store double %tolerance, double* %15, align 8
  store %Array* %disentangling, %Array** %16, align 8
  store i2 %axis, i2* %17, align 1
  store { %Array* }* %actualControl, { %Array* }** %18, align 8
  store %Qubit* %22, %Qubit** %19, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctl(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 1
  %disentangling = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 1)
  %3 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 2
  %axis = load i2, i2* %3, align 1
  %4 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 3
  %5 = load { %Range, i64 }*, { %Range, i64 }** %4, align 8
  %6 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 4
  %register = load %Array*, %Array** %6, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 1)
  %7 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %5, i32 0, i32 0
  %rngControl = load %Range, %Range* %7, align 4
  %8 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %5, i32 0, i32 1
  %idxTarget = load i64, i64* %8, align 4
  %9 = call %Array* @__quantum__rt__array_slice_1d(%Array* %register, %Range %rngControl, i1 true)
  %__qsVar0__actualControl__ = call { %Array* }* @Microsoft__Quantum__Arithmetic__LittleEndian__body(%Array* %9)
  %10 = getelementptr inbounds { %Array* }, { %Array* }* %__qsVar0__actualControl__, i32 0, i32 0
  %11 = load %Array*, %Array** %10, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 1)
  %12 = bitcast { %Array* }* %__qsVar0__actualControl__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 1)
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Array* }*, %Qubit* }* getelementptr ({ double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { double, %Array*, i2, { %Array* }*, %Qubit* }*
  %15 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i32 0, i32 1
  %17 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i32 0, i32 2
  %18 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i32 0, i32 3
  %19 = getelementptr inbounds { double, %Array*, i2, { %Array* }*, %Qubit* }, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14, i32 0, i32 4
  call void @__quantum__rt__array_update_reference_count(%Array* %disentangling, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 1)
  %20 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %register, i64 %idxTarget)
  %21 = bitcast i8* %20 to %Qubit**
  %22 = load %Qubit*, %Qubit** %21, align 8
  store double %tolerance, double* %15, align 8
  store %Array* %disentangling, %Array** %16, align 8
  store i2 %axis, i2* %17, align 1
  store { %Array* }* %__qsVar0__actualControl__, { %Array* }** %18, align 8
  store %Qubit* %22, %Qubit** %19, align 8
  call void @Microsoft__Quantum__Canon__ApproximatelyMultiplexPauli__ctladj(%Array* %__controlQubits__, { double, %Array*, i2, { %Array* }*, %Qubit* }* %14)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %register, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentangling, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____body(%Callable* %bareOp, { %Array* }* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %register, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array* }*
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %4, i32 0, i32 0
  store %Array* %1, %Array** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %bareOp, %Tuple* %3, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____adj(%Callable* %bareOp, { %Array* }* %register) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %register, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %3)
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %5 = bitcast %Tuple* %4 to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  store %Array* %1, %Array** %6, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %3, %Tuple* %4, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctl(%Array* %__controlQubits__, { %Callable*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %bareOp = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 1)
  %2 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %register = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %register, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 1)
  store %Array* %__controlQubits__, %Array** %9, align 8
  store %Array* %4, %Array** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctladj(%Array* %__controlQubits__, { %Callable*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %bareOp = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 1)
  %2 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %register = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %register, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %register to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call %Callable* @__quantum__rt__callable_copy(%Callable* %bareOp, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %6)
  call void @__quantum__rt__callable_make_controlled(%Callable* %6)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Array*, %Array* }*
  %9 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %8, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 1)
  store %Array* %__controlQubits__, %Array** %9, align 8
  store %Array* %4, %Array** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %6, %Tuple* %7, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %bareOp, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 -1)
  ret void
}

define internal %Array* @Microsoft__Quantum__Preparation____QsRef1__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %coefficients, { %Range, i64 }* %0) {
entry:
  %1 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %2 = sub i64 %1, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %3 = phi i64 [ 0, %entry ], [ %9, %exiting__1 ]
  %4 = icmp sle i64 %3, %2
  br i1 %4, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %3)
  %6 = bitcast i8* %5 to { double, double }**
  %7 = load { double, double }*, { double, double }** %6, align 8
  %8 = bitcast { double, double }* %7 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %9 = add i64 %3, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %10 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 0
  %rngControl = load %Range, %Range* %10, align 4
  %11 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %0, i32 0, i32 1
  %idxTarget = load i64, i64* %11, align 4
  %12 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 0)
  %plan = alloca %Array*, align 8
  store %Array* %12, %Array** %plan, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 1)
  %13 = call { %Array*, %Array*, %Array* }* @Microsoft__Quantum__Preparation____QsRef1__StatePreparationSBMComputeCoefficients____body(%Array* %coefficients)
  %14 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i32 0, i32 0
  %disentanglingY = load %Array*, %Array** %14, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingY, i32 1)
  %15 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i32 0, i32 1
  %disentanglingZ = load %Array*, %Array** %15, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingZ, i32 1)
  %16 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %13, i32 0, i32 2
  %newCoefficients = load %Array*, %Array** %16, align 8
  %17 = call i64 @__quantum__rt__array_get_size_1d(%Array* %newCoefficients)
  %18 = sub i64 %17, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %19 = phi i64 [ 0, %exit__1 ], [ %25, %exiting__2 ]
  %20 = icmp sle i64 %19, %18
  br i1 %20, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %19)
  %22 = bitcast i8* %21 to { double, double }**
  %23 = load { double, double }*, { double, double }** %22, align 8
  %24 = bitcast { double, double }* %23 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %25 = add i64 %19, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoefficients, i32 1)
  %26 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %disentanglingZ)
  br i1 %26, label %then0__1, label %continue__1

then0__1:                                         ; preds = %exit__2
  %27 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %28 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 0)
  %29 = bitcast i8* %28 to %Callable**
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, %Range, i64 }* getelementptr ({ %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* null, i32 1) to i64))
  %31 = bitcast %Tuple* %30 to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %32 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i32 0, i32 0
  %33 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i32 0, i32 1
  %34 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i32 0, i32 2
  %35 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i32 0, i32 3
  %36 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i32 0, i32 4
  %37 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %31, i32 0, i32 5
  %38 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingZ, i32 1)
  %39 = load i2, i2* @PauliZ, align 1
  store %Callable* %38, %Callable** %32, align 8
  store double %tolerance, double* %33, align 8
  store %Array* %disentanglingZ, %Array** %34, align 8
  store i2 %39, i2* %35, align 1
  store %Range %rngControl, %Range* %36, align 4
  store i64 %idxTarget, i64* %37, align 4
  %40 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__44__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__28__FunctionTable, %Tuple* %30)
  store %Callable* %40, %Callable** %29, align 8
  %41 = call %Array* @__quantum__rt__array_concatenate(%Array* %12, %Array* %27)
  %42 = call i64 @__quantum__rt__array_get_size_1d(%Array* %41)
  %43 = sub i64 %42, 1
  br label %header__3

continue__1:                                      ; preds = %exit__5, %exit__2
  %44 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceD____body(double %tolerance, %Array* %disentanglingY)
  br i1 %44, label %then0__2, label %continue__2

then0__2:                                         ; preds = %continue__1
  %45 = load %Array*, %Array** %plan, align 8
  %46 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 0)
  %48 = bitcast i8* %47 to %Callable**
  %49 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, %Array*, i2, %Range, i64 }* getelementptr ({ %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* null, i32 1) to i64))
  %50 = bitcast %Tuple* %49 to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %51 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %50, i32 0, i32 0
  %52 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %50, i32 0, i32 1
  %53 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %50, i32 0, i32 2
  %54 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %50, i32 0, i32 3
  %55 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %50, i32 0, i32 4
  %56 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %50, i32 0, i32 5
  %57 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingY, i32 1)
  %58 = load i2, i2* @PauliY, align 1
  store %Callable* %57, %Callable** %51, align 8
  store double %tolerance, double* %52, align 8
  store %Array* %disentanglingY, %Array** %53, align 8
  store i2 %58, i2* %54, align 1
  store %Range %rngControl, %Range* %55, align 4
  store i64 %idxTarget, i64* %56, align 4
  %59 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__45__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__28__FunctionTable, %Tuple* %49)
  store %Callable* %59, %Callable** %48, align 8
  %60 = call %Array* @__quantum__rt__array_concatenate(%Array* %45, %Array* %46)
  %61 = call i64 @__quantum__rt__array_get_size_1d(%Array* %60)
  %62 = sub i64 %61, 1
  br label %header__6

continue__2:                                      ; preds = %exit__10, %continue__1
  %63 = call i1 @Microsoft__Quantum__Canon__IsRangeEmpty__body(%Range %rngControl)
  br i1 %63, label %then0__3, label %test1__1

then0__3:                                         ; preds = %continue__2
  %64 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 0)
  %65 = bitcast i8* %64 to { double, double }**
  %66 = load { double, double }*, { double, double }** %65, align 8
  %67 = getelementptr inbounds { double, double }, { double, double }* %66, i32 0, i32 0
  %abs = load double, double* %67, align 8
  %68 = getelementptr inbounds { double, double }, { double, double }* %66, i32 0, i32 1
  %arg = load double, double* %68, align 8
  %69 = call double @Microsoft__Quantum__Math__AbsD__body(double %arg)
  %70 = fcmp ogt double %69, %tolerance
  br i1 %70, label %then0__4, label %continue__4

then0__4:                                         ; preds = %then0__3
  %71 = load %Array*, %Array** %plan, align 8
  %72 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %73 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 0)
  %74 = bitcast i8* %73 to %Callable**
  %75 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double, i64 }* getelementptr ({ %Callable*, double, i64 }, { %Callable*, double, i64 }* null, i32 1) to i64))
  %76 = bitcast %Tuple* %75 to { %Callable*, double, i64 }*
  %77 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %76, i32 0, i32 0
  %78 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %76, i32 0, i32 1
  %79 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %76, i32 0, i32 2
  %80 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %81 = fmul double -1.000000e+00, %arg
  store %Callable* %80, %Callable** %77, align 8
  store double %81, double* %78, align 8
  store i64 %idxTarget, i64* %79, align 4
  %82 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__46__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__29__FunctionTable, %Tuple* %75)
  store %Callable* %82, %Callable** %74, align 8
  %83 = call %Array* @__quantum__rt__array_concatenate(%Array* %71, %Array* %72)
  %84 = call i64 @__quantum__rt__array_get_size_1d(%Array* %83)
  %85 = sub i64 %84, 1
  br label %header__11

continue__4:                                      ; preds = %exit__15, %then0__3
  br label %continue__3

test1__1:                                         ; preds = %continue__2
  %86 = call i1 @Microsoft__Quantum__Canon____QsRef1__AnyOutsideToleranceCP____body(double %tolerance, %Array* %newCoefficients)
  br i1 %86, label %then1__1, label %continue__3

then1__1:                                         ; preds = %test1__1
  %87 = extractvalue %Range %rngControl, 0
  %88 = add i64 %87, 1
  %89 = extractvalue %Range %rngControl, 1
  %90 = extractvalue %Range %rngControl, 2
  %91 = load %Range, %Range* @EmptyRange, align 4
  %92 = insertvalue %Range %91, i64 %88, 0
  %93 = insertvalue %Range %92, i64 %89, 1
  %newControl = insertvalue %Range %93, i64 %90, 2
  %newTarget = extractvalue %Range %rngControl, 0
  %94 = load %Array*, %Array** %plan, align 8
  %95 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %96 = bitcast %Tuple* %95 to { %Range, i64 }*
  %97 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %96, i32 0, i32 0
  %98 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %96, i32 0, i32 1
  store %Range %newControl, %Range* %97, align 4
  store i64 %newTarget, i64* %98, align 4
  %99 = call %Array* @Microsoft__Quantum__Preparation____QsRef1__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %newCoefficients, { %Range, i64 }* %96)
  %100 = call %Array* @__quantum__rt__array_concatenate(%Array* %94, %Array* %99)
  %101 = call i64 @__quantum__rt__array_get_size_1d(%Array* %100)
  %102 = sub i64 %101, 1
  br label %header__16

continue__3:                                      ; preds = %exit__20, %test1__1, %continue__4
  %103 = load %Array*, %Array** %plan, align 8
  %104 = sub i64 %1, 1
  br label %header__21

header__3:                                        ; preds = %exiting__3, %then0__1
  %105 = phi i64 [ 0, %then0__1 ], [ %110, %exiting__3 ]
  %106 = icmp sle i64 %105, %43
  br i1 %106, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %107 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %105)
  %108 = bitcast i8* %107 to %Callable**
  %109 = load %Callable*, %Callable** %108, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %109, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %109, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %110 = add i64 %105, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 1)
  %111 = sub i64 %42, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %112 = phi i64 [ 0, %exit__3 ], [ %117, %exiting__4 ]
  %113 = icmp sle i64 %112, %111
  br i1 %113, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %114 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %41, i64 %112)
  %115 = bitcast i8* %114 to %Callable**
  %116 = load %Callable*, %Callable** %115, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %116, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %116, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %117 = add i64 %112, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %41, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %12, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %12, i32 -1)
  store %Array* %41, %Array** %plan, align 8
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %118 = phi i64 [ 0, %exit__4 ], [ %123, %exiting__5 ]
  %119 = icmp sle i64 %118, 0
  br i1 %119, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %120 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %118)
  %121 = bitcast i8* %120 to %Callable**
  %122 = load %Callable*, %Callable** %121, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %122, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %122, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %123 = add i64 %118, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %27, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %41, i32 -1)
  br label %continue__1

header__6:                                        ; preds = %exiting__6, %then0__2
  %124 = phi i64 [ 0, %then0__2 ], [ %129, %exiting__6 ]
  %125 = icmp sle i64 %124, %62
  br i1 %125, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %126 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %124)
  %127 = bitcast i8* %126 to %Callable**
  %128 = load %Callable*, %Callable** %127, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %128, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %128, i32 1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %129 = add i64 %124, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 1)
  %130 = sub i64 %61, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %131 = phi i64 [ 0, %exit__6 ], [ %136, %exiting__7 ]
  %132 = icmp sle i64 %131, %130
  br i1 %132, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %133 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %131)
  %134 = bitcast i8* %133 to %Callable**
  %135 = load %Callable*, %Callable** %134, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %135, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %135, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %136 = add i64 %131, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i32 1)
  %137 = call i64 @__quantum__rt__array_get_size_1d(%Array* %45)
  %138 = sub i64 %137, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %139 = phi i64 [ 0, %exit__7 ], [ %144, %exiting__8 ]
  %140 = icmp sle i64 %139, %138
  br i1 %140, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %45, i64 %139)
  %142 = bitcast i8* %141 to %Callable**
  %143 = load %Callable*, %Callable** %142, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %143, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %143, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %144 = add i64 %139, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %45, i32 -1)
  %145 = sub i64 %137, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %146 = phi i64 [ 0, %exit__8 ], [ %151, %exiting__9 ]
  %147 = icmp sle i64 %146, %145
  br i1 %147, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %148 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %45, i64 %146)
  %149 = bitcast i8* %148 to %Callable**
  %150 = load %Callable*, %Callable** %149, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %150, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %150, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %151 = add i64 %146, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_reference_count(%Array* %45, i32 -1)
  store %Array* %60, %Array** %plan, align 8
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %152 = phi i64 [ 0, %exit__9 ], [ %157, %exiting__10 ]
  %153 = icmp sle i64 %152, 0
  br i1 %153, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %154 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %46, i64 %152)
  %155 = bitcast i8* %154 to %Callable**
  %156 = load %Callable*, %Callable** %155, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %156, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %156, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %157 = add i64 %152, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %46, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %60, i32 -1)
  br label %continue__2

header__11:                                       ; preds = %exiting__11, %then0__4
  %158 = phi i64 [ 0, %then0__4 ], [ %163, %exiting__11 ]
  %159 = icmp sle i64 %158, %85
  br i1 %159, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %160 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 %158)
  %161 = bitcast i8* %160 to %Callable**
  %162 = load %Callable*, %Callable** %161, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %162, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %162, i32 1)
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %163 = add i64 %158, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 1)
  %164 = sub i64 %84, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %165 = phi i64 [ 0, %exit__11 ], [ %170, %exiting__12 ]
  %166 = icmp sle i64 %165, %164
  br i1 %166, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %167 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %83, i64 %165)
  %168 = bitcast i8* %167 to %Callable**
  %169 = load %Callable*, %Callable** %168, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %169, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %169, i32 1)
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %170 = add i64 %165, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  call void @__quantum__rt__array_update_alias_count(%Array* %83, i32 1)
  %171 = call i64 @__quantum__rt__array_get_size_1d(%Array* %71)
  %172 = sub i64 %171, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %173 = phi i64 [ 0, %exit__12 ], [ %178, %exiting__13 ]
  %174 = icmp sle i64 %173, %172
  br i1 %174, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %175 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %71, i64 %173)
  %176 = bitcast i8* %175 to %Callable**
  %177 = load %Callable*, %Callable** %176, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %177, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %177, i32 -1)
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %178 = add i64 %173, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  call void @__quantum__rt__array_update_alias_count(%Array* %71, i32 -1)
  %179 = sub i64 %171, 1
  br label %header__14

header__14:                                       ; preds = %exiting__14, %exit__13
  %180 = phi i64 [ 0, %exit__13 ], [ %185, %exiting__14 ]
  %181 = icmp sle i64 %180, %179
  br i1 %181, label %body__14, label %exit__14

body__14:                                         ; preds = %header__14
  %182 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %71, i64 %180)
  %183 = bitcast i8* %182 to %Callable**
  %184 = load %Callable*, %Callable** %183, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %184, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %184, i32 -1)
  br label %exiting__14

exiting__14:                                      ; preds = %body__14
  %185 = add i64 %180, 1
  br label %header__14

exit__14:                                         ; preds = %header__14
  call void @__quantum__rt__array_update_reference_count(%Array* %71, i32 -1)
  store %Array* %83, %Array** %plan, align 8
  br label %header__15

header__15:                                       ; preds = %exiting__15, %exit__14
  %186 = phi i64 [ 0, %exit__14 ], [ %191, %exiting__15 ]
  %187 = icmp sle i64 %186, 0
  br i1 %187, label %body__15, label %exit__15

body__15:                                         ; preds = %header__15
  %188 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %72, i64 %186)
  %189 = bitcast i8* %188 to %Callable**
  %190 = load %Callable*, %Callable** %189, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %190, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %190, i32 -1)
  br label %exiting__15

exiting__15:                                      ; preds = %body__15
  %191 = add i64 %186, 1
  br label %header__15

exit__15:                                         ; preds = %header__15
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %83, i32 -1)
  br label %continue__4

header__16:                                       ; preds = %exiting__16, %then1__1
  %192 = phi i64 [ 0, %then1__1 ], [ %197, %exiting__16 ]
  %193 = icmp sle i64 %192, %102
  br i1 %193, label %body__16, label %exit__16

body__16:                                         ; preds = %header__16
  %194 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 %192)
  %195 = bitcast i8* %194 to %Callable**
  %196 = load %Callable*, %Callable** %195, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %196, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %196, i32 1)
  br label %exiting__16

exiting__16:                                      ; preds = %body__16
  %197 = add i64 %192, 1
  br label %header__16

exit__16:                                         ; preds = %header__16
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i32 1)
  %198 = sub i64 %101, 1
  br label %header__17

header__17:                                       ; preds = %exiting__17, %exit__16
  %199 = phi i64 [ 0, %exit__16 ], [ %204, %exiting__17 ]
  %200 = icmp sle i64 %199, %198
  br i1 %200, label %body__17, label %exit__17

body__17:                                         ; preds = %header__17
  %201 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 %199)
  %202 = bitcast i8* %201 to %Callable**
  %203 = load %Callable*, %Callable** %202, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %203, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %203, i32 1)
  br label %exiting__17

exiting__17:                                      ; preds = %body__17
  %204 = add i64 %199, 1
  br label %header__17

exit__17:                                         ; preds = %header__17
  call void @__quantum__rt__array_update_alias_count(%Array* %100, i32 1)
  %205 = call i64 @__quantum__rt__array_get_size_1d(%Array* %94)
  %206 = sub i64 %205, 1
  br label %header__18

header__18:                                       ; preds = %exiting__18, %exit__17
  %207 = phi i64 [ 0, %exit__17 ], [ %212, %exiting__18 ]
  %208 = icmp sle i64 %207, %206
  br i1 %208, label %body__18, label %exit__18

body__18:                                         ; preds = %header__18
  %209 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 %207)
  %210 = bitcast i8* %209 to %Callable**
  %211 = load %Callable*, %Callable** %210, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %211, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %211, i32 -1)
  br label %exiting__18

exiting__18:                                      ; preds = %body__18
  %212 = add i64 %207, 1
  br label %header__18

exit__18:                                         ; preds = %header__18
  call void @__quantum__rt__array_update_alias_count(%Array* %94, i32 -1)
  %213 = sub i64 %205, 1
  br label %header__19

header__19:                                       ; preds = %exiting__19, %exit__18
  %214 = phi i64 [ 0, %exit__18 ], [ %219, %exiting__19 ]
  %215 = icmp sle i64 %214, %213
  br i1 %215, label %body__19, label %exit__19

body__19:                                         ; preds = %header__19
  %216 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %94, i64 %214)
  %217 = bitcast i8* %216 to %Callable**
  %218 = load %Callable*, %Callable** %217, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %218, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %218, i32 -1)
  br label %exiting__19

exiting__19:                                      ; preds = %body__19
  %219 = add i64 %214, 1
  br label %header__19

exit__19:                                         ; preds = %header__19
  call void @__quantum__rt__array_update_reference_count(%Array* %94, i32 -1)
  store %Array* %100, %Array** %plan, align 8
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %95, i32 -1)
  %220 = call i64 @__quantum__rt__array_get_size_1d(%Array* %99)
  %221 = sub i64 %220, 1
  br label %header__20

header__20:                                       ; preds = %exiting__20, %exit__19
  %222 = phi i64 [ 0, %exit__19 ], [ %227, %exiting__20 ]
  %223 = icmp sle i64 %222, %221
  br i1 %223, label %body__20, label %exit__20

body__20:                                         ; preds = %header__20
  %224 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %99, i64 %222)
  %225 = bitcast i8* %224 to %Callable**
  %226 = load %Callable*, %Callable** %225, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %226, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %226, i32 -1)
  br label %exiting__20

exiting__20:                                      ; preds = %body__20
  %227 = add i64 %222, 1
  br label %header__20

exit__20:                                         ; preds = %header__20
  call void @__quantum__rt__array_update_reference_count(%Array* %99, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i32 -1)
  br label %continue__3

header__21:                                       ; preds = %exiting__21, %continue__3
  %228 = phi i64 [ 0, %continue__3 ], [ %234, %exiting__21 ]
  %229 = icmp sle i64 %228, %104
  br i1 %229, label %body__21, label %exit__21

body__21:                                         ; preds = %header__21
  %230 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %228)
  %231 = bitcast i8* %230 to { double, double }**
  %232 = load { double, double }*, { double, double }** %231, align 8
  %233 = bitcast { double, double }* %232 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %233, i32 -1)
  br label %exiting__21

exiting__21:                                      ; preds = %body__21
  %234 = add i64 %228, 1
  br label %header__21

exit__21:                                         ; preds = %header__21
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  %235 = call i64 @__quantum__rt__array_get_size_1d(%Array* %103)
  %236 = sub i64 %235, 1
  br label %header__22

header__22:                                       ; preds = %exiting__22, %exit__21
  %237 = phi i64 [ 0, %exit__21 ], [ %242, %exiting__22 ]
  %238 = icmp sle i64 %237, %236
  br i1 %238, label %body__22, label %exit__22

body__22:                                         ; preds = %header__22
  %239 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %103, i64 %237)
  %240 = bitcast i8* %239 to %Callable**
  %241 = load %Callable*, %Callable** %240, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %241, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %241, i32 -1)
  br label %exiting__22

exiting__22:                                      ; preds = %body__22
  %242 = add i64 %237, 1
  br label %header__22

exit__22:                                         ; preds = %header__22
  call void @__quantum__rt__array_update_alias_count(%Array* %103, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingY, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %disentanglingZ, i32 -1)
  %243 = sub i64 %17, 1
  br label %header__23

header__23:                                       ; preds = %exiting__23, %exit__22
  %244 = phi i64 [ 0, %exit__22 ], [ %250, %exiting__23 ]
  %245 = icmp sle i64 %244, %243
  br i1 %245, label %body__23, label %exit__23

body__23:                                         ; preds = %header__23
  %246 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %244)
  %247 = bitcast i8* %246 to { double, double }**
  %248 = load { double, double }*, { double, double }** %247, align 8
  %249 = bitcast { double, double }* %248 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %249, i32 -1)
  br label %exiting__23

exiting__23:                                      ; preds = %body__23
  %250 = add i64 %244, 1
  br label %header__23

exit__23:                                         ; preds = %header__23
  call void @__quantum__rt__array_update_alias_count(%Array* %newCoefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingY, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %disentanglingZ, i32 -1)
  %251 = sub i64 %17, 1
  br label %header__24

header__24:                                       ; preds = %exiting__24, %exit__23
  %252 = phi i64 [ 0, %exit__23 ], [ %258, %exiting__24 ]
  %253 = icmp sle i64 %252, %251
  br i1 %253, label %body__24, label %exit__24

body__24:                                         ; preds = %header__24
  %254 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %newCoefficients, i64 %252)
  %255 = bitcast i8* %254 to { double, double }**
  %256 = load { double, double }*, { double, double }** %255, align 8
  %257 = bitcast { double, double }* %256 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %257, i32 -1)
  br label %exiting__24

exiting__24:                                      ; preds = %body__24
  %258 = add i64 %252, 1
  br label %header__24

exit__24:                                         ; preds = %header__24
  call void @__quantum__rt__array_update_reference_count(%Array* %newCoefficients, i32 -1)
  %259 = bitcast { %Array*, %Array*, %Array* }* %13 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %259, i32 -1)
  ret %Array* %103
}

define internal { %Array*, %Array*, %Array* }* @Microsoft__Quantum__Preparation____QsRef1__StatePreparationSBMComputeCoefficients____body(%Array* %coefficients) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = sdiv i64 %0, 2
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %9)
  %11 = sub i64 %9, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %12 = phi i64 [ 0, %exit__1 ], [ %16, %exiting__2 ]
  %13 = icmp sle i64 %12, %11
  br i1 %13, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %14 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 %12)
  %15 = bitcast i8* %14 to double*
  store double 0.000000e+00, double* %15, align 8
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %16 = add i64 %12, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %disentanglingZ = alloca %Array*, align 8
  store %Array* %10, %Array** %disentanglingZ, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %17 = sdiv i64 %0, 2
  %18 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %17)
  %19 = sub i64 %17, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %20 = phi i64 [ 0, %exit__2 ], [ %24, %exiting__3 ]
  %21 = icmp sle i64 %20, %19
  br i1 %21, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %22 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %18, i64 %20)
  %23 = bitcast i8* %22 to double*
  store double 0.000000e+00, double* %23, align 8
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %24 = add i64 %20, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %disentanglingY = alloca %Array*, align 8
  store %Array* %18, %Array** %disentanglingY, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %25 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double 0.000000e+00, double 0.000000e+00)
  %26 = sdiv i64 %0, 2
  %27 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %26)
  %28 = sub i64 %26, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %29 = phi i64 [ 0, %exit__3 ], [ %34, %exiting__4 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  store { double, double }* %25, { double, double }** %32, align 8
  %33 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %33, i32 1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %34 = add i64 %29, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %newCoefficients = alloca %Array*, align 8
  store %Array* %27, %Array** %newCoefficients, align 8
  %35 = sub i64 %26, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %36 = phi i64 [ 0, %exit__4 ], [ %42, %exiting__5 ]
  %37 = icmp sle i64 %36, %35
  br i1 %37, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %38 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %27, i64 %36)
  %39 = bitcast i8* %38 to { double, double }**
  %40 = load { double, double }*, { double, double }** %39, align 8
  %41 = bitcast { double, double }* %40 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %41, i32 1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %42 = add i64 %36, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %27, i32 1)
  %43 = sub i64 %0, 1
  br label %preheader__1

preheader__1:                                     ; preds = %exit__5
  br label %header__6

header__6:                                        ; preds = %exiting__6, %preheader__1
  %idxCoeff = phi i64 [ 0, %preheader__1 ], [ %80, %exiting__6 ]
  %44 = icmp sle i64 %idxCoeff, %43
  %45 = icmp sge i64 %idxCoeff, %43
  %46 = select i1 true, i1 %44, i1 %45
  br i1 %46, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %47 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %idxCoeff)
  %48 = bitcast i8* %47 to { double, double }**
  %49 = load { double, double }*, { double, double }** %48, align 8
  %50 = add i64 %idxCoeff, 1
  %51 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %50)
  %52 = bitcast i8* %51 to { double, double }**
  %53 = load { double, double }*, { double, double }** %52, align 8
  %54 = call { { double, double }*, double, double }* @Microsoft__Quantum__Preparation__BlochSphereCoordinates__body({ double, double }* %49, { double, double }* %53)
  %55 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %54, i32 0, i32 0
  %rt = load { double, double }*, { double, double }** %55, align 8
  %56 = bitcast { double, double }* %rt to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 1)
  %57 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %54, i32 0, i32 1
  %phi = load double, double* %57, align 8
  %58 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %54, i32 0, i32 2
  %theta = load double, double* %58, align 8
  %59 = load %Array*, %Array** %disentanglingZ, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %59, i32 -1)
  %60 = call %Array* @__quantum__rt__array_copy(%Array* %59, i1 false)
  %61 = fmul double 5.000000e-01, %phi
  %62 = sdiv i64 %idxCoeff, 2
  %63 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %60, i64 %62)
  %64 = bitcast i8* %63 to double*
  store double %61, double* %64, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %60, i32 1)
  store %Array* %60, %Array** %disentanglingZ, align 8
  %65 = load %Array*, %Array** %disentanglingY, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %65, i32 -1)
  %66 = call %Array* @__quantum__rt__array_copy(%Array* %65, i1 false)
  %67 = fmul double 5.000000e-01, %theta
  %68 = sdiv i64 %idxCoeff, 2
  %69 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %66, i64 %68)
  %70 = bitcast i8* %69 to double*
  %71 = load double, double* %70, align 8
  store double %67, double* %70, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %66, i32 1)
  store %Array* %66, %Array** %disentanglingY, align 8
  %72 = load %Array*, %Array** %newCoefficients, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %72, i32 -1)
  %73 = call %Array* @__quantum__rt__array_copy(%Array* %72, i1 false)
  %74 = sdiv i64 %idxCoeff, 2
  %75 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %73, i64 %74)
  %76 = bitcast i8* %75 to { double, double }**
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 1)
  %77 = load { double, double }*, { double, double }** %76, align 8
  %78 = bitcast { double, double }* %77 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %78, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %78, i32 -1)
  store { double, double }* %rt, { double, double }** %76, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %73, i32 1)
  store %Array* %73, %Array** %newCoefficients, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %56, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %56, i32 -1)
  %79 = bitcast { { double, double }*, double, double }* %54 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %79, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %59, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %65, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %72, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %80 = add i64 %idxCoeff, 2
  br label %header__6

exit__6:                                          ; preds = %header__6
  %81 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array*, %Array* }* getelementptr ({ %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* null, i32 1) to i64))
  %82 = bitcast %Tuple* %81 to { %Array*, %Array*, %Array* }*
  %83 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %82, i32 0, i32 0
  %84 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %82, i32 0, i32 1
  %85 = getelementptr inbounds { %Array*, %Array*, %Array* }, { %Array*, %Array*, %Array* }* %82, i32 0, i32 2
  %86 = load %Array*, %Array** %disentanglingY, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %86, i32 1)
  %87 = load %Array*, %Array** %disentanglingZ, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %87, i32 1)
  %88 = load %Array*, %Array** %newCoefficients, align 8
  %89 = call i64 @__quantum__rt__array_get_size_1d(%Array* %88)
  %90 = sub i64 %89, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %91 = phi i64 [ 0, %exit__6 ], [ %97, %exiting__7 ]
  %92 = icmp sle i64 %91, %90
  br i1 %92, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %88, i64 %91)
  %94 = bitcast i8* %93 to { double, double }**
  %95 = load { double, double }*, { double, double }** %94, align 8
  %96 = bitcast { double, double }* %95 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %96, i32 1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %97 = add i64 %91, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %88, i32 1)
  store %Array* %86, %Array** %83, align 8
  store %Array* %87, %Array** %84, align 8
  store %Array* %88, %Array** %85, align 8
  %98 = sub i64 %0, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %99 = phi i64 [ 0, %exit__7 ], [ %105, %exiting__8 ]
  %100 = icmp sle i64 %99, %98
  br i1 %100, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %101 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %99)
  %102 = bitcast i8* %101 to { double, double }**
  %103 = load { double, double }*, { double, double }** %102, align 8
  %104 = bitcast { double, double }* %103 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %104, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %105 = add i64 %99, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %87, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %86, i32 -1)
  %106 = sub i64 %89, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %107 = phi i64 [ 0, %exit__8 ], [ %113, %exiting__9 ]
  %108 = icmp sle i64 %107, %106
  br i1 %108, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %88, i64 %107)
  %110 = bitcast i8* %109 to { double, double }**
  %111 = load { double, double }*, { double, double }** %110, align 8
  %112 = bitcast { double, double }* %111 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %112, i32 -1)
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %113 = add i64 %107, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  call void @__quantum__rt__array_update_alias_count(%Array* %88, i32 -1)
  %114 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %114, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %87, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %86, i32 -1)
  %115 = sub i64 %89, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %116 = phi i64 [ 0, %exit__9 ], [ %122, %exiting__10 ]
  %117 = icmp sle i64 %116, %115
  br i1 %117, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %118 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %88, i64 %116)
  %119 = bitcast i8* %118 to { double, double }**
  %120 = load { double, double }*, { double, double }** %119, align 8
  %121 = bitcast { double, double }* %120 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %121, i32 -1)
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %122 = add i64 %116, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  call void @__quantum__rt__array_update_reference_count(%Array* %88, i32 -1)
  ret { %Array*, %Array*, %Array* }* %82
}

define internal void @Lifted__PartialApplication__44__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %8 = load %Range, %Range* %7, align 4
  %9 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 5
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 1
  store %Range %8, %Range* %13, align 4
  store i64 %10, i64* %14, align 4
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %15, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 3
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 4
  store double %2, double* %20, align 8
  store %Array* %4, %Array** %21, align 8
  store i2 %6, i2* %22, align 1
  store { %Range, i64 }* %12, { %Range, i64 }** %23, align 8
  store %Array* %17, %Array** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__44__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %8 = load %Range, %Range* %7, align 4
  %9 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 5
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 1
  store %Range %8, %Range* %13, align 4
  store i64 %10, i64* %14, align 4
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %15, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 3
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 4
  store double %2, double* %20, align 8
  store %Array* %4, %Array** %21, align 8
  store i2 %6, i2* %22, align 1
  store { %Range, i64 }* %12, { %Range, i64 }** %23, align 8
  store %Array* %17, %Array** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__44__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 4
  %13 = load %Range, %Range* %12, align 4
  %14 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 5
  %15 = load i64, i64* %14, align 4
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 1
  store %Range %13, %Range* %18, align 4
  store i64 %15, i64* %19, align 4
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 3
  %26 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 4
  store double %7, double* %22, align 8
  store %Array* %9, %Array** %23, align 8
  store i2 %11, i2* %24, align 1
  store { %Range, i64 }* %17, { %Range, i64 }** %25, align 8
  store %Array* %4, %Array** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 1
  store %Array* %3, %Array** %29, align 8
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30, align 8
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 0
  %32 = load %Callable*, %Callable** %31, align 8
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__44__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 4
  %13 = load %Range, %Range* %12, align 4
  %14 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 5
  %15 = load i64, i64* %14, align 4
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 1
  store %Range %13, %Range* %18, align 4
  store i64 %15, i64* %19, align 4
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 3
  %26 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 4
  store double %7, double* %22, align 8
  store %Array* %9, %Array** %23, align 8
  store i2 %11, i2* %24, align 1
  store { %Range, i64 }* %17, { %Range, i64 }** %25, align 8
  store %Array* %4, %Array** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 1
  store %Array* %3, %Array** %29, align 8
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30, align 8
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 0
  %32 = load %Callable*, %Callable** %31, align 8
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %33)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %1 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load %Array*, %Array** %2, align 8
  %8 = load i2, i2* %3, align 1
  %9 = load { %Range, i64 }*, { %Range, i64 }** %4, align 8
  %10 = load %Array*, %Array** %5, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____body(double %6, %Array* %7, i2 %8, { %Range, i64 }* %9, %Array* %10)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %1 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load %Array*, %Array** %2, align 8
  %8 = load i2, i2* %3, align 1
  %9 = load { %Range, i64 }*, { %Range, i64 }** %4, align 8
  %10 = load %Array*, %Array** %5, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____adj(double %6, %Array* %7, i2 %8, { %Range, i64 }* %9, %Array* %10)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, i2, { %Range, i64 }*, %Array* }*, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctl(%Array* %3, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, %Array*, i2, { %Range, i64 }*, %Array* }*, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyMultiplexStep____ctladj(%Array* %3, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__28__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__28__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__45__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %8 = load %Range, %Range* %7, align 4
  %9 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 5
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 1
  store %Range %8, %Range* %13, align 4
  store i64 %10, i64* %14, align 4
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %15, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 3
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 4
  store double %2, double* %20, align 8
  store %Array* %4, %Array** %21, align 8
  store i2 %6, i2* %22, align 1
  store { %Range, i64 }* %12, { %Range, i64 }** %23, align 8
  store %Array* %17, %Array** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__45__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 2
  %4 = load %Array*, %Array** %3, align 8
  %5 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 3
  %6 = load i2, i2* %5, align 1
  %7 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 4
  %8 = load %Range, %Range* %7, align 4
  %9 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 5
  %10 = load i64, i64* %9, align 4
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { %Range, i64 }*
  %13 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %12, i32 0, i32 1
  store %Range %8, %Range* %13, align 4
  store i64 %10, i64* %14, align 4
  %15 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %16 = getelementptr inbounds { %Array* }, { %Array* }* %15, i32 0, i32 0
  %17 = load %Array*, %Array** %16, align 8
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %20 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 1
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 2
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 3
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %19, i32 0, i32 4
  store double %2, double* %20, align 8
  store %Array* %4, %Array** %21, align 8
  store i2 %6, i2* %22, align 1
  store { %Range, i64 }* %12, { %Range, i64 }** %23, align 8
  store %Array* %17, %Array** %24, align 8
  %25 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %0, i32 0, i32 0
  %26 = load %Callable*, %Callable** %25, align 8
  %27 = call %Callable* @__quantum__rt__callable_copy(%Callable* %26, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %27)
  call void @__quantum__rt__callable_invoke(%Callable* %27, %Tuple* %18, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %18, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %27, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %27, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__45__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 4
  %13 = load %Range, %Range* %12, align 4
  %14 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 5
  %15 = load i64, i64* %14, align 4
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 1
  store %Range %13, %Range* %18, align 4
  store i64 %15, i64* %19, align 4
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 3
  %26 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 4
  store double %7, double* %22, align 8
  store %Array* %9, %Array** %23, align 8
  store i2 %11, i2* %24, align 1
  store { %Range, i64 }* %17, { %Range, i64 }** %25, align 8
  store %Array* %4, %Array** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 1
  store %Array* %3, %Array** %29, align 8
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30, align 8
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 0
  %32 = load %Callable*, %Callable** %31, align 8
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__45__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, %Array*, i2, %Range, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 3
  %11 = load i2, i2* %10, align 1
  %12 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 4
  %13 = load %Range, %Range* %12, align 4
  %14 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 5
  %15 = load i64, i64* %14, align 4
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Range, i64 }*
  %18 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %17, i32 0, i32 1
  store %Range %13, %Range* %18, align 4
  store i64 %15, i64* %19, align 4
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, i2, { %Range, i64 }*, %Array* }* getelementptr ({ double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { double, %Array*, i2, { %Range, i64 }*, %Array* }*
  %22 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 1
  %24 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 2
  %25 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 3
  %26 = getelementptr inbounds { double, %Array*, i2, { %Range, i64 }*, %Array* }, { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, i32 0, i32 4
  store double %7, double* %22, align 8
  store %Array* %9, %Array** %23, align 8
  store i2 %11, i2* %24, align 1
  store { %Range, i64 }* %17, { %Range, i64 }** %25, align 8
  store %Array* %4, %Array** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* getelementptr ({ %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }*
  %29 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }, { %Array*, { double, %Array*, i2, { %Range, i64 }*, %Array* }* }* %28, i32 0, i32 1
  store %Array* %3, %Array** %29, align 8
  store { double, %Array*, i2, { %Range, i64 }*, %Array* }* %21, { double, %Array*, i2, { %Range, i64 }*, %Array* }** %30, align 8
  %31 = getelementptr inbounds { %Callable*, double, %Array*, i2, %Range, i64 }, { %Callable*, double, %Array*, i2, %Range, i64 }* %5, i32 0, i32 0
  %32 = load %Callable*, %Callable** %31, align 8
  %33 = call %Callable* @__quantum__rt__callable_copy(%Callable* %32, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %33)
  call void @__quantum__rt__callable_make_controlled(%Callable* %33)
  call void @__quantum__rt__callable_invoke(%Callable* %33, %Tuple* %27, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %33, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %33, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__46__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, i64, %Array* }*
  %10 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store i64 %4, i64* %11, align 4
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__46__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %6 = getelementptr inbounds { %Array* }, { %Array* }* %5, i32 0, i32 0
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, i64, %Array* }*
  %10 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %9, i32 0, i32 2
  store double %2, double* %10, align 8
  store i64 %4, i64* %11, align 4
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__46__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, i64, %Array* }*
  %12 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store i64 %9, i64* %13, align 4
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, i64, %Array* }* }* getelementptr ({ %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, i64, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, i64, %Array* }* %11, { double, i64, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__46__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, %Array* }* getelementptr ({ double, i64, %Array* }, { double, i64, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { double, i64, %Array* }*
  %12 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %11, i32 0, i32 2
  store double %7, double* %12, align 8
  store i64 %9, i64* %13, align 4
  store %Array* %4, %Array** %14, align 8
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, i64, %Array* }* }* getelementptr ({ %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { %Array*, { double, i64, %Array* }* }*
  %17 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %16, i32 0, i32 1
  store %Array* %3, %Array** %17, align 8
  store { double, i64, %Array* }* %11, { double, i64, %Array* }** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_make_controlled(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %15, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, %Array* }*
  %1 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 2
  %4 = load double, double* %1, align 8
  %5 = load i64, i64* %2, align 4
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____body(double %4, i64 %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, %Array* }*
  %1 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, i64, %Array* }, { double, i64, %Array* }* %0, i32 0, i32 2
  %4 = load double, double* %1, align 8
  %5 = load i64, i64* %2, align 4
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____adj(double %4, i64 %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, i64, %Array* }*, { double, i64, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctl(%Array* %3, { double, i64, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, i64, %Array* }* }, { %Array*, { double, i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, i64, %Array* }*, { double, i64, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyGlobalRotationStep____ctladj(%Array* %3, { double, i64, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__29__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__29__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal { { double, double }*, double, double }* @Microsoft__Quantum__Preparation__BlochSphereCoordinates__body({ double, double }* %a0, { double, double }* %a1) {
entry:
  %0 = bitcast { double, double }* %a0 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 1)
  %1 = bitcast { double, double }* %a1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %abs0 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %a0)
  %abs1 = call double @Microsoft__Quantum__Math__AbsComplexPolar__body({ double, double }* %a1)
  %arg0 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %a0)
  %arg1 = call double @Microsoft__Quantum__Math__ArgComplexPolar__body({ double, double }* %a1)
  %2 = fmul double %abs0, %abs0
  %3 = fmul double %abs1, %abs1
  %d = fadd double %2, %3
  %r = call double @__quantum__qis__sqrt__body(double %d)
  %4 = fadd double %arg0, %arg1
  %t = fmul double 5.000000e-01, %4
  %phi = fsub double %arg1, %arg0
  %5 = call double @__quantum__qis__arctan2__body(double %abs1, double %abs0)
  %theta = fmul double 2.000000e+00, %5
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { double, double }*, double, double }* getelementptr ({ { double, double }*, double, double }, { { double, double }*, double, double }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { double, double }*, double, double }*
  %8 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %7, i32 0, i32 1
  %10 = getelementptr inbounds { { double, double }*, double, double }, { { double, double }*, double, double }* %7, i32 0, i32 2
  %11 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %r, double %t)
  store { double, double }* %11, { double, double }** %8, align 8
  store double %phi, double* %9, align 8
  store double %theta, double* %10, align 8
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  ret { { double, double }*, double, double }* %7
}

define internal %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %nQubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = trunc i64 %nQubits to i32
  %10 = call double @llvm.powi.f64.i32(double -2.000000e+00, i32 %9)
  %11 = fptosi double %10 to i64
  %12 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double 0.000000e+00, double 0.000000e+00)
  %coefficientsPadded = call %Array* @Microsoft__Quantum__Arrays___bc6513e6a11c42d1a57534e72ebbc64c_Padded__body(i64 %11, { double, double }* %12, %Array* %coefficients)
  %13 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsPadded)
  %14 = sub i64 %13, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %15)
  %18 = bitcast i8* %17 to { double, double }**
  %19 = load { double, double }*, { double, double }** %18, align 8
  %20 = bitcast { double, double }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 1)
  %22 = icmp sgt i64 %nQubits, 1
  %23 = sub i64 %nQubits, 1
  %24 = load %Range, %Range* @EmptyRange, align 4
  %25 = insertvalue %Range %24, i64 1, 0
  %26 = insertvalue %Range %25, i64 1, 1
  %27 = insertvalue %Range %26, i64 %23, 2
  %28 = load %Range, %Range* @EmptyRange, align 4
  %29 = insertvalue %Range %28, i64 1, 0
  %30 = insertvalue %Range %29, i64 1, 1
  %31 = insertvalue %Range %30, i64 0, 2
  %rngControl = select i1 %22, %Range %27, %Range %31
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Range, i64 }* getelementptr ({ %Range, i64 }, { %Range, i64 }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { %Range, i64 }*
  %34 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { %Range, i64 }, { %Range, i64 }* %33, i32 0, i32 1
  store %Range %rngControl, %Range* %34, align 4
  store i64 0, i64* %35, align 4
  %plan = call %Array* @Microsoft__Quantum__Preparation____QsRef1__ApproximatelyUnprepareArbitraryStatePlan____body(double %tolerance, %Array* %coefficientsPadded, { %Range, i64 }* %33)
  %36 = call i64 @__quantum__rt__array_get_size_1d(%Array* %plan)
  %37 = sub i64 %36, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %38 = phi i64 [ 0, %exit__2 ], [ %43, %exiting__3 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %plan, i64 %38)
  %41 = bitcast i8* %40 to %Callable**
  %42 = load %Callable*, %Callable** %41, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %42, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %42, i32 1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %43 = add i64 %38, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %plan, i32 1)
  %unprepare = call %Callable* @Microsoft__Quantum__Canon___76fba6cab0944055820a95dde131bcd9_BoundCA__body(%Array* %plan)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unprepare, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unprepare, i32 1)
  %44 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable* }, { %Callable*, %Callable* }* null, i32 1) to i64))
  %45 = bitcast %Tuple* %44 to { %Callable*, %Callable* }*
  %46 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %45, i32 0, i32 0
  %47 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %45, i32 0, i32 1
  %48 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %49 = call %Callable* @__quantum__rt__callable_copy(%Callable* %unprepare, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %49, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %49)
  store %Callable* %48, %Callable** %46, align 8
  store %Callable* %49, %Callable** %47, align 8
  %50 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__47__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__30__FunctionTable, %Tuple* %44)
  %51 = sub i64 %0, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %52 = phi i64 [ 0, %exit__3 ], [ %58, %exiting__4 ]
  %53 = icmp sle i64 %52, %51
  br i1 %53, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %54 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %52)
  %55 = bitcast i8* %54 to { double, double }**
  %56 = load { double, double }*, { double, double }** %55, align 8
  %57 = bitcast { double, double }* %56 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %57, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %58 = add i64 %52, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  %59 = sub i64 %13, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %60 = phi i64 [ 0, %exit__4 ], [ %66, %exiting__5 ]
  %61 = icmp sle i64 %60, %59
  br i1 %61, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %62 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %60)
  %63 = bitcast i8* %62 to { double, double }**
  %64 = load { double, double }*, { double, double }** %63, align 8
  %65 = bitcast { double, double }* %64 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %65, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %66 = add i64 %60, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsPadded, i32 -1)
  %67 = sub i64 %36, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %68 = phi i64 [ 0, %exit__5 ], [ %73, %exiting__6 ]
  %69 = icmp sle i64 %68, %67
  br i1 %69, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %70 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %plan, i64 %68)
  %71 = bitcast i8* %70 to %Callable**
  %72 = load %Callable*, %Callable** %71, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %72, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %72, i32 -1)
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %73 = add i64 %68, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  call void @__quantum__rt__array_update_alias_count(%Array* %plan, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %unprepare, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %unprepare, i32 -1)
  %74 = bitcast { double, double }* %12 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %74, i32 -1)
  %75 = sub i64 %13, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %76 = phi i64 [ 0, %exit__6 ], [ %82, %exiting__7 ]
  %77 = icmp sle i64 %76, %75
  br i1 %77, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %78 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsPadded, i64 %76)
  %79 = bitcast i8* %78 to { double, double }**
  %80 = load { double, double }*, { double, double }** %79, align 8
  %81 = bitcast { double, double }* %80 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %81, i32 -1)
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %82 = add i64 %76, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsPadded, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  %83 = sub i64 %36, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %84 = phi i64 [ 0, %exit__7 ], [ %89, %exiting__8 ]
  %85 = icmp sle i64 %84, %83
  br i1 %85, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %86 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %plan, i64 %84)
  %87 = bitcast i8* %86 to %Callable**
  %88 = load %Callable*, %Callable** %87, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %88, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %88, i32 -1)
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %89 = add i64 %84, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  call void @__quantum__rt__array_update_reference_count(%Array* %plan, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %unprepare, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %unprepare, i32 -1)
  ret %Callable* %50
}

define internal void @Lifted__PartialApplication__47__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array* }* }* getelementptr ({ %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, { %Array* }* }*
  %5 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %4, i32 0, i32 1
  store %Callable* %2, %Callable** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %9, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__47__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array* }* }* getelementptr ({ %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, { %Array* }* }*
  %5 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %4, i32 0, i32 1
  store %Callable* %2, %Callable** %5, align 8
  %7 = bitcast %Tuple* %arg-tuple to { %Array* }*
  store { %Array* }* %7, { %Array* }** %6, align 8
  %8 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = call %Callable* @__quantum__rt__callable_copy(%Callable* %9, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %10)
  call void @__quantum__rt__callable_invoke(%Callable* %10, %Tuple* %3, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__47__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array* }* }* getelementptr ({ %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, { %Array* }* }*
  %10 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store { %Array* }* %4, { %Array* }** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, { %Array* }* }* }* getelementptr ({ %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, { %Array* }* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, { %Array* }* }* %9, { %Callable*, { %Array* }* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__47__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { %Array* }* }* getelementptr ({ %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, { %Array* }* }*
  %10 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %9, i32 0, i32 1
  store %Callable* %7, %Callable** %10, align 8
  store { %Array* }* %4, { %Array* }** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, { %Array* }* }* }* getelementptr ({ %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Callable*, { %Array* }* }* }*
  %14 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { %Callable*, { %Array* }* }* %9, { %Callable*, { %Array* }* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Callable*, %Callable** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____body(%Callable* %3, { %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, { %Array* }* }*
  %1 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, { %Array* }* }, { %Callable*, { %Array* }* }* %0, i32 0, i32 1
  %3 = load %Callable*, %Callable** %1, align 8
  %4 = load { %Array* }*, { %Array* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____adj(%Callable* %3, { %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, { %Array* }* }*, { %Callable*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctl(%Array* %3, { %Callable*, { %Array* }* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, { %Array* }* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, { %Array* }* }* }, { %Array*, { %Callable*, { %Array* }* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, { %Array* }* }*, { %Callable*, { %Array* }* }** %2, align 8
  call void @Microsoft__Quantum__Preparation____QsRef1__ApplyToLittleEndian____ctladj(%Array* %3, { %Callable*, { %Array* }* }* %4)
  ret void
}

define internal void @MemoryManagement__30__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__30__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__body(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %10)
  %13 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %12)
  call void @__quantum__rt__callable_invoke(%Callable* %13, %Tuple* %11, %Tuple* null)
  %14 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %15 = phi i64 [ 0, %exit__1 ], [ %21, %exiting__2 ]
  %16 = icmp sle i64 %15, %14
  br i1 %16, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %17 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %15)
  %18 = bitcast i8* %17 to { double, double }**
  %19 = load { double, double }*, { double, double }** %18, align 8
  %20 = bitcast { double, double }* %19 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %20, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %21 = add i64 %15, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__adj(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  %12 = call i64 @__quantum__rt__array_get_size_1d(%Array* %10)
  %13 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %12)
  %14 = call %Callable* @__quantum__rt__callable_copy(%Callable* %13, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %14)
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %11, %Tuple* null)
  %15 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %16 = phi i64 [ 0, %exit__1 ], [ %22, %exiting__2 ]
  %17 = icmp sle i64 %16, %15
  br i1 %17, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %18 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %16)
  %19 = bitcast i8* %18 to { double, double }**
  %20 = load { double, double }*, { double, double }** %19, align 8
  %21 = bitcast { double, double }* %20 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %22 = add i64 %16, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %5)
  %8 = bitcast i8* %7 to { double, double }**
  %9 = load { double, double }*, { double, double }** %8, align 8
  %10 = bitcast { double, double }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %12 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %12, align 8
  %13 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %15 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %14)
  %17 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %16)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, { %Array* }* }*
  %21 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 1)
  store %Array* %__controlQubits__, %Array** %21, align 8
  store { %Array* }* %qubits, { %Array* }** %22, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %23 = sub i64 %3, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %24 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %25 = icmp sle i64 %24, %23
  br i1 %25, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %24)
  %27 = bitcast i8* %26 to { double, double }**
  %28 = load { double, double }*, { double, double }** %27, align 8
  %29 = bitcast { double, double }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %24, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  %3 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %4 = sub i64 %3, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %5 = phi i64 [ 0, %entry ], [ %11, %exiting__1 ]
  %6 = icmp sle i64 %5, %4
  br i1 %6, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %7 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %5)
  %8 = bitcast i8* %7 to { double, double }**
  %9 = load { double, double }*, { double, double }** %8, align 8
  %10 = bitcast { double, double }* %9 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %11 = add i64 %5, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %12 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %12, align 8
  %13 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %14 = load %Array*, %Array** %13, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 1)
  %15 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = call i64 @__quantum__rt__array_get_size_1d(%Array* %14)
  %17 = call %Callable* @Microsoft__Quantum__Preparation___CompileApproximateArbitraryStatePreparation__body(double %tolerance, %Array* %coefficients, i64 %16)
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  %19 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array* }* }* getelementptr ({ %Array*, { %Array* }* }, { %Array*, { %Array* }* }* null, i32 1) to i64))
  %20 = bitcast %Tuple* %19 to { %Array*, { %Array* }* }*
  %21 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i32 0, i32 0
  %22 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %20, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 1)
  store %Array* %__controlQubits__, %Array** %21, align 8
  store { %Array* }* %qubits, { %Array* }** %22, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %19, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %23 = sub i64 %3, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %24 = phi i64 [ 0, %exit__1 ], [ %30, %exiting__2 ]
  %25 = icmp sle i64 %24, %23
  br i1 %25, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %26 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %24)
  %27 = bitcast i8* %26 to { double, double }**
  %28 = load { double, double }*, { double, double }** %27, align 8
  %29 = bitcast { double, double }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %30 = add i64 %24, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %14, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %19, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__body(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, double }*
  %5 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %4, i32 0, i32 1
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  store %Callable* %7, %Callable** %5, align 8
  store double 0.000000e+00, double* %6, align 8
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__48__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__31__FunctionTable, %Tuple* %3)
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %10 = call %Callable* @Microsoft__Quantum__Canon___97989c0516e045d58b685c2060226bd1_Compose__body(%Callable* %8, %Callable* %9)
  %coefficientsAsComplexPolar = call %Array* @Microsoft__Quantum__Arrays___877cada1f4394738a1d50841ca74b746_Mapped__body(%Callable* %10, %Array* %coefficients)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsAsComplexPolar)
  %12 = sub i64 %11, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %13 = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16, align 8
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %13, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsAsComplexPolar, i32 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__body(double %tolerance, %Array* %coefficientsAsComplexPolar, { %Array* }* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  %20 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24, align 8
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsAsComplexPolar, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  %28 = sub i64 %11, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32, align 8
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsAsComplexPolar, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__48__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr inbounds { double }, { double }* %0, i32 0, i32 0
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store double %5, double* %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Math__ComplexPolar__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, double }*
  %1 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, double }, { double, double }* %0, i32 0, i32 1
  %3 = load double, double* %1, align 8
  %4 = load double, double* %2, align 8
  %5 = call { double, double }* @Microsoft__Quantum__Math__ComplexPolar__body(double %3, double %4)
  %6 = bitcast %Tuple* %result-tuple to { { double, double }* }*
  %7 = getelementptr inbounds { { double, double }* }, { { double, double }* }* %6, i32 0, i32 0
  store { double, double }* %5, { double, double }** %7, align 8
  ret void
}

define internal void @MemoryManagement__31__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__31__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Math__AbsD__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr inbounds { double }, { double }* %0, i32 0, i32 0
  %2 = load double, double* %1, align 8
  %3 = call double @Microsoft__Quantum__Math__AbsD__body(double %2)
  %4 = bitcast %Tuple* %result-tuple to { double }*
  %5 = getelementptr inbounds { double }, { double }* %4, i32 0, i32 0
  store double %3, double* %5, align 8
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__adj(double %tolerance, %Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Callable*, double }*
  %5 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %4, i32 0, i32 0
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %4, i32 0, i32 1
  %7 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  store %Callable* %7, %Callable** %5, align 8
  store double 0.000000e+00, double* %6, align 8
  %8 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__49__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__31__FunctionTable, %Tuple* %3)
  %9 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %10 = call %Callable* @Microsoft__Quantum__Canon___97989c0516e045d58b685c2060226bd1_Compose__body(%Callable* %8, %Callable* %9)
  %__qsVar0__coefficientsAsComplexPolar__ = call %Array* @Microsoft__Quantum__Arrays___877cada1f4394738a1d50841ca74b746_Mapped__body(%Callable* %10, %Array* %coefficients)
  %11 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  %12 = sub i64 %11, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %13 = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16, align 8
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %13, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__adj(double %tolerance, %Array* %__qsVar0__coefficientsAsComplexPolar__, { %Array* }* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  %20 = sub i64 %11, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24, align 8
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %10, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %10, i32 -1)
  %28 = sub i64 %11, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32, align 8
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__49__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr inbounds { double }, { double }* %0, i32 0, i32 0
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store double %5, double* %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Callable*, double }*
  %9 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %8, i32 0, i32 1
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  store %Callable* %11, %Callable** %9, align 8
  store double 0.000000e+00, double* %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__50__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__31__FunctionTable, %Tuple* %7)
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %14 = call %Callable* @Microsoft__Quantum__Canon___97989c0516e045d58b685c2060226bd1_Compose__body(%Callable* %12, %Callable* %13)
  %coefficientsAsComplexPolar = call %Array* @Microsoft__Quantum__Arrays___877cada1f4394738a1d50841ca74b746_Mapped__body(%Callable* %14, %Array* %coefficients)
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficientsAsComplexPolar)
  %16 = sub i64 %15, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %17 = phi i64 [ 0, %entry ], [ %23, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %17)
  %20 = bitcast i8* %19 to { double, double }**
  %21 = load { double, double }*, { double, double }** %20, align 8
  %22 = bitcast { double, double }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %23 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsAsComplexPolar, i32 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { double, %Array*, { %Array* }* }*
  %26 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i32 0, i32 1
  %28 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i32 0, i32 2
  %29 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %30 = phi i64 [ 0, %exit__1 ], [ %36, %exiting__2 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %30)
  %33 = bitcast i8* %32 to { double, double }**
  %34 = load { double, double }*, { double, double }** %33, align 8
  %35 = bitcast { double, double }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %30, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsAsComplexPolar, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  store double %tolerance, double* %26, align 8
  store %Array* %coefficientsAsComplexPolar, %Array** %27, align 8
  store { %Array* }* %qubits, { %Array* }** %28, align 8
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %25)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  %37 = sub i64 %15, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %38 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %38)
  %41 = bitcast i8* %40 to { double, double }**
  %42 = load { double, double }*, { double, double }** %41, align 8
  %43 = bitcast { double, double }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %38, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficientsAsComplexPolar, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 -1)
  %45 = sub i64 %15, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %52, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %46)
  %49 = bitcast i8* %48 to { double, double }**
  %50 = load { double, double }*, { double, double }** %49, align 8
  %51 = bitcast { double, double }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %52 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsAsComplexPolar, i32 -1)
  %53 = sub i64 %15, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %54 = phi i64 [ 0, %exit__4 ], [ %60, %exiting__5 ]
  %55 = icmp sle i64 %54, %53
  br i1 %55, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficientsAsComplexPolar, i64 %54)
  %57 = bitcast i8* %56 to { double, double }**
  %58 = load { double, double }*, { double, double }** %57, align 8
  %59 = bitcast { double, double }* %58 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %59, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %60 = add i64 %54, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficientsAsComplexPolar, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__50__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr inbounds { double }, { double }* %0, i32 0, i32 0
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store double %5, double* %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 0
  %tolerance = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 1
  %coefficients = load %Array*, %Array** %2, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %3 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %0, i32 0, i32 2
  %qubits = load { %Array* }*, { %Array* }** %3, align 8
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 1)
  %6 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %8 = bitcast %Tuple* %7 to { %Callable*, double }*
  %9 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %8, i32 0, i32 0
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %8, i32 0, i32 1
  %11 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__ComplexPolar__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  store %Callable* %11, %Callable** %9, align 8
  store double 0.000000e+00, double* %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__51__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__31__FunctionTable, %Tuple* %7)
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Math__AbsD__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %14 = call %Callable* @Microsoft__Quantum__Canon___97989c0516e045d58b685c2060226bd1_Compose__body(%Callable* %12, %Callable* %13)
  %__qsVar0__coefficientsAsComplexPolar__ = call %Array* @Microsoft__Quantum__Arrays___877cada1f4394738a1d50841ca74b746_Mapped__body(%Callable* %14, %Array* %coefficients)
  %15 = call i64 @__quantum__rt__array_get_size_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__)
  %16 = sub i64 %15, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %17 = phi i64 [ 0, %entry ], [ %23, %exiting__1 ]
  %18 = icmp sle i64 %17, %16
  br i1 %18, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %19 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %17)
  %20 = bitcast i8* %19 to { double, double }**
  %21 = load { double, double }*, { double, double }** %20, align 8
  %22 = bitcast { double, double }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %22, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %23 = add i64 %17, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 1)
  %24 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %25 = bitcast %Tuple* %24 to { double, %Array*, { %Array* }* }*
  %26 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i32 0, i32 0
  %27 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i32 0, i32 1
  %28 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %25, i32 0, i32 2
  %29 = sub i64 %15, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %30 = phi i64 [ 0, %exit__1 ], [ %36, %exiting__2 ]
  %31 = icmp sle i64 %30, %29
  br i1 %31, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %32 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %30)
  %33 = bitcast i8* %32 to { double, double }**
  %34 = load { double, double }*, { double, double }** %33, align 8
  %35 = bitcast { double, double }* %34 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %36 = add i64 %30, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  store double %tolerance, double* %26, align 8
  store %Array* %__qsVar0__coefficientsAsComplexPolar__, %Array** %27, align 8
  store { %Array* }* %qubits, { %Array* }** %28, align 8
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %25)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  %37 = sub i64 %15, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %38 = phi i64 [ 0, %exit__2 ], [ %44, %exiting__3 ]
  %39 = icmp sle i64 %38, %37
  br i1 %39, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %40 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %38)
  %41 = bitcast i8* %40 to { double, double }**
  %42 = load { double, double }*, { double, double }** %41, align 8
  %43 = bitcast { double, double }* %42 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %43, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %44 = add i64 %38, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %14, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %14, i32 -1)
  %45 = sub i64 %15, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %46 = phi i64 [ 0, %exit__3 ], [ %52, %exiting__4 ]
  %47 = icmp sle i64 %46, %45
  br i1 %47, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %48 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %46)
  %49 = bitcast i8* %48 to { double, double }**
  %50 = load { double, double }*, { double, double }** %49, align 8
  %51 = bitcast { double, double }* %50 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %51, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %52 = add i64 %46, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 -1)
  %53 = sub i64 %15, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %54 = phi i64 [ 0, %exit__4 ], [ %60, %exiting__5 ]
  %55 = icmp sle i64 %54, %53
  br i1 %55, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %56 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %__qsVar0__coefficientsAsComplexPolar__, i64 %54)
  %57 = bitcast i8* %56 to { double, double }**
  %58 = load { double, double }*, { double, double }** %57, align 8
  %59 = bitcast { double, double }* %58 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %59, i32 -1)
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %60 = add i64 %54, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  call void @__quantum__rt__array_update_reference_count(%Array* %__qsVar0__coefficientsAsComplexPolar__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__51__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double }*
  %1 = getelementptr inbounds { double }, { double }* %0, i32 0, i32 0
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %4 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 1
  %5 = load double, double* %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, double }* getelementptr ({ double, double }, { double, double }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, double }*
  %8 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, double }, { double, double }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store double %5, double* %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %3, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__adj(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  %0 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %1 = sub i64 %0, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %2 = phi i64 [ 0, %entry ], [ %8, %exiting__1 ]
  %3 = icmp sle i64 %2, %1
  br i1 %3, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %4 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %2)
  %5 = bitcast i8* %4 to { double, double }**
  %6 = load { double, double }*, { double, double }** %5, align 8
  %7 = bitcast { double, double }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %8 = add i64 %2, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %9 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %10 = load %Array*, %Array** %9, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 1)
  %11 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__adj(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  %12 = sub i64 %0, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %13 = phi i64 [ 0, %exit__1 ], [ %19, %exiting__2 ]
  %14 = icmp sle i64 %13, %12
  br i1 %14, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %15 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %13)
  %16 = bitcast i8* %15 to { double, double }**
  %17 = load { double, double }*, { double, double }** %16, align 8
  %18 = bitcast { double, double }* %17 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %18, i32 -1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %19 = add i64 %13, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %10, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %11, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %coefficients = load %Array*, %Array** %1, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %4)
  %7 = bitcast i8* %6 to { double, double }**
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %11, align 8
  %12 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  %14 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { double, %Array*, { %Array* }* }*
  %17 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i32 0, i32 1
  %19 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i32 0, i32 2
  %20 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24, align 8
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 1)
  store double 0.000000e+00, double* %17, align 8
  store %Array* %coefficients, %Array** %18, align 8
  store { %Array* }* %qubits, { %Array* }** %19, align 8
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %16)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %28 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32, align 8
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  %36 = sub i64 %2, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %37 = phi i64 [ 0, %exit__3 ], [ %43, %exiting__4 ]
  %38 = icmp sle i64 %37, %36
  br i1 %38, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %37)
  %40 = bitcast i8* %39 to { double, double }**
  %41 = load { double, double }*, { double, double }** %40, align 8
  %42 = bitcast { double, double }* %41 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %43 = add i64 %37, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %coefficients = load %Array*, %Array** %1, align 8
  %2 = call i64 @__quantum__rt__array_get_size_1d(%Array* %coefficients)
  %3 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %4 = phi i64 [ 0, %entry ], [ %10, %exiting__1 ]
  %5 = icmp sle i64 %4, %3
  br i1 %5, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %6 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %4)
  %7 = bitcast i8* %6 to { double, double }**
  %8 = load { double, double }*, { double, double }** %7, align 8
  %9 = bitcast { double, double }* %8 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %10 = add i64 %4, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %11 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %11, align 8
  %12 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %13 = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 1)
  %14 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  %15 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %16 = bitcast %Tuple* %15 to { double, %Array*, { %Array* }* }*
  %17 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i32 0, i32 0
  %18 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i32 0, i32 1
  %19 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %16, i32 0, i32 2
  %20 = sub i64 %2, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %21 = phi i64 [ 0, %exit__1 ], [ %27, %exiting__2 ]
  %22 = icmp sle i64 %21, %20
  br i1 %22, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %23 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %21)
  %24 = bitcast i8* %23 to { double, double }**
  %25 = load { double, double }*, { double, double }** %24, align 8
  %26 = bitcast { double, double }* %25 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 1)
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %27 = add i64 %21, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 1)
  store double 0.000000e+00, double* %17, align 8
  store %Array* %coefficients, %Array** %18, align 8
  store { %Array* }* %qubits, { %Array* }** %19, align 8
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateCP__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %16)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  %28 = sub i64 %2, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %29 = phi i64 [ 0, %exit__2 ], [ %35, %exiting__3 ]
  %30 = icmp sle i64 %29, %28
  br i1 %30, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %31 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %29)
  %32 = bitcast i8* %31 to { double, double }**
  %33 = load { double, double }*, { double, double }** %32, align 8
  %34 = bitcast { double, double }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %34, i32 -1)
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %35 = add i64 %29, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %13, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  %36 = sub i64 %2, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %37 = phi i64 [ 0, %exit__3 ], [ %43, %exiting__4 ]
  %38 = icmp sle i64 %37, %36
  br i1 %38, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %39 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %coefficients, i64 %37)
  %40 = bitcast i8* %39 to { double, double }**
  %41 = load { double, double }*, { double, double }** %40, align 8
  %42 = bitcast { double, double }* %41 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %42, i32 -1)
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %43 = add i64 %37, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__body(%Array* %coefficients, { %Array* }* %qubits) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %0 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %1 = load %Array*, %Array** %0, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 1)
  %2 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__body(double 0.000000e+00, %Array* %coefficients, { %Array* }* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctl(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %coefficients = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array*, { %Array* }* }*
  %8 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i32 0, i32 1
  %10 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 1)
  store double 0.000000e+00, double* %8, align 8
  store %Array* %coefficients, %Array** %9, align 8
  store { %Array* }* %qubits, { %Array* }** %10, align 8
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctl(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %7)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Preparation__PrepareArbitraryStateD__ctladj(%Array* %__controlQubits__, { %Array*, { %Array* }* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 0
  %coefficients = load %Array*, %Array** %1, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 1)
  %2 = getelementptr inbounds { %Array*, { %Array* }* }, { %Array*, { %Array* }* }* %0, i32 0, i32 1
  %qubits = load { %Array* }*, { %Array* }** %2, align 8
  %3 = getelementptr inbounds { %Array* }, { %Array* }* %qubits, i32 0, i32 0
  %4 = load %Array*, %Array** %3, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 1)
  %5 = bitcast { %Array* }* %qubits to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array*, { %Array* }* }* getelementptr ({ double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array*, { %Array* }* }*
  %8 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i32 0, i32 1
  %10 = getelementptr inbounds { double, %Array*, { %Array* }* }, { double, %Array*, { %Array* }* }* %7, i32 0, i32 2
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 1)
  store double 0.000000e+00, double* %8, align 8
  store %Array* %coefficients, %Array** %9, align 8
  store { %Array* }* %qubits, { %Array* }** %10, align 8
  call void @Microsoft__Quantum__Preparation__ApproximatelyPrepareArbitraryStateD__ctladj(%Array* %__controlQubits__, { double, %Array*, { %Array* }* }* %7)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %coefficients, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation____QsRef1___AddGeneratorSystems____body(i64 %idxTerm, i64 %nTermsA, i64 %nTermsB, %Callable* %generatorIndexFunctionA, %Callable* %generatorIndexFunctionB) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionA, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionA, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionB, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionB, i32 1)
  %0 = icmp slt i64 %idxTerm, %nTermsA
  br i1 %0, label %then0__1, label %else__1

then0__1:                                         ; preds = %entry
  %1 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %2 = bitcast %Tuple* %1 to { i64 }*
  %3 = getelementptr inbounds { i64 }, { i64 }* %2, i32 0, i32 0
  store i64 %idxTerm, i64* %3, align 4
  %4 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %generatorIndexFunctionA, %Tuple* %1, %Tuple* %4)
  %5 = bitcast %Tuple* %4 to { { { %Array*, %Array* }*, %Array* }* }*
  %6 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %5, i32 0, i32 0
  %7 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %6, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %4, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %7

else__1:                                          ; preds = %entry
  %8 = sub i64 %idxTerm, %nTermsA
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { i64 }*
  %11 = getelementptr inbounds { i64 }, { i64 }* %10, i32 0, i32 0
  store i64 %8, i64* %11, align 4
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %generatorIndexFunctionB, %Tuple* %9, %Tuple* %12)
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %15 = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %14, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %15

continue__1:                                      ; No predecessors!
  %16 = call %String* @__quantum__rt__string_create(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @15, i32 0, i32 0))
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__fail(%String* %16)
  unreachable
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____body(double %trotterStepSize, i64 %trotterOrder, double %maxTime, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %1 = load { %Callable* }*, { %Callable* }** %0, align 8
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { %Callable* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %5, align 8
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  %9 = bitcast { i64, %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %11 = fdiv double %maxTime, %trotterStepSize
  %nTimeSlices = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %11)
  %12 = sitofp i64 %nTimeSlices to double
  %resizedTrotterStepSize = fdiv double %maxTime, %12
  %13 = sub i64 %nTimeSlices, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxTimeSlice = phi i64 [ 0, %entry ], [ %19, %exiting__1 ]
  %14 = icmp sle i64 %idxTimeSlice, %13
  br i1 %14, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %15 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %resizedTrotterStepSize)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array* }*
  %18 = getelementptr inbounds { %Array* }, { %Array* }* %17, i32 0, i32 0
  store %Array* %qubits, %Array** %18, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %19 = add i64 %idxTimeSlice, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %trotterStepSize) {
entry:
  %0 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %evolutionSet = load { %Callable* }*, { %Callable* }** %0, align 8
  %1 = getelementptr inbounds { %Callable* }, { %Callable* }* %evolutionSet, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 1)
  %3 = bitcast { %Callable* }* %evolutionSet to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %4 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %generatorSystem = load { i64, %Callable* }*, { i64, %Callable* }** %4, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %generatorSystemFunction = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  %6 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 0
  %nTerms = load i64, i64* %8, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Callable* }* getelementptr ({ i64, %Callable* }, { i64, %Callable* }* null, i32 1) to i64))
  %trotterForm = bitcast %Tuple* %9 to { i64, %Callable* }*
  %10 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %trotterForm, i32 0, i32 0
  %11 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %trotterForm, i32 0, i32 1
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* getelementptr ({ %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %14 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %13, i32 0, i32 1
  %16 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %7, i32 1)
  store %Callable* %16, %Callable** %14, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, { { %Callable* }*, { i64, %Callable* }* }** %15, align 8
  %17 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__54__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__34__FunctionTable, %Tuple* %12)
  store i64 %nTerms, i64* %10, align 4
  store %Callable* %17, %Callable** %11, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %17, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %17, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %18 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, double }* getelementptr ({ %Callable*, double }, { %Callable*, double }* null, i32 1) to i64))
  %19 = bitcast %Tuple* %18 to { %Callable*, double }*
  %20 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %19, i32 0, i32 0
  %21 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %19, i32 0, i32 1
  %22 = call %Callable* @Microsoft__Quantum__Canon___10884c63c2824fe3855d321aeb132037_DecomposedIntoTimeStepsCA__body({ i64, %Callable* }* %trotterForm, i64 %trotterOrder)
  store %Callable* %22, %Callable** %20, align 8
  store double %trotterStepSize, double* %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__55__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__35__FunctionTable, %Tuple* %18)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %17, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  ret %Callable* %23
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____adj(double %trotterStepSize, i64 %trotterOrder, double %maxTime, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %1 = load { %Callable* }*, { %Callable* }** %0, align 8
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { %Callable* }* %1 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %6 = load { i64, %Callable* }*, { i64, %Callable* }** %5, align 8
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %6, i32 0, i32 1
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  %9 = bitcast { i64, %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %11 = fdiv double %maxTime, %trotterStepSize
  %__qsVar0__nTimeSlices__ = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %11)
  %12 = sitofp i64 %__qsVar0__nTimeSlices__ to double
  %__qsVar1__resizedTrotterStepSize__ = fdiv double %maxTime, %12
  %13 = sub i64 %__qsVar0__nTimeSlices__, 1
  %14 = sub i64 %13, 0
  %15 = sdiv i64 %14, 1
  %16 = mul i64 1, %15
  %17 = add i64 0, %16
  %18 = load %Range, %Range* @EmptyRange, align 4
  %19 = insertvalue %Range %18, i64 %17, 0
  %20 = insertvalue %Range %19, i64 -1, 1
  %21 = insertvalue %Range %20, i64 0, 2
  %22 = extractvalue %Range %21, 0
  %23 = extractvalue %Range %21, 1
  %24 = extractvalue %Range %21, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %25 = icmp sgt i64 %23, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar2__idxTimeSlice__ = phi i64 [ %22, %preheader__1 ], [ %34, %exiting__1 ]
  %26 = icmp sle i64 %__qsVar2__idxTimeSlice__, %24
  %27 = icmp sge i64 %__qsVar2__idxTimeSlice__, %24
  %28 = select i1 %25, i1 %26, i1 %27
  br i1 %28, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %29 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %__qsVar1__resizedTrotterStepSize__)
  %30 = call %Callable* @__quantum__rt__callable_copy(%Callable* %29, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %30, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %30)
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { %Array* }*
  %33 = getelementptr inbounds { %Array* }, { %Array* }* %32, i32 0, i32 0
  store %Array* %qubits, %Array** %33, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %30, %Tuple* %31, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %30, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %30, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %34 = add i64 %__qsVar2__idxTimeSlice__, %23
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____ctl(%Array* %__controlQubits__, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 0
  %trotterStepSize = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 1
  %trotterOrder = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 2
  %maxTime = load double, double* %3, align 8
  %4 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 3
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4, align 8
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 1)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 4
  %qubits = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %17 = fdiv double %maxTime, %trotterStepSize
  %nTimeSlices = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %17)
  %18 = sitofp i64 %nTimeSlices to double
  %resizedTrotterStepSize = fdiv double %maxTime, %18
  %19 = sub i64 %nTimeSlices, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %idxTimeSlice = phi i64 [ 0, %entry ], [ %27, %exiting__1 ]
  %20 = icmp sle i64 %idxTimeSlice, %19
  br i1 %20, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %21 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %resizedTrotterStepSize)
  %22 = call %Callable* @__quantum__rt__callable_copy(%Callable* %21, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %22)
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, %Array* }*
  %25 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %24, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store %Array* %__controlQubits__, %Array** %25, align 8
  store %Array* %qubits, %Array** %26, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %22, %Tuple* %23, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %22, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %27 = add i64 %idxTimeSlice, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____ctladj(%Array* %__controlQubits__, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 0
  %trotterStepSize = load double, double* %1, align 8
  %2 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 1
  %trotterOrder = load i64, i64* %2, align 4
  %3 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 2
  %maxTime = load double, double* %3, align 8
  %4 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 3
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4, align 8
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 1)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 1)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 1)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 1)
  %16 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 4
  %qubits = load %Array*, %Array** %16, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %17 = fdiv double %maxTime, %trotterStepSize
  %__qsVar0__nTimeSlices__ = call i64 @Microsoft__Quantum__Math__Ceiling__body(double %17)
  %18 = sitofp i64 %__qsVar0__nTimeSlices__ to double
  %__qsVar1__resizedTrotterStepSize__ = fdiv double %maxTime, %18
  %19 = sub i64 %__qsVar0__nTimeSlices__, 1
  %20 = sub i64 %19, 0
  %21 = sdiv i64 %20, 1
  %22 = mul i64 1, %21
  %23 = add i64 0, %22
  %24 = load %Range, %Range* @EmptyRange, align 4
  %25 = insertvalue %Range %24, i64 %23, 0
  %26 = insertvalue %Range %25, i64 -1, 1
  %27 = insertvalue %Range %26, i64 0, 2
  %28 = extractvalue %Range %27, 0
  %29 = extractvalue %Range %27, 1
  %30 = extractvalue %Range %27, 2
  br label %preheader__1

preheader__1:                                     ; preds = %entry
  %31 = icmp sgt i64 %29, 0
  br label %header__1

header__1:                                        ; preds = %exiting__1, %preheader__1
  %__qsVar2__idxTimeSlice__ = phi i64 [ %28, %preheader__1 ], [ %41, %exiting__1 ]
  %32 = icmp sle i64 %__qsVar2__idxTimeSlice__, %30
  %33 = icmp sge i64 %__qsVar2__idxTimeSlice__, %30
  %34 = select i1 %31, i1 %32, i1 %33
  br i1 %34, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %35 = call %Callable* @Microsoft__Quantum__Simulation__TrotterStep__body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %trotterOrder, double %__qsVar1__resizedTrotterStepSize__)
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %36)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %38 = bitcast %Tuple* %37 to { %Array*, %Array* }*
  %39 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %38, i32 0, i32 0
  %40 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %38, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store %Array* %__controlQubits__, %Array** %39, align 8
  store %Array* %qubits, %Array** %40, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %37, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %41 = add i64 %__qsVar2__idxTimeSlice__, %29
  br label %header__1

exit__1:                                          ; preds = %header__1
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____body({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %idx, double %stepsize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %evolutionSet = load { %Callable* }*, { %Callable* }** %0, align 8
  %1 = getelementptr inbounds { %Callable* }, { %Callable* }* %evolutionSet, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 1)
  %3 = bitcast { %Callable* }* %evolutionSet to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %4 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %generatorSystem = load { i64, %Callable* }*, { i64, %Callable* }** %4, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %generatorSystemFunction = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  %6 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 0
  %nTerms = load i64, i64* %8, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { i64 }*
  %11 = getelementptr inbounds { i64 }, { i64 }* %10, i32 0, i32 0
  store i64 %idx, i64* %11, align 4
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %generatorSystemFunction, %Tuple* %9, %Tuple* %12)
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %14, align 8
  %15 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %16 = load { %Array*, %Array* }*, { %Array*, %Array* }** %15, align 8
  %17 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 0
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 1
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 1)
  %21 = bitcast { %Array*, %Array* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 1)
  %22 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %24 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 1)
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Callable* }* }* getelementptr ({ { %Callable* }* }, { { %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %24, %Tuple* %25)
  %26 = bitcast %Tuple* %25 to { { %Callable* }* }*
  %27 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %26, i32 0, i32 0
  %28 = load { %Callable* }*, { %Callable* }** %27, align 8
  %29 = getelementptr inbounds { %Callable* }, { %Callable* }* %28, i32 0, i32 0
  %30 = load %Callable*, %Callable** %29, align 8
  %31 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %32 = bitcast %Tuple* %31 to { double, %Array* }*
  %33 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %32, i32 0, i32 0
  %34 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %32, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store double %stepsize, double* %33, align 8
  store %Array* %qubits, %Array** %34, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %30, %Tuple* %31, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %30, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %30, i32 -1)
  %35 = bitcast { %Callable* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %35, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %31, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____adj({ { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i64 %idx, double %stepsize, %Array* %qubits) {
entry:
  %0 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %__qsVar0__evolutionSet__ = load { %Callable* }*, { %Callable* }** %0, align 8
  %1 = getelementptr inbounds { %Callable* }, { %Callable* }* %__qsVar0__evolutionSet__, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 1)
  %3 = bitcast { %Callable* }* %__qsVar0__evolutionSet__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  %4 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %__qsVar1__generatorSystem__ = load { i64, %Callable* }*, { i64, %Callable* }** %4, align 8
  %5 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i32 0, i32 1
  %__qsVar3__generatorSystemFunction__ = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  %6 = bitcast { i64, %Callable* }* %__qsVar1__generatorSystem__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %7 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 1)
  %8 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i32 0, i32 0
  %__qsVar2__nTerms__ = load i64, i64* %8, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  %9 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %10 = bitcast %Tuple* %9 to { i64 }*
  %11 = getelementptr inbounds { i64 }, { i64 }* %10, i32 0, i32 0
  store i64 %idx, i64* %11, align 4
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__generatorSystemFunction__, %Tuple* %9, %Tuple* %12)
  %13 = bitcast %Tuple* %12 to { { { %Array*, %Array* }*, %Array* }* }*
  %14 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %13, i32 0, i32 0
  %__qsVar4__generatorIndex__ = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %14, align 8
  %15 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i32 0, i32 0
  %16 = load { %Array*, %Array* }*, { %Array*, %Array* }** %15, align 8
  %17 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 0
  %18 = load %Array*, %Array** %17, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 1)
  %19 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %16, i32 0, i32 1
  %20 = load %Array*, %Array** %19, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 1)
  %21 = bitcast { %Array*, %Array* }* %16 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 1)
  %22 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i32 0, i32 1
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %24 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 1)
  %25 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Callable* }* }* getelementptr ({ { %Callable* }* }, { { %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %2, %Tuple* %24, %Tuple* %25)
  %26 = bitcast %Tuple* %25 to { { %Callable* }* }*
  %27 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %26, i32 0, i32 0
  %28 = load { %Callable* }*, { %Callable* }** %27, align 8
  %29 = getelementptr inbounds { %Callable* }, { %Callable* }* %28, i32 0, i32 0
  %30 = load %Callable*, %Callable** %29, align 8
  %31 = call %Callable* @__quantum__rt__callable_copy(%Callable* %30, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %31)
  %32 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %33 = bitcast %Tuple* %32 to { double, %Array* }*
  %34 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %33, i32 0, i32 0
  %35 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %33, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store double %stepsize, double* %34, align 8
  store %Array* %qubits, %Array** %35, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %31, %Tuple* %32, %Tuple* null)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %7, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %18, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %18, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %21, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %24, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %30, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %30, i32 -1)
  %36 = bitcast { %Callable* }* %28 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %36, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %25, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %31, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %32, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____ctl(%Array* %__controlQubits__, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 0
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1, align 8
  %2 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %evolutionSet = load { %Callable* }*, { %Callable* }** %2, align 8
  %3 = getelementptr inbounds { %Callable* }, { %Callable* }* %evolutionSet, i32 0, i32 0
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 1)
  %5 = bitcast { %Callable* }* %evolutionSet to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %generatorSystem = load { i64, %Callable* }*, { i64, %Callable* }** %6, align 8
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %generatorSystemFunction = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  %8 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 1
  %idx = load i64, i64* %10, align 4
  %11 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 2
  %stepsize = load double, double* %11, align 8
  %12 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 3
  %qubits = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 0
  %nTerms = load i64, i64* %13, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64 }*
  %16 = getelementptr inbounds { i64 }, { i64 }* %15, i32 0, i32 0
  store i64 %idx, i64* %16, align 4
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %generatorSystemFunction, %Tuple* %14, %Tuple* %17)
  %18 = bitcast %Tuple* %17 to { { { %Array*, %Array* }*, %Array* }* }*
  %19 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %18, i32 0, i32 0
  %generatorIndex = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %19, align 8
  %20 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 0
  %21 = load { %Array*, %Array* }*, { %Array*, %Array* }** %20, align 8
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 0
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 1
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  %26 = bitcast { %Array*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 1)
  %27 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %generatorIndex, i32 0, i32 1
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  %29 = bitcast { { %Array*, %Array* }*, %Array* }* %generatorIndex to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Callable* }* }* getelementptr ({ { %Callable* }* }, { { %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %29, %Tuple* %30)
  %31 = bitcast %Tuple* %30 to { { %Callable* }* }*
  %32 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %31, i32 0, i32 0
  %33 = load { %Callable* }*, { %Callable* }** %32, align 8
  %34 = getelementptr inbounds { %Callable* }, { %Callable* }* %33, i32 0, i32 0
  %35 = load %Callable*, %Callable** %34, align 8
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %38 = bitcast %Tuple* %37 to { %Array*, { double, %Array* }* }*
  %39 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %38, i32 0, i32 0
  %40 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %38, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { double, %Array* }*
  %43 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %42, i32 0, i32 0
  %44 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %42, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store double %stepsize, double* %43, align 8
  store %Array* %qubits, %Array** %44, align 8
  store %Array* %__controlQubits__, %Array** %39, align 8
  store { double, %Array* }* %42, { double, %Array* }** %40, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %37, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorSystemFunction, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i32 -1)
  %45 = bitcast { %Callable* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____ctladj(%Array* %__controlQubits__, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 0
  %evolutionGenerator = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1, align 8
  %2 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 0
  %__qsVar0__evolutionSet__ = load { %Callable* }*, { %Callable* }** %2, align 8
  %3 = getelementptr inbounds { %Callable* }, { %Callable* }* %__qsVar0__evolutionSet__, i32 0, i32 0
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 1)
  %5 = bitcast { %Callable* }* %__qsVar0__evolutionSet__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %6 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator, i32 0, i32 1
  %__qsVar1__generatorSystem__ = load { i64, %Callable* }*, { i64, %Callable* }** %6, align 8
  %7 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i32 0, i32 1
  %__qsVar3__generatorSystemFunction__ = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  %8 = bitcast { i64, %Callable* }* %__qsVar1__generatorSystem__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %9 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %evolutionGenerator to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 1)
  %10 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 1
  %idx = load i64, i64* %10, align 4
  %11 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 2
  %stepsize = load double, double* %11, align 8
  %12 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 3
  %qubits = load %Array*, %Array** %12, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 1)
  %13 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %__qsVar1__generatorSystem__, i32 0, i32 0
  %__qsVar2__nTerms__ = load i64, i64* %13, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 1)
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64 }* getelementptr ({ i64 }, { i64 }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { i64 }*
  %16 = getelementptr inbounds { i64 }, { i64 }* %15, i32 0, i32 0
  store i64 %idx, i64* %16, align 4
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Array*, %Array* }*, %Array* }* }* getelementptr ({ { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %__qsVar3__generatorSystemFunction__, %Tuple* %14, %Tuple* %17)
  %18 = bitcast %Tuple* %17 to { { { %Array*, %Array* }*, %Array* }* }*
  %19 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %18, i32 0, i32 0
  %__qsVar4__generatorIndex__ = load { { %Array*, %Array* }*, %Array* }*, { { %Array*, %Array* }*, %Array* }** %19, align 8
  %20 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i32 0, i32 0
  %21 = load { %Array*, %Array* }*, { %Array*, %Array* }** %20, align 8
  %22 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 0
  %23 = load %Array*, %Array** %22, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 1)
  %24 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %21, i32 0, i32 1
  %25 = load %Array*, %Array** %24, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 1)
  %26 = bitcast { %Array*, %Array* }* %21 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 1)
  %27 = getelementptr inbounds { { %Array*, %Array* }*, %Array* }, { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__, i32 0, i32 1
  %28 = load %Array*, %Array** %27, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 1)
  %29 = bitcast { { %Array*, %Array* }*, %Array* }* %__qsVar4__generatorIndex__ to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 1)
  %30 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Callable* }* }* getelementptr ({ { %Callable* }* }, { { %Callable* }* }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %4, %Tuple* %29, %Tuple* %30)
  %31 = bitcast %Tuple* %30 to { { %Callable* }* }*
  %32 = getelementptr inbounds { { %Callable* }* }, { { %Callable* }* }* %31, i32 0, i32 0
  %33 = load { %Callable* }*, { %Callable* }** %32, align 8
  %34 = getelementptr inbounds { %Callable* }, { %Callable* }* %33, i32 0, i32 0
  %35 = load %Callable*, %Callable** %34, align 8
  %36 = call %Callable* @__quantum__rt__callable_copy(%Callable* %35, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %36)
  call void @__quantum__rt__callable_make_controlled(%Callable* %36)
  %37 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %38 = bitcast %Tuple* %37 to { %Array*, { double, %Array* }* }*
  %39 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %38, i32 0, i32 0
  %40 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %38, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %41 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %42 = bitcast %Tuple* %41 to { double, %Array* }*
  %43 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %42, i32 0, i32 0
  %44 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %42, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store double %stepsize, double* %43, align 8
  store %Array* %qubits, %Array** %44, align 8
  store %Array* %__controlQubits__, %Array** %39, align 8
  store { double, %Array* }* %42, { double, %Array* }** %40, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %36, %Tuple* %37, %Tuple* null)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__qsVar3__generatorSystemFunction__, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %25, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %26, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %28, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %23, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %25, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %26, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %28, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %29, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %35, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %35, i32 -1)
  %45 = bitcast { %Callable* }* %33 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %45, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %30, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %36, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %41, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %37, i32 -1)
  ret void
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Simulation__AddGeneratorSystems__body({ i64, %Callable* }* %generatorSystemA, { i64, %Callable* }* %generatorSystemB) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystemA, i32 0, i32 1
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { i64, %Callable* }* %generatorSystemA to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  %3 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystemB, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 1)
  %5 = bitcast { i64, %Callable* }* %generatorSystemB to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 1)
  %nTermsA = call i64 @Microsoft__Quantum__Simulation__GetGeneratorSystemNTerms__body({ i64, %Callable* }* %generatorSystemA)
  %nTermsB = call i64 @Microsoft__Quantum__Simulation__GetGeneratorSystemNTerms__body({ i64, %Callable* }* %generatorSystemB)
  %generatorIndexFunctionA = call %Callable* @Microsoft__Quantum__Simulation__GetGeneratorSystemFunction__body({ i64, %Callable* }* %generatorSystemA)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionA, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionA, i32 1)
  %generatorIndexFunctionB = call %Callable* @Microsoft__Quantum__Simulation__GetGeneratorSystemFunction__body({ i64, %Callable* }* %generatorSystemB)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionB, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionB, i32 1)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, i64, %Callable*, %Callable* }* getelementptr ({ %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Callable*, i64, i64, %Callable*, %Callable* }*
  %8 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %7, i32 0, i32 1
  %10 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %7, i32 0, i32 2
  %11 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %7, i32 0, i32 3
  %12 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %7, i32 0, i32 4
  %13 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation____QsRef1___AddGeneratorSystems____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorIndexFunctionA, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorIndexFunctionA, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorIndexFunctionB, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorIndexFunctionB, i32 1)
  store %Callable* %13, %Callable** %8, align 8
  store i64 %nTermsA, i64* %9, align 4
  store i64 %nTermsB, i64* %10, align 4
  store %Callable* %generatorIndexFunctionA, %Callable** %11, align 8
  store %Callable* %generatorIndexFunctionB, %Callable** %12, align 8
  %generatorIndexFunction = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__52__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__32__FunctionTable, %Tuple* %6)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  %14 = add i64 %nTermsA, %nTermsB
  %15 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 %14, %Callable* %generatorIndexFunction)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %5, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorIndexFunctionA, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorIndexFunctionB, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorIndexFunction, i32 -1)
  ret { i64, %Callable* }* %15
}

define internal i64 @Microsoft__Quantum__Simulation__GetGeneratorSystemNTerms__body({ i64, %Callable* }* %generatorSystem) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %generatorIndexFunction = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  %1 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 0
  %nTerms = load i64, i64* %2, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  ret i64 %nTerms
}

define internal %Callable* @Microsoft__Quantum__Simulation__GetGeneratorSystemFunction__body({ i64, %Callable* }* %generatorSystem) {
entry:
  %0 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 1
  %generatorIndexFunction = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  %1 = bitcast { i64, %Callable* }* %generatorSystem to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 1)
  %2 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %generatorSystem, i32 0, i32 0
  %nTerms = load i64, i64* %2, align 4
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %generatorIndexFunction, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %1, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %generatorIndexFunction, i32 -1)
  ret %Callable* %generatorIndexFunction
}

define internal void @Lifted__PartialApplication__52__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr inbounds { i64 }, { i64 }* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable*, %Callable* }*
  %4 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %3, i32 0, i32 1
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %3, i32 0, i32 2
  %7 = load i64, i64* %6, align 4
  %8 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %3, i32 0, i32 3
  %9 = load %Callable*, %Callable** %8, align 8
  %10 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %3, i32 0, i32 4
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, i64, i64, %Callable*, %Callable* }* getelementptr ({ i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { i64, i64, i64, %Callable*, %Callable* }*
  %14 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %13, i32 0, i32 4
  store i64 %2, i64* %14, align 4
  store i64 %5, i64* %15, align 4
  store i64 %7, i64* %16, align 4
  store %Callable* %9, %Callable** %17, align 8
  store %Callable* %11, %Callable** %18, align 8
  %19 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %3, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1___AddGeneratorSystems____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64, i64, i64, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { i64, i64, i64, %Callable*, %Callable* }, { i64, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 4
  %6 = load i64, i64* %1, align 4
  %7 = load i64, i64* %2, align 4
  %8 = load i64, i64* %3, align 4
  %9 = load %Callable*, %Callable** %4, align 8
  %10 = load %Callable*, %Callable** %5, align 8
  %11 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation____QsRef1___AddGeneratorSystems____body(i64 %6, i64 %7, i64 %8, %Callable* %9, %Callable* %10)
  %12 = bitcast %Tuple* %result-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %13 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %12, i32 0, i32 0
  store { { %Array*, %Array* }*, %Array* }* %11, { { %Array*, %Array* }*, %Array* }** %13, align 8
  ret void
}

define internal void @MemoryManagement__32__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 3
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 4
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__32__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, i64, i64, %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 3
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  %5 = getelementptr inbounds { %Callable*, i64, i64, %Callable*, %Callable* }, { %Callable*, i64, i64, %Callable*, %Callable* }* %0, i32 0, i32 4
  %6 = load %Callable*, %Callable** %5, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %6, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal double @Microsoft__Quantum__Simulation__AdiabaticStateEnergyUnitary__body(%Callable* %statePrepUnitary, %Callable* %adiabaticUnitary, %Callable* %qpeUnitary, %Callable* %phaseEstAlgorithm, %Array* %qubits) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %adiabaticUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %adiabaticUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %qpeUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %qpeUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Array* }*
  %2 = getelementptr inbounds { %Array* }, { %Array* }* %1, i32 0, i32 0
  store %Array* %qubits, %Array** %2, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %statePrepUnitary, %Tuple* %0, %Tuple* null)
  %3 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array* }* getelementptr ({ %Array* }, { %Array* }* null, i32 1) to i64))
  %4 = bitcast %Tuple* %3 to { %Array* }*
  %5 = getelementptr inbounds { %Array* }, { %Array* }* %4, i32 0, i32 0
  store %Array* %qubits, %Array** %5, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %adiabaticUnitary, %Tuple* %3, %Tuple* null)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { %Callable* }*, %Array* }* getelementptr ({ { %Callable* }*, %Array* }, { { %Callable* }*, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { { %Callable* }*, %Array* }*
  %8 = getelementptr inbounds { { %Callable* }*, %Array* }, { { %Callable* }*, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { { %Callable* }*, %Array* }, { { %Callable* }*, %Array* }* %7, i32 0, i32 1
  %10 = call { %Callable* }* @Microsoft__Quantum__Oracles__OracleToDiscrete__body(%Callable* %qpeUnitary)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 1)
  store { %Callable* }* %10, { %Callable* }** %8, align 8
  store %Array* %qubits, %Array** %9, align 8
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double }* getelementptr ({ double }, { double }* null, i32 1) to i64))
  call void @__quantum__rt__callable_invoke(%Callable* %phaseEstAlgorithm, %Tuple* %6, %Tuple* %11)
  %12 = bitcast %Tuple* %11 to { double }*
  %13 = getelementptr inbounds { double }, { double }* %12, i32 0, i32 0
  %phaseEst = load double, double* %13, align 8
  %14 = getelementptr inbounds { %Callable* }, { %Callable* }* %10, i32 0, i32 0
  %15 = load %Callable*, %Callable** %14, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %adiabaticUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %adiabaticUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %qpeUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %qpeUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %3, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  %16 = bitcast { %Callable* }* %10 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  ret double %phaseEst
}

define internal { %Callable* }* @Microsoft__Quantum__Oracles__OracleToDiscrete__body(%Callable* %blackBoxOracle) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %blackBoxOracle, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %blackBoxOracle, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, %Callable* }* getelementptr ({ %Callable*, %Callable* }, { %Callable*, %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable*, %Callable* }*
  %2 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %1, i32 0, i32 1
  %4 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %blackBoxOracle, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %blackBoxOracle, i32 1)
  store %Callable* %4, %Callable** %2, align 8
  store %Callable* %blackBoxOracle, %Callable** %3, align 8
  %5 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @PartialApplication__56__FunctionTable, [2 x void (%Tuple*, i32)*]* @MemoryManagement__36__FunctionTable, %Tuple* %0)
  %6 = call { %Callable* }* @Microsoft__Quantum__Oracles__DiscreteOracle__body(%Callable* %5)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %blackBoxOracle, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %blackBoxOracle, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %5, i32 -1)
  ret { %Callable* }* %6
}

define internal double @Microsoft__Quantum__Simulation__EstimateEnergyWithAdiabaticEvolution__body(i64 %nQubits, %Callable* %statePrepUnitary, %Callable* %adiabaticUnitary, %Callable* %qpeUnitary, %Callable* %phaseEstAlgorithm) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %adiabaticUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %adiabaticUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %qpeUnitary, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %qpeUnitary, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 1)
  %qubits = call %Array* @__quantum__rt__qubit_allocate_array(i64 %nQubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 1)
  %phaseEst = call double @Microsoft__Quantum__Simulation__AdiabaticStateEnergyUnitary__body(%Callable* %statePrepUnitary, %Callable* %adiabaticUnitary, %Callable* %qpeUnitary, %Callable* %phaseEstAlgorithm, %Array* %qubits)
  call void @Microsoft__Quantum__Intrinsic__ResetAll__body(%Array* %qubits)
  call void @__quantum__rt__array_update_alias_count(%Array* %qubits, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %statePrepUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %adiabaticUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %adiabaticUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %qpeUnitary, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %qpeUnitary, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %phaseEstAlgorithm, i32 -1)
  call void @__quantum__rt__qubit_release_array(%Array* %qubits)
  ret double %phaseEst
}

define internal { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__IdentityGeneratorIndex__body(i64 %idxTerm) {
entry:
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, %Array* }* getelementptr ({ %Array*, %Array* }, { %Array*, %Array* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Array*, %Array* }*
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 0
  %3 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %1, i32 0, i32 1
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %5 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 0)
  %6 = bitcast i8* %5 to i64*
  store i64 0, i64* %6, align 4
  %7 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %8 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %7, i64 0)
  %9 = bitcast i8* %8 to double*
  store double 0.000000e+00, double* %9, align 8
  store %Array* %4, %Array** %2, align 8
  store %Array* %7, %Array** %3, align 8
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 0)
  %12 = bitcast i8* %11 to i64*
  store i64 0, i64* %12, align 4
  %13 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__GeneratorIndex__body({ %Array*, %Array* }* %1, %Array* %10)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %7, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %0, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  ret { { %Array*, %Array* }*, %Array* }* %13
}

define internal { i64, %Callable* }* @Microsoft__Quantum__Simulation__IdentityGeneratorSystem__body() {
entry:
  %0 = call %Callable* @__quantum__rt__callable_create([4 x void (%Tuple*, %Tuple*, %Tuple*)*]* @Microsoft__Quantum__Simulation__IdentityGeneratorIndex__FunctionTable, [2 x void (%Tuple*, i32)*]* null, %Tuple* null)
  %1 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__GeneratorSystem__body(i64 0, %Callable* %0)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %0, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %0, i32 -1)
  ret { i64, %Callable* }* %1
}

define internal void @Microsoft__Quantum__Simulation__IdentityGeneratorIndex__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { i64 }*
  %1 = getelementptr inbounds { i64 }, { i64 }* %0, i32 0, i32 0
  %2 = load i64, i64* %1, align 4
  %3 = call { { %Array*, %Array* }*, %Array* }* @Microsoft__Quantum__Simulation__IdentityGeneratorIndex__body(i64 %2)
  %4 = bitcast %Tuple* %result-tuple to { { { %Array*, %Array* }*, %Array* }* }*
  %5 = getelementptr inbounds { { { %Array*, %Array* }*, %Array* }* }, { { { %Array*, %Array* }*, %Array* }* }* %4, i32 0, i32 0
  store { { %Array*, %Array* }*, %Array* }* %3, { { %Array*, %Array* }*, %Array* }** %5, align 8
  ret void
}

define internal { %Callable* }* @Microsoft__Quantum__Simulation__SimulationAlgorithm__body(%Callable* %__Item1__) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  store %Callable* %__Item1__, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 -1)
  ret { %Callable* }* %1
}

define internal void @Microsoft__Quantum__Simulation__AddGeneratorSystems__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { i64, %Callable* }*, { i64, %Callable* }* }*
  %1 = getelementptr inbounds { { i64, %Callable* }*, { i64, %Callable* }* }, { { i64, %Callable* }*, { i64, %Callable* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { i64, %Callable* }*, { i64, %Callable* }* }, { { i64, %Callable* }*, { i64, %Callable* }* }* %0, i32 0, i32 1
  %3 = load { i64, %Callable* }*, { i64, %Callable* }** %1, align 8
  %4 = load { i64, %Callable* }*, { i64, %Callable* }** %2, align 8
  %5 = call { i64, %Callable* }* @Microsoft__Quantum__Simulation__AddGeneratorSystems__body({ i64, %Callable* }* %3, { i64, %Callable* }* %4)
  %6 = bitcast %Tuple* %result-tuple to { { i64, %Callable* }* }*
  %7 = getelementptr inbounds { { i64, %Callable* }* }, { { i64, %Callable* }* }* %6, i32 0, i32 0
  store { i64, %Callable* }* %5, { i64, %Callable* }** %7, align 8
  ret void
}

define internal void @Lifted__PartialApplication__53__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = bitcast %Tuple* %arg-tuple to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %6 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i32 0, i32 1
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8, align 8
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i32 0, i32 2
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %14 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store i64 %4, i64* %15, align 4
  store double %7, double* %16, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %17, align 8
  store %Array* %11, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %20, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__53__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 2
  %4 = load i64, i64* %3, align 4
  %5 = bitcast %Tuple* %arg-tuple to { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %6 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i32 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i32 0, i32 1
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %8, align 8
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %5, i32 0, i32 2
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %14 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 2
  %17 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 3
  %18 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %13, i32 0, i32 4
  store double %2, double* %14, align 8
  store i64 %4, i64* %15, align 4
  store double %7, double* %16, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %9, { { %Callable* }*, { i64, %Callable* }* }** %17, align 8
  store %Array* %11, %Array** %18, align 8
  %19 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %20 = load %Callable*, %Callable** %19, align 8
  %21 = call %Callable* @__quantum__rt__callable_copy(%Callable* %20, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %21)
  call void @__quantum__rt__callable_invoke(%Callable* %21, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %21, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %21, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__53__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i32 0, i32 1
  %13 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %12, align 8
  %14 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i32 0, i32 2
  %15 = load %Array*, %Array** %14, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %18 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 2
  %21 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 3
  %22 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 4
  store double %7, double* %18, align 8
  store i64 %9, i64* %19, align 4
  store double %11, double* %20, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %13, { { %Callable* }*, { i64, %Callable* }* }** %21, align 8
  store %Array* %15, %Array** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* getelementptr ({ %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %25 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %24, i32 0, i32 1
  store %Array* %3, %Array** %25, align 8
  store { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %26, align 8
  %27 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 0
  %28 = load %Callable*, %Callable** %27, align 8
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__53__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %6 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 2
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i32 0, i32 1
  %13 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %12, align 8
  %14 = getelementptr inbounds { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4, i32 0, i32 2
  %15 = load %Array*, %Array** %14, align 8
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* getelementptr ({ double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %18 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 1
  %20 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 2
  %21 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 3
  %22 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, i32 0, i32 4
  store double %7, double* %18, align 8
  store i64 %9, i64* %19, align 4
  store double %11, double* %20, align 8
  store { { %Callable* }*, { i64, %Callable* }* }* %13, { { %Callable* }*, { i64, %Callable* }* }** %21, align 8
  store %Array* %15, %Array** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* getelementptr ({ %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %25 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %24, i32 0, i32 1
  store %Array* %3, %Array** %25, align 8
  store { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %17, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %26, align 8
  %27 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %5, i32 0, i32 0
  %28 = load %Callable*, %Callable** %27, align 8
  %29 = call %Callable* @__quantum__rt__callable_copy(%Callable* %28, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %29)
  call void @__quantum__rt__callable_make_controlled(%Callable* %29)
  call void @__quantum__rt__callable_invoke(%Callable* %29, %Tuple* %23, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %29, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %29, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %1 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load i64, i64* %2, align 4
  %8 = load double, double* %3, align 8
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4, align 8
  %10 = load %Array*, %Array** %5, align 8
  call void @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____body(double %6, i64 %7, double %8, { { %Callable* }*, { i64, %Callable* }* }* %9, %Array* %10)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*
  %1 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 3
  %5 = getelementptr inbounds { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %0, i32 0, i32 4
  %6 = load double, double* %1, align 8
  %7 = load i64, i64* %2, align 4
  %8 = load double, double* %3, align 8
  %9 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %4, align 8
  %10 = load %Array*, %Array** %5, align 8
  call void @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____adj(double %6, i64 %7, double %8, { { %Callable* }*, { i64, %Callable* }* }* %9, %Array* %10)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____ctl(%Array* %3, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }, { %Array*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }*, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef1__TrotterSimulationAlgorithmImpl____ctladj(%Array* %3, { double, i64, double, { { %Callable* }*, { i64, %Callable* }* }*, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__33__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__33__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double, i64 }*
  %1 = getelementptr inbounds { %Callable*, double, i64 }, { %Callable*, double, i64 }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__54__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { i64, double, %Array* }*
  %4 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %3, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %3, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %12 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %2, { { %Callable* }*, { i64, %Callable* }* }** %12, align 8
  store i64 %5, i64* %13, align 4
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %17, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__54__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %2 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { i64, double, %Array* }*
  %4 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %3, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %3, i32 0, i32 2
  %9 = load %Array*, %Array** %8, align 8
  %10 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %11 = bitcast %Tuple* %10 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %12 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 0
  %13 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 1
  %14 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 2
  %15 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %11, i32 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %2, { { %Callable* }*, { i64, %Callable* }* }** %12, align 8
  store i64 %5, i64* %13, align 4
  store double %7, double* %14, align 8
  store %Array* %9, %Array** %15, align 8
  %16 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %10, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %10, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__54__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, double, %Array* }*, { i64, double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %6, align 8
  %8 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %4, i32 0, i32 0
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %4, i32 0, i32 1
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %4, i32 0, i32 2
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %16 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %7, { { %Callable* }*, { i64, %Callable* }* }** %16, align 8
  store i64 %9, i64* %17, align 4
  store double %11, double* %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* getelementptr ({ %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__54__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, double, %Array* }* }, { %Array*, { i64, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, double, %Array* }*, { i64, double, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %6 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 1
  %7 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %6, align 8
  %8 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %4, i32 0, i32 0
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %4, i32 0, i32 1
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds { i64, double, %Array* }, { i64, double, %Array* }* %4, i32 0, i32 2
  %13 = load %Array*, %Array** %12, align 8
  %14 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* getelementptr ({ { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* null, i32 1) to i64))
  %15 = bitcast %Tuple* %14 to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %16 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 0
  %17 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 1
  %18 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 2
  %19 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, i32 0, i32 3
  store { { %Callable* }*, { i64, %Callable* }* }* %7, { { %Callable* }*, { i64, %Callable* }* }** %16, align 8
  store i64 %9, i64* %17, align 4
  store double %11, double* %18, align 8
  store %Array* %13, %Array** %19, align 8
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* getelementptr ({ %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %21, i32 0, i32 1
  store %Array* %3, %Array** %22, align 8
  store { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %15, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %23, align 8
  %24 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %5, i32 0, i32 0
  %25 = load %Callable*, %Callable** %24, align 8
  %26 = call %Callable* @__quantum__rt__callable_copy(%Callable* %25, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %26)
  call void @__quantum__rt__callable_make_controlled(%Callable* %26)
  call void @__quantum__rt__callable_invoke(%Callable* %26, %Tuple* %20, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %26, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %26, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %1 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 3
  %5 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1, align 8
  %6 = load i64, i64* %2, align 4
  %7 = load double, double* %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____body({ { %Callable* }*, { i64, %Callable* }* }* %5, i64 %6, double %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*
  %1 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 2
  %4 = getelementptr inbounds { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %0, i32 0, i32 3
  %5 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %1, align 8
  %6 = load i64, i64* %2, align 4
  %7 = load double, double* %3, align 8
  %8 = load %Array*, %Array** %4, align 8
  call void @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____adj({ { %Callable* }*, { i64, %Callable* }* }* %5, i64 %6, double %7, %Array* %8)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____ctl(%Array* %3, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }, { %Array*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }*, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Simulation____QsRef1__TrotterStepImpl____ctladj(%Array* %3, { { { %Callable* }*, { i64, %Callable* }* }*, i64, double, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__34__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %8, i32 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %9, i32 %count-change)
  %10 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %13, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %13, i32 %count-change)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %14, i32 %count-change)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %15, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__34__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }*
  %1 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }, { %Callable*, { { %Callable* }*, { i64, %Callable* }* }* }* %0, i32 0, i32 1
  %4 = load { { %Callable* }*, { i64, %Callable* }* }*, { { %Callable* }*, { i64, %Callable* }* }** %3, align 8
  %5 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 0
  %6 = load { %Callable* }*, { %Callable* }** %5, align 8
  %7 = getelementptr inbounds { %Callable* }, { %Callable* }* %6, i32 0, i32 0
  %8 = load %Callable*, %Callable** %7, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %8, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %8, i32 %count-change)
  %9 = bitcast { %Callable* }* %6 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %9, i32 %count-change)
  %10 = getelementptr inbounds { { %Callable* }*, { i64, %Callable* }* }, { { %Callable* }*, { i64, %Callable* }* }* %4, i32 0, i32 1
  %11 = load { i64, %Callable* }*, { i64, %Callable* }** %10, align 8
  %12 = getelementptr inbounds { i64, %Callable* }, { i64, %Callable* }* %11, i32 0, i32 1
  %13 = load %Callable*, %Callable** %12, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %13, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %13, i32 %count-change)
  %14 = bitcast { i64, %Callable* }* %11 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %14, i32 %count-change)
  %15 = bitcast { { %Callable* }*, { i64, %Callable* }* }* %4 to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %15, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Lifted__PartialApplication__55__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__55__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 1
  %2 = load double, double* %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { %Array* }*
  %4 = getelementptr inbounds { %Array* }, { %Array* }* %3, i32 0, i32 0
  %5 = load %Array*, %Array** %4, align 8
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { double, %Array* }*
  %8 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %7, i32 0, i32 1
  store double %2, double* %8, align 8
  store %Array* %5, %Array** %9, align 8
  %10 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %11 = load %Callable*, %Callable** %10, align 8
  %12 = call %Callable* @__quantum__rt__callable_copy(%Callable* %11, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %12)
  call void @__quantum__rt__callable_invoke(%Callable* %12, %Tuple* %6, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %12, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %12, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__55__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Array* }* %9, { double, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__55__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, %Array* }*
  %1 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, %Array* }, { %Array*, %Array* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load %Array*, %Array** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %6 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Array* }* getelementptr ({ double, %Array* }, { double, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { double, %Array* }*
  %10 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { double, %Array* }, { double, %Array* }* %9, i32 0, i32 1
  store double %7, double* %10, align 8
  store %Array* %4, %Array** %11, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { double, %Array* }* }* getelementptr ({ %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { double, %Array* }* }*
  %14 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { double, %Array* }* }, { %Array*, { double, %Array* }* }* %13, i32 0, i32 1
  store %Array* %3, %Array** %14, align 8
  store { double, %Array* }* %9, { double, %Array* }** %15, align 8
  %16 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %5, i32 0, i32 0
  %17 = load %Callable*, %Callable** %16, align 8
  %18 = call %Callable* @__quantum__rt__callable_copy(%Callable* %17, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %18)
  call void @__quantum__rt__callable_make_controlled(%Callable* %18)
  call void @__quantum__rt__callable_invoke(%Callable* %18, %Tuple* %12, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %18, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %18, i32 -1)
  ret void
}

define internal void @MemoryManagement__35__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__35__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, double }*
  %1 = getelementptr inbounds { %Callable*, double }, { %Callable*, double }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @Microsoft__Quantum__Characterization__DiscretePhaseEstimationIteration__body({ %Callable* }* %oracle, i64 %power, double %theta, %Array* %targetState, %Qubit* %controlQubit) {
entry:
  %0 = getelementptr inbounds { %Callable* }, { %Callable* }* %oracle, i32 0, i32 0
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { %Callable* }* %oracle to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 1)
  %3 = fneg double %theta
  %4 = sitofp i64 %power to double
  %inversionAngle = fmul double %3, %4
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %controlQubit)
  call void @Microsoft__Quantum__Intrinsic__Rz__body(double %inversionAngle, %Qubit* %controlQubit)
  %5 = call %Callable* @__quantum__rt__callable_copy(%Callable* %1, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %5)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Array* }* }* getelementptr ({ %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, { i64, %Array* }* }*
  %8 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %7, i32 0, i32 1
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 0)
  %12 = bitcast i8* %11 to %Qubit**
  store %Qubit* %controlQubit, %Qubit** %12, align 8
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { i64, %Array* }*
  %15 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %14, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 1)
  store i64 %power, i64* %15, align 4
  store %Array* %targetState, %Array** %16, align 8
  store %Array* %10, %Array** %8, align 8
  store { i64, %Array* }* %14, { i64, %Array* }** %9, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %5, %Tuple* %6, %Tuple* null)
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %controlQubit)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Characterization__DiscretePhaseEstimationIteration__adj({ %Callable* }* %oracle, i64 %power, double %theta, %Array* %targetState, %Qubit* %controlQubit) {
entry:
  %0 = getelementptr inbounds { %Callable* }, { %Callable* }* %oracle, i32 0, i32 0
  %1 = load %Callable*, %Callable** %0, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 1)
  %2 = bitcast { %Callable* }* %oracle to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 1)
  %3 = fneg double %theta
  %4 = sitofp i64 %power to double
  %__qsVar0__inversionAngle__ = fmul double %3, %4
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %controlQubit)
  %5 = call %Callable* @__quantum__rt__callable_copy(%Callable* %1, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %5)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %5)
  %6 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Array* }* }* getelementptr ({ %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* null, i32 1) to i64))
  %7 = bitcast %Tuple* %6 to { %Array*, { i64, %Array* }* }*
  %8 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %7, i32 0, i32 0
  %9 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %7, i32 0, i32 1
  %10 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %11 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %10, i64 0)
  %12 = bitcast i8* %11 to %Qubit**
  store %Qubit* %controlQubit, %Qubit** %12, align 8
  %13 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %14 = bitcast %Tuple* %13 to { i64, %Array* }*
  %15 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %14, i32 0, i32 0
  %16 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %14, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 1)
  store i64 %power, i64* %15, align 4
  store %Array* %targetState, %Array** %16, align 8
  store %Array* %10, %Array** %8, align 8
  store { i64, %Array* }* %14, { i64, %Array* }** %9, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %5, %Tuple* %6, %Tuple* null)
  call void @Microsoft__Quantum__Intrinsic__Rz__adj(double %__qsVar0__inversionAngle__, %Qubit* %controlQubit)
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %controlQubit)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %1, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %2, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %5, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %10, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %13, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %6, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Characterization__DiscretePhaseEstimationIteration__ctl(%Array* %__controlQubits__, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 0
  %oracle = load { %Callable* }*, { %Callable* }** %1, align 8
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %oracle, i32 0, i32 0
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { %Callable* }* %oracle to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 1
  %power = load i64, i64* %5, align 4
  %6 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 2
  %theta = load double, double* %6, align 8
  %7 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 3
  %targetState = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 1)
  %8 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 4
  %controlQubit = load %Qubit*, %Qubit** %8, align 8
  %9 = fneg double %theta
  %10 = sitofp i64 %power to double
  %inversionAngle = fmul double %9, %10
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %controlQubit)
  %11 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %12 = bitcast %Tuple* %11 to { double, %Qubit* }*
  %13 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %12, i32 0, i32 0
  %14 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %12, i32 0, i32 1
  store double %inversionAngle, double* %13, align 8
  store %Qubit* %controlQubit, %Qubit** %14, align 8
  call void @Microsoft__Quantum__Intrinsic__Rz__ctl(%Array* %__controlQubits__, { double, %Qubit* }* %12)
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %3, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  call void @__quantum__rt__callable_make_controlled(%Callable* %15)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, { i64, %Array* }* }* }* getelementptr ({ %Array*, { %Array*, { i64, %Array* }* }* }, { %Array*, { %Array*, { i64, %Array* }* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { %Array*, { i64, %Array* }* }* }*
  %18 = getelementptr inbounds { %Array*, { %Array*, { i64, %Array* }* }* }, { %Array*, { %Array*, { i64, %Array* }* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { %Array*, { i64, %Array* }* }* }, { %Array*, { %Array*, { i64, %Array* }* }* }* %17, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %20 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Array* }* }* getelementptr ({ %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* null, i32 1) to i64))
  %21 = bitcast %Tuple* %20 to { %Array*, { i64, %Array* }* }*
  %22 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %21, i32 0, i32 0
  %23 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %21, i32 0, i32 1
  %24 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %25 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %24, i64 0)
  %26 = bitcast i8* %25 to %Qubit**
  store %Qubit* %controlQubit, %Qubit** %26, align 8
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { i64, %Array* }*
  %29 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %28, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 1)
  store i64 %power, i64* %29, align 4
  store %Array* %targetState, %Array** %30, align 8
  store %Array* %24, %Array** %22, align 8
  store { i64, %Array* }* %28, { i64, %Array* }** %23, align 8
  store %Array* %__controlQubits__, %Array** %18, align 8
  store { %Array*, { i64, %Array* }* }* %21, { %Array*, { i64, %Array* }* }** %19, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %16, %Tuple* null)
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %controlQubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %11, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %24, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %20, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Characterization__DiscretePhaseEstimationIteration__ctladj(%Array* %__controlQubits__, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0) {
entry:
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 1)
  %1 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 0
  %oracle = load { %Callable* }*, { %Callable* }** %1, align 8
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %oracle, i32 0, i32 0
  %3 = load %Callable*, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 1)
  %4 = bitcast { %Callable* }* %oracle to %Tuple*
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 1)
  %5 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 1
  %power = load i64, i64* %5, align 4
  %6 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 2
  %theta = load double, double* %6, align 8
  %7 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 3
  %targetState = load %Array*, %Array** %7, align 8
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 1)
  %8 = getelementptr inbounds { { %Callable* }*, i64, double, %Array*, %Qubit* }, { { %Callable* }*, i64, double, %Array*, %Qubit* }* %0, i32 0, i32 4
  %controlQubit = load %Qubit*, %Qubit** %8, align 8
  %9 = fneg double %theta
  %10 = sitofp i64 %power to double
  %__qsVar0__inversionAngle__ = fmul double %9, %10
  call void @Microsoft__Quantum__Intrinsic__H__body(%Qubit* %controlQubit)
  %11 = call %Callable* @__quantum__rt__callable_copy(%Callable* %3, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %11)
  call void @__quantum__rt__callable_make_controlled(%Callable* %11)
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Array*, { i64, %Array* }* }* }* getelementptr ({ %Array*, { %Array*, { i64, %Array* }* }* }, { %Array*, { %Array*, { i64, %Array* }* }* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Array*, { %Array*, { i64, %Array* }* }* }*
  %14 = getelementptr inbounds { %Array*, { %Array*, { i64, %Array* }* }* }, { %Array*, { %Array*, { i64, %Array* }* }* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Array*, { %Array*, { i64, %Array* }* }* }, { %Array*, { %Array*, { i64, %Array* }* }* }* %13, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 1)
  %16 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { i64, %Array* }* }* getelementptr ({ %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* null, i32 1) to i64))
  %17 = bitcast %Tuple* %16 to { %Array*, { i64, %Array* }* }*
  %18 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %17, i32 0, i32 0
  %19 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %17, i32 0, i32 1
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 1)
  %21 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 0)
  %22 = bitcast i8* %21 to %Qubit**
  store %Qubit* %controlQubit, %Qubit** %22, align 8
  %23 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ i64, %Array* }* getelementptr ({ i64, %Array* }, { i64, %Array* }* null, i32 1) to i64))
  %24 = bitcast %Tuple* %23 to { i64, %Array* }*
  %25 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %24, i32 0, i32 0
  %26 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %24, i32 0, i32 1
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 1)
  store i64 %power, i64* %25, align 4
  store %Array* %targetState, %Array** %26, align 8
  store %Array* %20, %Array** %18, align 8
  store { i64, %Array* }* %24, { i64, %Array* }** %19, align 8
  store %Array* %__controlQubits__, %Array** %14, align 8
  store { %Array*, { i64, %Array* }* }* %17, { %Array*, { i64, %Array* }* }** %15, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %11, %Tuple* %12, %Tuple* null)
  %27 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ double, %Qubit* }* getelementptr ({ double, %Qubit* }, { double, %Qubit* }* null, i32 1) to i64))
  %28 = bitcast %Tuple* %27 to { double, %Qubit* }*
  %29 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %28, i32 0, i32 0
  %30 = getelementptr inbounds { double, %Qubit* }, { double, %Qubit* }* %28, i32 0, i32 1
  store double %__qsVar0__inversionAngle__, double* %29, align 8
  store %Qubit* %controlQubit, %Qubit** %30, align 8
  call void @Microsoft__Quantum__Intrinsic__Rz__ctladj(%Array* %__controlQubits__, { double, %Qubit* }* %28)
  call void @Microsoft__Quantum__Intrinsic__H__adj(%Qubit* %controlQubit)
  call void @__quantum__rt__array_update_alias_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %3, i32 -1)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %4, i32 -1)
  call void @__quantum__rt__array_update_alias_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %11, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %__controlQubits__, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %targetState, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %23, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %16, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %27, i32 -1)
  ret void
}

declare %Result* @__quantum__rt__result_get_zero()

define internal { %Callable* }* @Microsoft__Quantum__Oracles__DiscreteOracle__body(%Callable* %__Item1__) {
entry:
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 1)
  %0 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable* }* getelementptr ({ %Callable* }, { %Callable* }* null, i32 1) to i64))
  %1 = bitcast %Tuple* %0 to { %Callable* }*
  %2 = getelementptr inbounds { %Callable* }, { %Callable* }* %1, i32 0, i32 0
  store %Callable* %__Item1__, %Callable** %2, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %__Item1__, i32 1)
  call void @__quantum__rt__capture_update_alias_count(%Callable* %__Item1__, i32 -1)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %__Item1__, i32 -1)
  ret { %Callable* }* %1
}

define internal void @Lifted__PartialApplication__56__body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %4 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, i64, %Array* }*
  %10 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store i64 %5, i64* %11, align 4
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  call void @__quantum__rt__callable_invoke(%Callable* %14, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__56__adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %2 = load %Callable*, %Callable** %1, align 8
  %3 = bitcast %Tuple* %arg-tuple to { i64, %Array* }*
  %4 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %3, i32 0, i32 1
  %7 = load %Array*, %Array** %6, align 8
  %8 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %9 = bitcast %Tuple* %8 to { %Callable*, i64, %Array* }*
  %10 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 0
  %11 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 1
  %12 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %9, i32 0, i32 2
  store %Callable* %2, %Callable** %10, align 8
  store i64 %5, i64* %11, align 4
  store %Array* %7, %Array** %12, align 8
  %13 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %14 = load %Callable*, %Callable** %13, align 8
  %15 = call %Callable* @__quantum__rt__callable_copy(%Callable* %14, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %15)
  call void @__quantum__rt__callable_invoke(%Callable* %15, %Tuple* %8, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %8, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %15, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %15, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__56__ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, %Array* }*, { i64, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %4, i32 0, i32 0
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Callable*, i64, %Array* }*
  %14 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %13, i32 0, i32 2
  store %Callable* %7, %Callable** %14, align 8
  store i64 %9, i64* %15, align 4
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, i64, %Array* }* }* getelementptr ({ %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { %Callable*, i64, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { %Callable*, i64, %Array* }* %13, { %Callable*, i64, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Lifted__PartialApplication__56__ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { i64, %Array* }* }, { %Array*, { i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { i64, %Array* }*, { i64, %Array* }** %2, align 8
  %5 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %6 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 1
  %7 = load %Callable*, %Callable** %6, align 8
  %8 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %4, i32 0, i32 0
  %9 = load i64, i64* %8, align 4
  %10 = getelementptr inbounds { i64, %Array* }, { i64, %Array* }* %4, i32 0, i32 1
  %11 = load %Array*, %Array** %10, align 8
  %12 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Callable*, i64, %Array* }* getelementptr ({ %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* null, i32 1) to i64))
  %13 = bitcast %Tuple* %12 to { %Callable*, i64, %Array* }*
  %14 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %13, i32 0, i32 0
  %15 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %13, i32 0, i32 1
  %16 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %13, i32 0, i32 2
  store %Callable* %7, %Callable** %14, align 8
  store i64 %9, i64* %15, align 4
  store %Array* %11, %Array** %16, align 8
  %17 = call %Tuple* @__quantum__rt__tuple_create(i64 ptrtoint ({ %Array*, { %Callable*, i64, %Array* }* }* getelementptr ({ %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* null, i32 1) to i64))
  %18 = bitcast %Tuple* %17 to { %Array*, { %Callable*, i64, %Array* }* }*
  %19 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %18, i32 0, i32 0
  %20 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %18, i32 0, i32 1
  store %Array* %3, %Array** %19, align 8
  store { %Callable*, i64, %Array* }* %13, { %Callable*, i64, %Array* }** %20, align 8
  %21 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %5, i32 0, i32 0
  %22 = load %Callable*, %Callable** %21, align 8
  %23 = call %Callable* @__quantum__rt__callable_copy(%Callable* %22, i1 false)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 1)
  call void @__quantum__rt__callable_make_adjoint(%Callable* %23)
  call void @__quantum__rt__callable_make_controlled(%Callable* %23)
  call void @__quantum__rt__callable_invoke(%Callable* %23, %Tuple* %17, %Tuple* %result-tuple)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %12, i32 -1)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %17, i32 -1)
  call void @__quantum__rt__capture_update_reference_count(%Callable* %23, i32 -1)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %23, i32 -1)
  ret void
}

define internal void @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____body__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load i64, i64* %2, align 4
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____body(%Callable* %4, i64 %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____adj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Callable*, i64, %Array* }*
  %1 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 1
  %3 = getelementptr inbounds { %Callable*, i64, %Array* }, { %Callable*, i64, %Array* }* %0, i32 0, i32 2
  %4 = load %Callable*, %Callable** %1, align 8
  %5 = load i64, i64* %2, align 4
  %6 = load %Array*, %Array** %3, align 8
  call void @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____adj(%Callable* %4, i64 %5, %Array* %6)
  ret void
}

define internal void @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____ctl__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, i64, %Array* }*, { %Callable*, i64, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____ctl(%Array* %3, { %Callable*, i64, %Array* }* %4)
  ret void
}

define internal void @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____ctladj__wrapper(%Tuple* %capture-tuple, %Tuple* %arg-tuple, %Tuple* %result-tuple) {
entry:
  %0 = bitcast %Tuple* %arg-tuple to { %Array*, { %Callable*, i64, %Array* }* }*
  %1 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %0, i32 0, i32 0
  %2 = getelementptr inbounds { %Array*, { %Callable*, i64, %Array* }* }, { %Array*, { %Callable*, i64, %Array* }* }* %0, i32 0, i32 1
  %3 = load %Array*, %Array** %1, align 8
  %4 = load { %Callable*, i64, %Array* }*, { %Callable*, i64, %Array* }** %2, align 8
  call void @Microsoft__Quantum__Canon___3a74d5a6c4a846ebbd197ef69277299e___QsRef1__ApplyOperationRepeatedlyCA____ctladj(%Array* %3, { %Callable*, i64, %Array* }* %4)
  ret void
}

define internal void @MemoryManagement__36__RefCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_reference_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_reference_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define internal void @MemoryManagement__36__AliasCount(%Tuple* %capture-tuple, i32 %count-change) {
entry:
  %0 = bitcast %Tuple* %capture-tuple to { %Callable*, %Callable* }*
  %1 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 0
  %2 = load %Callable*, %Callable** %1, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %2, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %2, i32 %count-change)
  %3 = getelementptr inbounds { %Callable*, %Callable* }, { %Callable*, %Callable* }* %0, i32 0, i32 1
  %4 = load %Callable*, %Callable** %3, align 8
  call void @__quantum__rt__capture_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__callable_update_alias_count(%Callable* %4, i32 %count-change)
  call void @__quantum__rt__tuple_update_alias_count(%Tuple* %capture-tuple, i32 %count-change)
  ret void
}

define double @Microsoft__PnnlCollaboration__EstimateEnergyFromFlattenedJWData__Interop(i64 %nQubits, i64 %nZTerms, { i64, i8* }* %zTermIdxs, { i64, i8* }* %zCoeffs, i64 %nZzTerms, { i64, i8* }* %zzTermIdxs, { i64, i8* }* %zzCoeffs, { i64, i8* }* %nPqAndPqqrTerms, { i64, i8* }* %pqAndPqqrTermIdxs, { i64, i8* }* %pqAndPqqrCoeffs, i64 %nH0123Terms, { i64, i8* }* %h0123TermIdxs, { i64, i8* }* %h0123Coeffs, i64 %stateType, { i64, i8* }* %realStateCoeffs, { i64, i8* }* %imagStateCoeffs, { i64, i8* }* %nStateTermIdxs, { i64, i8* }* %stateTermIdxs, double %energyOffset, i64 %nBitsPrecision, double %trotterStepSize, i64 %trotterOrder) #1 {
entry:
  %0 = getelementptr { i64, i8* }, { i64, i8* }* %zTermIdxs, i64 0, i32 0
  %1 = getelementptr { i64, i8* }, { i64, i8* }* %zTermIdxs, i64 0, i32 1
  %2 = load i64, i64* %0, align 4
  %3 = load i8*, i8** %1, align 8
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %2)
  %5 = ptrtoint i8* %3 to i64
  %6 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = mul i64 %7, 8
  %10 = add i64 %5, %9
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %14 = bitcast i8* %13 to i64*
  store i64 %12, i64* %14, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %16 = getelementptr { i64, i8* }, { i64, i8* }* %zCoeffs, i64 0, i32 0
  %17 = getelementptr { i64, i8* }, { i64, i8* }* %zCoeffs, i64 0, i32 1
  %18 = load i64, i64* %16, align 4
  %19 = load i8*, i8** %17, align 8
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %18)
  %21 = ptrtoint i8* %19 to i64
  %22 = sub i64 %18, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %23 = phi i64 [ 0, %exit__1 ], [ %31, %exiting__2 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = mul i64 %23, 8
  %26 = add i64 %21, %25
  %27 = inttoptr i64 %26 to double*
  %28 = load double, double* %27, align 8
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %23)
  %30 = bitcast i8* %29 to double*
  store double %28, double* %30, align 8
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %31 = add i64 %23, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %32 = getelementptr { i64, i8* }, { i64, i8* }* %zzTermIdxs, i64 0, i32 0
  %33 = getelementptr { i64, i8* }, { i64, i8* }* %zzTermIdxs, i64 0, i32 1
  %34 = load i64, i64* %32, align 4
  %35 = load i8*, i8** %33, align 8
  %36 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %34)
  %37 = ptrtoint i8* %35 to i64
  %38 = sub i64 %34, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %39 = phi i64 [ 0, %exit__2 ], [ %47, %exiting__3 ]
  %40 = icmp sle i64 %39, %38
  br i1 %40, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %41 = mul i64 %39, 8
  %42 = add i64 %37, %41
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43, align 4
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 %39)
  %46 = bitcast i8* %45 to i64*
  store i64 %44, i64* %46, align 4
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %47 = add i64 %39, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %48 = getelementptr { i64, i8* }, { i64, i8* }* %zzCoeffs, i64 0, i32 0
  %49 = getelementptr { i64, i8* }, { i64, i8* }* %zzCoeffs, i64 0, i32 1
  %50 = load i64, i64* %48, align 4
  %51 = load i8*, i8** %49, align 8
  %52 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %50)
  %53 = ptrtoint i8* %51 to i64
  %54 = sub i64 %50, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %55 = phi i64 [ 0, %exit__3 ], [ %63, %exiting__4 ]
  %56 = icmp sle i64 %55, %54
  br i1 %56, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %57 = mul i64 %55, 8
  %58 = add i64 %53, %57
  %59 = inttoptr i64 %58 to double*
  %60 = load double, double* %59, align 8
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 %55)
  %62 = bitcast i8* %61 to double*
  store double %60, double* %62, align 8
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %63 = add i64 %55, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %64 = getelementptr { i64, i8* }, { i64, i8* }* %nPqAndPqqrTerms, i64 0, i32 0
  %65 = getelementptr { i64, i8* }, { i64, i8* }* %nPqAndPqqrTerms, i64 0, i32 1
  %66 = load i64, i64* %64, align 4
  %67 = load i8*, i8** %65, align 8
  %68 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %66)
  %69 = ptrtoint i8* %67 to i64
  %70 = sub i64 %66, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %71 = phi i64 [ 0, %exit__4 ], [ %79, %exiting__5 ]
  %72 = icmp sle i64 %71, %70
  br i1 %72, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %73 = mul i64 %71, 8
  %74 = add i64 %69, %73
  %75 = inttoptr i64 %74 to i64*
  %76 = load i64, i64* %75, align 4
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 %71)
  %78 = bitcast i8* %77 to i64*
  store i64 %76, i64* %78, align 4
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %79 = add i64 %71, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %80 = getelementptr { i64, i8* }, { i64, i8* }* %pqAndPqqrTermIdxs, i64 0, i32 0
  %81 = getelementptr { i64, i8* }, { i64, i8* }* %pqAndPqqrTermIdxs, i64 0, i32 1
  %82 = load i64, i64* %80, align 4
  %83 = load i8*, i8** %81, align 8
  %84 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %82)
  %85 = ptrtoint i8* %83 to i64
  %86 = sub i64 %82, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %87 = phi i64 [ 0, %exit__5 ], [ %95, %exiting__6 ]
  %88 = icmp sle i64 %87, %86
  br i1 %88, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %89 = mul i64 %87, 8
  %90 = add i64 %85, %89
  %91 = inttoptr i64 %90 to i64*
  %92 = load i64, i64* %91, align 4
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %84, i64 %87)
  %94 = bitcast i8* %93 to i64*
  store i64 %92, i64* %94, align 4
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %95 = add i64 %87, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  %96 = getelementptr { i64, i8* }, { i64, i8* }* %pqAndPqqrCoeffs, i64 0, i32 0
  %97 = getelementptr { i64, i8* }, { i64, i8* }* %pqAndPqqrCoeffs, i64 0, i32 1
  %98 = load i64, i64* %96, align 4
  %99 = load i8*, i8** %97, align 8
  %100 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %98)
  %101 = ptrtoint i8* %99 to i64
  %102 = sub i64 %98, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %103 = phi i64 [ 0, %exit__6 ], [ %111, %exiting__7 ]
  %104 = icmp sle i64 %103, %102
  br i1 %104, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %105 = mul i64 %103, 8
  %106 = add i64 %101, %105
  %107 = inttoptr i64 %106 to double*
  %108 = load double, double* %107, align 8
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 %103)
  %110 = bitcast i8* %109 to double*
  store double %108, double* %110, align 8
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %111 = add i64 %103, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  %112 = getelementptr { i64, i8* }, { i64, i8* }* %h0123TermIdxs, i64 0, i32 0
  %113 = getelementptr { i64, i8* }, { i64, i8* }* %h0123TermIdxs, i64 0, i32 1
  %114 = load i64, i64* %112, align 4
  %115 = load i8*, i8** %113, align 8
  %116 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %114)
  %117 = ptrtoint i8* %115 to i64
  %118 = sub i64 %114, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %119 = phi i64 [ 0, %exit__7 ], [ %127, %exiting__8 ]
  %120 = icmp sle i64 %119, %118
  br i1 %120, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %121 = mul i64 %119, 8
  %122 = add i64 %117, %121
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123, align 4
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %116, i64 %119)
  %126 = bitcast i8* %125 to i64*
  store i64 %124, i64* %126, align 4
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %127 = add i64 %119, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  %128 = getelementptr { i64, i8* }, { i64, i8* }* %h0123Coeffs, i64 0, i32 0
  %129 = getelementptr { i64, i8* }, { i64, i8* }* %h0123Coeffs, i64 0, i32 1
  %130 = load i64, i64* %128, align 4
  %131 = load i8*, i8** %129, align 8
  %132 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %130)
  %133 = ptrtoint i8* %131 to i64
  %134 = sub i64 %130, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %135 = phi i64 [ 0, %exit__8 ], [ %143, %exiting__9 ]
  %136 = icmp sle i64 %135, %134
  br i1 %136, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %137 = mul i64 %135, 8
  %138 = add i64 %133, %137
  %139 = inttoptr i64 %138 to double*
  %140 = load double, double* %139, align 8
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %132, i64 %135)
  %142 = bitcast i8* %141 to double*
  store double %140, double* %142, align 8
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %143 = add i64 %135, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  %144 = getelementptr { i64, i8* }, { i64, i8* }* %realStateCoeffs, i64 0, i32 0
  %145 = getelementptr { i64, i8* }, { i64, i8* }* %realStateCoeffs, i64 0, i32 1
  %146 = load i64, i64* %144, align 4
  %147 = load i8*, i8** %145, align 8
  %148 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %146)
  %149 = ptrtoint i8* %147 to i64
  %150 = sub i64 %146, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %151 = phi i64 [ 0, %exit__9 ], [ %159, %exiting__10 ]
  %152 = icmp sle i64 %151, %150
  br i1 %152, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %153 = mul i64 %151, 8
  %154 = add i64 %149, %153
  %155 = inttoptr i64 %154 to double*
  %156 = load double, double* %155, align 8
  %157 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %148, i64 %151)
  %158 = bitcast i8* %157 to double*
  store double %156, double* %158, align 8
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %159 = add i64 %151, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  %160 = getelementptr { i64, i8* }, { i64, i8* }* %imagStateCoeffs, i64 0, i32 0
  %161 = getelementptr { i64, i8* }, { i64, i8* }* %imagStateCoeffs, i64 0, i32 1
  %162 = load i64, i64* %160, align 4
  %163 = load i8*, i8** %161, align 8
  %164 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %162)
  %165 = ptrtoint i8* %163 to i64
  %166 = sub i64 %162, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %167 = phi i64 [ 0, %exit__10 ], [ %175, %exiting__11 ]
  %168 = icmp sle i64 %167, %166
  br i1 %168, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %169 = mul i64 %167, 8
  %170 = add i64 %165, %169
  %171 = inttoptr i64 %170 to double*
  %172 = load double, double* %171, align 8
  %173 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %164, i64 %167)
  %174 = bitcast i8* %173 to double*
  store double %172, double* %174, align 8
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %175 = add i64 %167, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  %176 = getelementptr { i64, i8* }, { i64, i8* }* %nStateTermIdxs, i64 0, i32 0
  %177 = getelementptr { i64, i8* }, { i64, i8* }* %nStateTermIdxs, i64 0, i32 1
  %178 = load i64, i64* %176, align 4
  %179 = load i8*, i8** %177, align 8
  %180 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %178)
  %181 = ptrtoint i8* %179 to i64
  %182 = sub i64 %178, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %183 = phi i64 [ 0, %exit__11 ], [ %191, %exiting__12 ]
  %184 = icmp sle i64 %183, %182
  br i1 %184, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %185 = mul i64 %183, 8
  %186 = add i64 %181, %185
  %187 = inttoptr i64 %186 to i64*
  %188 = load i64, i64* %187, align 4
  %189 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %180, i64 %183)
  %190 = bitcast i8* %189 to i64*
  store i64 %188, i64* %190, align 4
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %191 = add i64 %183, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  %192 = getelementptr { i64, i8* }, { i64, i8* }* %stateTermIdxs, i64 0, i32 0
  %193 = getelementptr { i64, i8* }, { i64, i8* }* %stateTermIdxs, i64 0, i32 1
  %194 = load i64, i64* %192, align 4
  %195 = load i8*, i8** %193, align 8
  %196 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %194)
  %197 = ptrtoint i8* %195 to i64
  %198 = sub i64 %194, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %199 = phi i64 [ 0, %exit__12 ], [ %207, %exiting__13 ]
  %200 = icmp sle i64 %199, %198
  br i1 %200, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %201 = mul i64 %199, 8
  %202 = add i64 %197, %201
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203, align 4
  %205 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %196, i64 %199)
  %206 = bitcast i8* %205 to i64*
  store i64 %204, i64* %206, align 4
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %207 = add i64 %199, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  %208 = call double @Microsoft__PnnlCollaboration__EstimateEnergyFromFlattenedJWData__body(i64 %nQubits, i64 %nZTerms, %Array* %4, %Array* %20, i64 %nZzTerms, %Array* %36, %Array* %52, %Array* %68, %Array* %84, %Array* %100, i64 %nH0123Terms, %Array* %116, %Array* %132, i64 %stateType, %Array* %148, %Array* %164, %Array* %180, %Array* %196, double %energyOffset, i64 %nBitsPrecision, double %trotterStepSize, i64 %trotterOrder)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %36, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %68, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %84, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %132, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %148, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %164, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %180, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %196, i32 -1)
  ret double %208
}

define void @Microsoft__PnnlCollaboration__EstimateEnergyFromFlattenedJWData(i64 %nQubits, i64 %nZTerms, { i64, i8* }* %zTermIdxs, { i64, i8* }* %zCoeffs, i64 %nZzTerms, { i64, i8* }* %zzTermIdxs, { i64, i8* }* %zzCoeffs, { i64, i8* }* %nPqAndPqqrTerms, { i64, i8* }* %pqAndPqqrTermIdxs, { i64, i8* }* %pqAndPqqrCoeffs, i64 %nH0123Terms, { i64, i8* }* %h0123TermIdxs, { i64, i8* }* %h0123Coeffs, i64 %stateType, { i64, i8* }* %realStateCoeffs, { i64, i8* }* %imagStateCoeffs, { i64, i8* }* %nStateTermIdxs, { i64, i8* }* %stateTermIdxs, double %energyOffset, i64 %nBitsPrecision, double %trotterStepSize, i64 %trotterOrder) #2 {
entry:
  %0 = getelementptr { i64, i8* }, { i64, i8* }* %zTermIdxs, i64 0, i32 0
  %1 = getelementptr { i64, i8* }, { i64, i8* }* %zTermIdxs, i64 0, i32 1
  %2 = load i64, i64* %0, align 4
  %3 = load i8*, i8** %1, align 8
  %4 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %2)
  %5 = ptrtoint i8* %3 to i64
  %6 = sub i64 %2, 1
  br label %header__1

header__1:                                        ; preds = %exiting__1, %entry
  %7 = phi i64 [ 0, %entry ], [ %15, %exiting__1 ]
  %8 = icmp sle i64 %7, %6
  br i1 %8, label %body__1, label %exit__1

body__1:                                          ; preds = %header__1
  %9 = mul i64 %7, 8
  %10 = add i64 %5, %9
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11, align 4
  %13 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %4, i64 %7)
  %14 = bitcast i8* %13 to i64*
  store i64 %12, i64* %14, align 4
  br label %exiting__1

exiting__1:                                       ; preds = %body__1
  %15 = add i64 %7, 1
  br label %header__1

exit__1:                                          ; preds = %header__1
  %16 = getelementptr { i64, i8* }, { i64, i8* }* %zCoeffs, i64 0, i32 0
  %17 = getelementptr { i64, i8* }, { i64, i8* }* %zCoeffs, i64 0, i32 1
  %18 = load i64, i64* %16, align 4
  %19 = load i8*, i8** %17, align 8
  %20 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %18)
  %21 = ptrtoint i8* %19 to i64
  %22 = sub i64 %18, 1
  br label %header__2

header__2:                                        ; preds = %exiting__2, %exit__1
  %23 = phi i64 [ 0, %exit__1 ], [ %31, %exiting__2 ]
  %24 = icmp sle i64 %23, %22
  br i1 %24, label %body__2, label %exit__2

body__2:                                          ; preds = %header__2
  %25 = mul i64 %23, 8
  %26 = add i64 %21, %25
  %27 = inttoptr i64 %26 to double*
  %28 = load double, double* %27, align 8
  %29 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %20, i64 %23)
  %30 = bitcast i8* %29 to double*
  store double %28, double* %30, align 8
  br label %exiting__2

exiting__2:                                       ; preds = %body__2
  %31 = add i64 %23, 1
  br label %header__2

exit__2:                                          ; preds = %header__2
  %32 = getelementptr { i64, i8* }, { i64, i8* }* %zzTermIdxs, i64 0, i32 0
  %33 = getelementptr { i64, i8* }, { i64, i8* }* %zzTermIdxs, i64 0, i32 1
  %34 = load i64, i64* %32, align 4
  %35 = load i8*, i8** %33, align 8
  %36 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %34)
  %37 = ptrtoint i8* %35 to i64
  %38 = sub i64 %34, 1
  br label %header__3

header__3:                                        ; preds = %exiting__3, %exit__2
  %39 = phi i64 [ 0, %exit__2 ], [ %47, %exiting__3 ]
  %40 = icmp sle i64 %39, %38
  br i1 %40, label %body__3, label %exit__3

body__3:                                          ; preds = %header__3
  %41 = mul i64 %39, 8
  %42 = add i64 %37, %41
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43, align 4
  %45 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %36, i64 %39)
  %46 = bitcast i8* %45 to i64*
  store i64 %44, i64* %46, align 4
  br label %exiting__3

exiting__3:                                       ; preds = %body__3
  %47 = add i64 %39, 1
  br label %header__3

exit__3:                                          ; preds = %header__3
  %48 = getelementptr { i64, i8* }, { i64, i8* }* %zzCoeffs, i64 0, i32 0
  %49 = getelementptr { i64, i8* }, { i64, i8* }* %zzCoeffs, i64 0, i32 1
  %50 = load i64, i64* %48, align 4
  %51 = load i8*, i8** %49, align 8
  %52 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %50)
  %53 = ptrtoint i8* %51 to i64
  %54 = sub i64 %50, 1
  br label %header__4

header__4:                                        ; preds = %exiting__4, %exit__3
  %55 = phi i64 [ 0, %exit__3 ], [ %63, %exiting__4 ]
  %56 = icmp sle i64 %55, %54
  br i1 %56, label %body__4, label %exit__4

body__4:                                          ; preds = %header__4
  %57 = mul i64 %55, 8
  %58 = add i64 %53, %57
  %59 = inttoptr i64 %58 to double*
  %60 = load double, double* %59, align 8
  %61 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %52, i64 %55)
  %62 = bitcast i8* %61 to double*
  store double %60, double* %62, align 8
  br label %exiting__4

exiting__4:                                       ; preds = %body__4
  %63 = add i64 %55, 1
  br label %header__4

exit__4:                                          ; preds = %header__4
  %64 = getelementptr { i64, i8* }, { i64, i8* }* %nPqAndPqqrTerms, i64 0, i32 0
  %65 = getelementptr { i64, i8* }, { i64, i8* }* %nPqAndPqqrTerms, i64 0, i32 1
  %66 = load i64, i64* %64, align 4
  %67 = load i8*, i8** %65, align 8
  %68 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %66)
  %69 = ptrtoint i8* %67 to i64
  %70 = sub i64 %66, 1
  br label %header__5

header__5:                                        ; preds = %exiting__5, %exit__4
  %71 = phi i64 [ 0, %exit__4 ], [ %79, %exiting__5 ]
  %72 = icmp sle i64 %71, %70
  br i1 %72, label %body__5, label %exit__5

body__5:                                          ; preds = %header__5
  %73 = mul i64 %71, 8
  %74 = add i64 %69, %73
  %75 = inttoptr i64 %74 to i64*
  %76 = load i64, i64* %75, align 4
  %77 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %68, i64 %71)
  %78 = bitcast i8* %77 to i64*
  store i64 %76, i64* %78, align 4
  br label %exiting__5

exiting__5:                                       ; preds = %body__5
  %79 = add i64 %71, 1
  br label %header__5

exit__5:                                          ; preds = %header__5
  %80 = getelementptr { i64, i8* }, { i64, i8* }* %pqAndPqqrTermIdxs, i64 0, i32 0
  %81 = getelementptr { i64, i8* }, { i64, i8* }* %pqAndPqqrTermIdxs, i64 0, i32 1
  %82 = load i64, i64* %80, align 4
  %83 = load i8*, i8** %81, align 8
  %84 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %82)
  %85 = ptrtoint i8* %83 to i64
  %86 = sub i64 %82, 1
  br label %header__6

header__6:                                        ; preds = %exiting__6, %exit__5
  %87 = phi i64 [ 0, %exit__5 ], [ %95, %exiting__6 ]
  %88 = icmp sle i64 %87, %86
  br i1 %88, label %body__6, label %exit__6

body__6:                                          ; preds = %header__6
  %89 = mul i64 %87, 8
  %90 = add i64 %85, %89
  %91 = inttoptr i64 %90 to i64*
  %92 = load i64, i64* %91, align 4
  %93 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %84, i64 %87)
  %94 = bitcast i8* %93 to i64*
  store i64 %92, i64* %94, align 4
  br label %exiting__6

exiting__6:                                       ; preds = %body__6
  %95 = add i64 %87, 1
  br label %header__6

exit__6:                                          ; preds = %header__6
  %96 = getelementptr { i64, i8* }, { i64, i8* }* %pqAndPqqrCoeffs, i64 0, i32 0
  %97 = getelementptr { i64, i8* }, { i64, i8* }* %pqAndPqqrCoeffs, i64 0, i32 1
  %98 = load i64, i64* %96, align 4
  %99 = load i8*, i8** %97, align 8
  %100 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %98)
  %101 = ptrtoint i8* %99 to i64
  %102 = sub i64 %98, 1
  br label %header__7

header__7:                                        ; preds = %exiting__7, %exit__6
  %103 = phi i64 [ 0, %exit__6 ], [ %111, %exiting__7 ]
  %104 = icmp sle i64 %103, %102
  br i1 %104, label %body__7, label %exit__7

body__7:                                          ; preds = %header__7
  %105 = mul i64 %103, 8
  %106 = add i64 %101, %105
  %107 = inttoptr i64 %106 to double*
  %108 = load double, double* %107, align 8
  %109 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %100, i64 %103)
  %110 = bitcast i8* %109 to double*
  store double %108, double* %110, align 8
  br label %exiting__7

exiting__7:                                       ; preds = %body__7
  %111 = add i64 %103, 1
  br label %header__7

exit__7:                                          ; preds = %header__7
  %112 = getelementptr { i64, i8* }, { i64, i8* }* %h0123TermIdxs, i64 0, i32 0
  %113 = getelementptr { i64, i8* }, { i64, i8* }* %h0123TermIdxs, i64 0, i32 1
  %114 = load i64, i64* %112, align 4
  %115 = load i8*, i8** %113, align 8
  %116 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %114)
  %117 = ptrtoint i8* %115 to i64
  %118 = sub i64 %114, 1
  br label %header__8

header__8:                                        ; preds = %exiting__8, %exit__7
  %119 = phi i64 [ 0, %exit__7 ], [ %127, %exiting__8 ]
  %120 = icmp sle i64 %119, %118
  br i1 %120, label %body__8, label %exit__8

body__8:                                          ; preds = %header__8
  %121 = mul i64 %119, 8
  %122 = add i64 %117, %121
  %123 = inttoptr i64 %122 to i64*
  %124 = load i64, i64* %123, align 4
  %125 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %116, i64 %119)
  %126 = bitcast i8* %125 to i64*
  store i64 %124, i64* %126, align 4
  br label %exiting__8

exiting__8:                                       ; preds = %body__8
  %127 = add i64 %119, 1
  br label %header__8

exit__8:                                          ; preds = %header__8
  %128 = getelementptr { i64, i8* }, { i64, i8* }* %h0123Coeffs, i64 0, i32 0
  %129 = getelementptr { i64, i8* }, { i64, i8* }* %h0123Coeffs, i64 0, i32 1
  %130 = load i64, i64* %128, align 4
  %131 = load i8*, i8** %129, align 8
  %132 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %130)
  %133 = ptrtoint i8* %131 to i64
  %134 = sub i64 %130, 1
  br label %header__9

header__9:                                        ; preds = %exiting__9, %exit__8
  %135 = phi i64 [ 0, %exit__8 ], [ %143, %exiting__9 ]
  %136 = icmp sle i64 %135, %134
  br i1 %136, label %body__9, label %exit__9

body__9:                                          ; preds = %header__9
  %137 = mul i64 %135, 8
  %138 = add i64 %133, %137
  %139 = inttoptr i64 %138 to double*
  %140 = load double, double* %139, align 8
  %141 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %132, i64 %135)
  %142 = bitcast i8* %141 to double*
  store double %140, double* %142, align 8
  br label %exiting__9

exiting__9:                                       ; preds = %body__9
  %143 = add i64 %135, 1
  br label %header__9

exit__9:                                          ; preds = %header__9
  %144 = getelementptr { i64, i8* }, { i64, i8* }* %realStateCoeffs, i64 0, i32 0
  %145 = getelementptr { i64, i8* }, { i64, i8* }* %realStateCoeffs, i64 0, i32 1
  %146 = load i64, i64* %144, align 4
  %147 = load i8*, i8** %145, align 8
  %148 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %146)
  %149 = ptrtoint i8* %147 to i64
  %150 = sub i64 %146, 1
  br label %header__10

header__10:                                       ; preds = %exiting__10, %exit__9
  %151 = phi i64 [ 0, %exit__9 ], [ %159, %exiting__10 ]
  %152 = icmp sle i64 %151, %150
  br i1 %152, label %body__10, label %exit__10

body__10:                                         ; preds = %header__10
  %153 = mul i64 %151, 8
  %154 = add i64 %149, %153
  %155 = inttoptr i64 %154 to double*
  %156 = load double, double* %155, align 8
  %157 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %148, i64 %151)
  %158 = bitcast i8* %157 to double*
  store double %156, double* %158, align 8
  br label %exiting__10

exiting__10:                                      ; preds = %body__10
  %159 = add i64 %151, 1
  br label %header__10

exit__10:                                         ; preds = %header__10
  %160 = getelementptr { i64, i8* }, { i64, i8* }* %imagStateCoeffs, i64 0, i32 0
  %161 = getelementptr { i64, i8* }, { i64, i8* }* %imagStateCoeffs, i64 0, i32 1
  %162 = load i64, i64* %160, align 4
  %163 = load i8*, i8** %161, align 8
  %164 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %162)
  %165 = ptrtoint i8* %163 to i64
  %166 = sub i64 %162, 1
  br label %header__11

header__11:                                       ; preds = %exiting__11, %exit__10
  %167 = phi i64 [ 0, %exit__10 ], [ %175, %exiting__11 ]
  %168 = icmp sle i64 %167, %166
  br i1 %168, label %body__11, label %exit__11

body__11:                                         ; preds = %header__11
  %169 = mul i64 %167, 8
  %170 = add i64 %165, %169
  %171 = inttoptr i64 %170 to double*
  %172 = load double, double* %171, align 8
  %173 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %164, i64 %167)
  %174 = bitcast i8* %173 to double*
  store double %172, double* %174, align 8
  br label %exiting__11

exiting__11:                                      ; preds = %body__11
  %175 = add i64 %167, 1
  br label %header__11

exit__11:                                         ; preds = %header__11
  %176 = getelementptr { i64, i8* }, { i64, i8* }* %nStateTermIdxs, i64 0, i32 0
  %177 = getelementptr { i64, i8* }, { i64, i8* }* %nStateTermIdxs, i64 0, i32 1
  %178 = load i64, i64* %176, align 4
  %179 = load i8*, i8** %177, align 8
  %180 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %178)
  %181 = ptrtoint i8* %179 to i64
  %182 = sub i64 %178, 1
  br label %header__12

header__12:                                       ; preds = %exiting__12, %exit__11
  %183 = phi i64 [ 0, %exit__11 ], [ %191, %exiting__12 ]
  %184 = icmp sle i64 %183, %182
  br i1 %184, label %body__12, label %exit__12

body__12:                                         ; preds = %header__12
  %185 = mul i64 %183, 8
  %186 = add i64 %181, %185
  %187 = inttoptr i64 %186 to i64*
  %188 = load i64, i64* %187, align 4
  %189 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %180, i64 %183)
  %190 = bitcast i8* %189 to i64*
  store i64 %188, i64* %190, align 4
  br label %exiting__12

exiting__12:                                      ; preds = %body__12
  %191 = add i64 %183, 1
  br label %header__12

exit__12:                                         ; preds = %header__12
  %192 = getelementptr { i64, i8* }, { i64, i8* }* %stateTermIdxs, i64 0, i32 0
  %193 = getelementptr { i64, i8* }, { i64, i8* }* %stateTermIdxs, i64 0, i32 1
  %194 = load i64, i64* %192, align 4
  %195 = load i8*, i8** %193, align 8
  %196 = call %Array* @__quantum__rt__array_create_1d(i32 8, i64 %194)
  %197 = ptrtoint i8* %195 to i64
  %198 = sub i64 %194, 1
  br label %header__13

header__13:                                       ; preds = %exiting__13, %exit__12
  %199 = phi i64 [ 0, %exit__12 ], [ %207, %exiting__13 ]
  %200 = icmp sle i64 %199, %198
  br i1 %200, label %body__13, label %exit__13

body__13:                                         ; preds = %header__13
  %201 = mul i64 %199, 8
  %202 = add i64 %197, %201
  %203 = inttoptr i64 %202 to i64*
  %204 = load i64, i64* %203, align 4
  %205 = call i8* @__quantum__rt__array_get_element_ptr_1d(%Array* %196, i64 %199)
  %206 = bitcast i8* %205 to i64*
  store i64 %204, i64* %206, align 4
  br label %exiting__13

exiting__13:                                      ; preds = %body__13
  %207 = add i64 %199, 1
  br label %header__13

exit__13:                                         ; preds = %header__13
  %208 = call double @Microsoft__PnnlCollaboration__EstimateEnergyFromFlattenedJWData__body(i64 %nQubits, i64 %nZTerms, %Array* %4, %Array* %20, i64 %nZzTerms, %Array* %36, %Array* %52, %Array* %68, %Array* %84, %Array* %100, i64 %nH0123Terms, %Array* %116, %Array* %132, i64 %stateType, %Array* %148, %Array* %164, %Array* %180, %Array* %196, double %energyOffset, i64 %nBitsPrecision, double %trotterStepSize, i64 %trotterOrder)
  %209 = call %String* @__quantum__rt__double_to_string(double %208)
  call void @__quantum__rt__message(%String* %209)
  call void @__quantum__rt__array_update_reference_count(%Array* %4, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %20, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %36, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %52, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %68, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %84, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %100, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %116, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %132, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %148, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %164, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %180, i32 -1)
  call void @__quantum__rt__array_update_reference_count(%Array* %196, i32 -1)
  call void @__quantum__rt__string_update_reference_count(%String* %209, i32 -1)
  ret void
}

declare %String* @__quantum__rt__double_to_string(double)

attributes #0 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #1 = { "InteropFriendly" }
attributes #2 = { "EntryPoint" }
